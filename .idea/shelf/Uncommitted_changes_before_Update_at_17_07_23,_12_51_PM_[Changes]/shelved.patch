Index: app/src/main/java/com/nas/alreem/activity/cca/CCA_Activity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.nas.alreem.activity.cca\n\nimport android.app.Dialog\nimport android.content.Context\nimport android.content.Intent\nimport android.graphics.Color\nimport android.graphics.drawable.ColorDrawable\nimport android.os.Build\nimport android.os.Bundle\nimport android.util.Log\nimport android.view.View\nimport android.view.Window\nimport android.widget.*\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.core.content.ContextCompat\nimport androidx.recyclerview.widget.DividerItemDecoration\nimport androidx.recyclerview.widget.GridLayoutManager\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport androidx.recyclerview.widget.RecyclerView\nimport com.bumptech.glide.Glide\nimport com.bumptech.glide.load.engine.DiskCacheStrategy\nimport com.bumptech.glide.load.resource.bitmap.CircleCrop\nimport com.nas.alreem.R\nimport com.nas.alreem.activity.cca.adapter.CCAsListActivityAdapter\nimport com.nas.alreem.activity.cca.model.*\nimport com.nas.alreem.activity.home.HomeActivity\nimport com.nas.alreem.activity.payments.adapter.StudentListAdapter\nimport com.nas.alreem.activity.payments.model.StudentList\nimport com.nas.alreem.activity.payments.model.StudentListModel\nimport com.nas.alreem.constants.ConstantFunctions\nimport com.nas.alreem.constants.OnItemClickListener\nimport com.nas.alreem.constants.PreferenceManager\nimport com.nas.alreem.constants.addOnItemClickListener\nimport com.nas.alreem.rest.ApiClient\nimport retrofit2.Call\nimport retrofit2.Callback\nimport retrofit2.Response\n\nclass CCA_Activity : AppCompatActivity() {\n    lateinit var mContext: Context\n    lateinit var titleTextView: TextView\n    lateinit var back: ImageView\n    lateinit var backRelative: RelativeLayout\n    lateinit var logoclick: ImageView\n    lateinit var progress: ProgressBar\n    var studentListArrayList = ArrayList<StudentList>()\n    var mCCAmodelArrayList: ArrayList<CCAModel>? = ArrayList()\n   var CCADetailModelArrayList: ArrayList<CCADetailModel>? = ArrayList()\n    var CCAchoiceModelArrayList: ArrayList<CCAchoiceModel>? = ArrayList()\n    var CCAchoiceModelArrayList2: ArrayList<CCAchoiceModel>? = ArrayList()\n   lateinit var studentName: TextView\n   lateinit var textViewYear: TextView\n   lateinit var enterTextView: TextView\n    var stud_id = \"\"\n    var stud_class = \"\"\n    var stud_name = \"\"\n    var mStudentSpinner: LinearLayout? = null\n    var relativeHeader: RelativeLayout? = null\n    lateinit var student_Name: String\n    lateinit var studentId: String\n    lateinit var studentImg: String\n    lateinit var studentClass: String\n   lateinit var studImg: ImageView\n    var stud_img = \"\"\n\n    var tab_type = \"ECA Options\"\n    var extras: Bundle? = null\n    var recycler_review: RecyclerView? = null\n    var recyclerViewLayoutManager: GridLayoutManager? = null\n    var mCCAsActivityAdapter: CCAsListActivityAdapter? = null\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_cca)\n        mContext = this\n        initilaiseUI()\n        logoclick.setOnClickListener {\n            val mIntent = Intent(mContext, HomeActivity::class.java)\n            mIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)\n\n            startActivity(mIntent)\n        }\n        backRelative.setOnClickListener {\n            finish()\n        }\n        mStudentSpinner!!.setOnClickListener { showStudentsList(mContext,studentListArrayList) }\n        var internetCheck = ConstantFunctions.internetCheck(mContext)\n        if (internetCheck) {\n            getStudentList()\n\n        } else {\n            //  InternetCheckClass.showSuccessInternetAlert(mContext)\n        }\n    }\n\n    private fun showStudentsList(mContext: Context, mStudentArray: ArrayList<StudentList>) {\n        val dialog = Dialog(mContext)\n        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE)\n        dialog.setContentView(R.layout.dialogue_student_list)\n        dialog.window!!.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))\n        val dialogDismiss = dialog.findViewById<View>(R.id.btn_dismiss) as Button\n        val iconImageView = dialog.findViewById<View>(R.id.iconImageView) as ImageView\n        iconImageView.setImageResource(R.drawable.boy)\n        val socialMediaList =\n            dialog.findViewById<View>(R.id.studentListRecycler) as RecyclerView\n        //if(mSocialMediaArray.get())\n        //if(mSocialMediaArray.get())\n        val sdk = Build.VERSION.SDK_INT\n        if (sdk < Build.VERSION_CODES.JELLY_BEAN) {\n            dialogDismiss.setBackgroundDrawable(mContext.resources.getDrawable(R.drawable.button))\n        } else {\n            dialogDismiss.background = mContext.resources.getDrawable(R.drawable.button)\n        }\n\n        val divider = DividerItemDecoration(mContext, DividerItemDecoration.VERTICAL)\n        divider.setDrawable(ContextCompat.getDrawable(mContext,R.drawable.list_divider_teal)!!)\n        socialMediaList!!.addItemDecoration(divider)\n\n        socialMediaList.setHasFixedSize(true)\n        val llm = LinearLayoutManager(mContext)\n        llm.orientation = LinearLayoutManager.VERTICAL\n        socialMediaList.layoutManager = llm\n\n        val studentAdapter = StudentListAdapter(mContext, mStudentArray)\n        socialMediaList.adapter = studentAdapter\n        dialogDismiss.setOnClickListener { dialog.dismiss() }\n        socialMediaList.addOnItemClickListener(object :OnItemClickListener{\n            override fun onItemClicked(position: Int, view: View) {\n                dialog.dismiss()\n                studentName!!.setText(mStudentArray!!.get(position).name)\n                stud_id = mStudentArray!!.get(position).id.toString()\n                stud_name = mStudentArray.get(position).name.toString()\n                stud_class = mStudentArray.get(position).studentClass.toString()\n                stud_img = mStudentArray.get(position).photo.toString()\n                textViewYear!!.text = \"Class : \" + mStudentArray.get(position).studentClass\n                if (stud_img != \"\") {\n                    Glide.with(mContext) //1\n                        .load(stud_img)\n                        .placeholder(R.drawable.student)\n                        .error(R.drawable.student)\n                        .skipMemoryCache(true) //2\n                        .diskCacheStrategy(DiskCacheStrategy.NONE) //3\n                        .transform(CircleCrop()) //4\n                        .into(studImg!!)\n                } else {\n                    studImg!!.setImageResource(R.drawable.boy)\n                }\n                PreferenceManager.setCCAStudentIdPosition(\n                    mContext,\n                    position.toString() + \"\"\n                )\n                getCCAListAPI(stud_id)\n            }\n\n        })\n\n        dialog.show()\n    }\n\n    private fun getStudentList() {\n        progress.visibility = View.VISIBLE\n        val token = PreferenceManager.getaccesstoken(mContext)\n        val call: Call<StudentListModel> = ApiClient.getClient.studentList(\"Bearer \"+token)\n        call.enqueue(object : Callback<StudentListModel> {\n            override fun onFailure(call: Call<StudentListModel>, t: Throwable) {\n                Log.e(\"Error\", t.localizedMessage)\n                progress.visibility = View.GONE\n            }\n            override fun onResponse(call: Call<StudentListModel>, response: Response<StudentListModel>) {\n                progress.visibility = View.GONE\n                //val arraySize :Int = response.body()!!.responseArray.studentList.size\n                if (response.body()!!.status==100)\n                {\n                    studentListArrayList.addAll(response.body()!!.responseArray.studentList)\n                    if (PreferenceManager.getStudentID(mContext).equals(\"\"))\n                    {\n                        Log.e(\"studentname\",student_Name)\n                        student_Name=studentListArrayList.get(0).name\n                        studentImg=studentListArrayList.get(0).photo\n                        studentId=studentListArrayList.get(0).id\n                        studentClass=studentListArrayList.get(0).section\n                        PreferenceManager.setStudentID(mContext,studentId)\n                        PreferenceManager.setStudentName(mContext,student_Name)\n                        PreferenceManager.setStudentPhoto(mContext,studentImg)\n                        PreferenceManager.setStudentClass(mContext,studentClass)\n                        studentName.text=student_Name\n                        if(!studentImg.equals(\"\"))\n                        {\n                            Glide.with(mContext) //1\n                                .load(studentImg)\n                                .placeholder(R.drawable.student)\n                                .error(R.drawable.student)\n                                .skipMemoryCache(true) //2\n                                .diskCacheStrategy(DiskCacheStrategy.NONE) //3\n                                .transform(CircleCrop()) //4\n                                .into(studImg)\n                        }\n                        else{\n                            studImg.setImageResource(R.drawable.student)\n                        }\n\n                    }\n                    else{\n                        student_Name= PreferenceManager.getStudentName(mContext)!!\n                        studentImg= PreferenceManager.getStudentPhoto(mContext)!!\n                        studentId= PreferenceManager.getStudentID(mContext)!!\n                        PreferenceManager.setStudIdForCCA(mContext, studentId)\n                        Log.e(\"Studentid1\",studentId)\n                        studentClass= PreferenceManager.getStudentClass(mContext)!!\n                        studentName.text=student_Name\n                        if(!studentImg.equals(\"\"))\n                        {\n                            Glide.with(mContext) //1\n                                .load(studentImg)\n                                .placeholder(R.drawable.student)\n                                .error(R.drawable.student)\n                                .skipMemoryCache(true) //2\n                                .diskCacheStrategy(DiskCacheStrategy.NONE) //3\n                                .transform(CircleCrop()) //4\n                                .into(studImg)\n                        }\n                        else{\n                            studImg.setImageResource(R.drawable.student)\n                        }\n                    }\n\n                    getCCAListAPI(studentId)\n//                    var internetCheck = InternetCheckClass.isInternetAvailable(nContext)\n//                    if (internetCheck)\n//                    {\n//                        //callStudentLeaveInfo()\n//                    }\n//                    else{\n//                        InternetCheckClass.showSuccessInternetAlert(com.mobatia.bisad.fragment.home.mContext)\n//                    }\n\n                    //callStudentInfoApi()\n                }\n\n\n            }\n\n        })\n    }\n\n    private fun getCCAListAPI(studId: String) {\n        Log.e(\"studId\",studId)\n        val body = CCAListRequestModel(studId)\n        val token = PreferenceManager.getaccesstoken(mContext)\n        val call: Call<CCAListResponseModel> =\n            ApiClient.getClient.getCCAList( body,\"Bearer $token\")\n        progress.visibility = View.VISIBLE\n        call.enqueue(object : Callback<CCAListResponseModel> {\n            override fun onResponse(\n                call: Call<CCAListResponseModel>,\n                response: Response<CCAListResponseModel>\n            ) {\n                progress.visibility = View.GONE\n                    mCCAmodelArrayList = ArrayList()\n\n                    if (response.body() != null) {\n                        if (response.body()!!.status!!.equals(100)) {\n\n                            if (response.body()!!.data!!.isNotEmpty()) {\n                                for (i in response.body()!!.data!!.indices) {\n                                    enterTextView!!.visibility = View.VISIBLE\n                                    Log.e(\"isattentii\", response.body()!!.data!![i].isAttendee.toString())\n                                    mCCAmodelArrayList!!.add(addCCAlist(response.body()!!.data!![i]))\n                                }\n                                Log.e(\"arraty\", mCCAmodelArrayList!!.get(0).isAttendee.toString())\n                                Log.e(\"title\", mCCAmodelArrayList!!.get(0).title.toString())\n                                if (mCCAmodelArrayList!!.size > 0) {\n                                    mCCAsActivityAdapter = CCAsListActivityAdapter(\n                                        this@CCA_Activity,\n                                        mCCAmodelArrayList!!\n                                    )\n                                    recycler_review!!.adapter = mCCAsActivityAdapter\n                                }\n                            } else {\n                                mCCAsActivityAdapter =\n                                    CCAsListActivityAdapter(this@CCA_Activity, mCCAmodelArrayList!!)\n                                recycler_review!!.adapter = mCCAsActivityAdapter\n                                enterTextView!!.visibility = View.GONE\n                                Toast.makeText(\n                                    this@CCA_Activity,\n                                    \"No ECA available\",\n                                    Toast.LENGTH_SHORT\n                                ).show()\n                            }\n                        }else{\n                            Toast.makeText(mContext, \"Fail\", Toast.LENGTH_SHORT).show()\n                        }\n                    }\n//                    else if (response_code.equals(\"500\", ignoreCase = true)) {\n//                        AppUtils.showDialogAlertDismiss(\n//                            mContext as Activity,\n//                            \"Alert\",\n//                            getString(R.string.common_error),\n//                            R.drawable.exclamationicon,\n//                            R.drawable.round\n//                        )\n//                    } else if (response_code.equals(\"400\", ignoreCase = true)) {\n//                        AppUtils.getToken(mContext, object : GetTokenSuccess() {\n//                            fun tokenrenewed() {\n//                                getCCAListAPI(studentId)\n//                            }\n//                        })\n//                    } else if (response_code.equals(\"401\", ignoreCase = true)) {\n//                        AppUtils.getToken(mContext, object : GetTokenSuccess() {\n//                            fun tokenrenewed() {\n//                                getCCAListAPI(studentId)\n//                            }\n//                        })\n//                    } else if (response_code.equals(\"402\", ignoreCase = true)) {\n//                        AppUtils.getToken(mContext, object : GetTokenSuccess() {\n//                            fun tokenrenewed() {\n//                                getCCAListAPI(studentId)\n//                            }\n//                        })\n//                    }\n                    else {\n                        ConstantFunctions.showDialogueWithOk(mContext,getString(R.string.common_error),\"Alert\")\n                    }\n\n            }\n\n            override fun onFailure(call: Call<CCAListResponseModel>, t: Throwable) {\n                progress.visibility = View.GONE\n                ConstantFunctions.showDialogueWithOk(mContext,getString(R.string.common_error),\"Alert\")\n            }\n\n        })\n    }\n\n    private fun addCCAlist(dataObject: CCAListResponseModel.Data): CCAModel {\n        val mCCAModel = CCAModel()\n        mCCAModel.cca_days_id = dataObject!!.cca_days_id.toString()\n        mCCAModel.title = dataObject.title\n        mCCAModel.from_date = dataObject.from_date\n        mCCAModel.to_date = dataObject.to_date\n        mCCAModel.isAttendee = dataObject.isAttendee\n        mCCAModel.status = dataObject.status.toString()\n\n        mCCAModel.submission_dateTime = dataObject.submission_dateTime\n        mCCAModel.isSubmissionDateOver = dataObject.isSubmissiondateOver\n        val jsonCCADetailArray: ArrayList<CCAListResponseModel.Data.Detail>? = dataObject.details\n        Log.e(\"choice2adasda\", dataObject.details!![0]!!.choice2.toString())\n\n        Log.e(\"choice2adasda\", dataObject.details!![0]!!.choice2!![0]!!.attending_status.toString())\n        CCADetailModelArrayList = java.util.ArrayList<CCADetailModel>()\n        if (jsonCCADetailArray!!.isNotEmpty()) {\n            for (element in jsonCCADetailArray) {\n                val objectCCA = element\n                val mCCADetailModel = CCADetailModel()\n                mCCADetailModel.day = objectCCA!!.day\n\n                val jsonCCAChoiceArray = objectCCA.choice1\n                val jsonCCAChoiceArray2 = objectCCA.choice2\n                Log.e(\"choice1\",objectCCA.choice1.toString())\n                Log.e(\"choice2 atte\", objectCCA.choice1!![0]!!.attending_status.toString())\n                Log.e(\"choice2 atte\", objectCCA.choice2!![0]!!.attending_status.toString())\n                Log.e(\"choice2 atte\", jsonCCAChoiceArray2!![0]!!.attending_status.toString())\n                CCAchoiceModelArrayList = java.util.ArrayList<CCAchoiceModel>()\n                if (jsonCCAChoiceArray!!.size > 0) {\n                    var k = 0\n                    for (j in 0..jsonCCAChoiceArray.size) {\n                        val mCCADetailModelchoice = CCAchoiceModel()\n                        if (jsonCCAChoiceArray.size != j) {\n                            val objectCCAchoice = jsonCCAChoiceArray[j]\n                            mCCADetailModelchoice.cca_item_name = objectCCAchoice!!.cca_item_name\n                            mCCADetailModelchoice.cca_details_id = objectCCAchoice.cca_details_id.toString()\n                            mCCADetailModelchoice.isattending = objectCCAchoice.isAttendee\n                            mCCADetailModelchoice.cca_item_start_time = objectCCAchoice.cca_item_start_time\n                            mCCADetailModelchoice.cca_item_end_time = objectCCAchoice.cca_item_end_time\n                            mCCADetailModelchoice.venue = objectCCAchoice.venue\n\n                            if (objectCCAchoice.attending_status\n                                    .equals(\"0\", ignoreCase = true)\n                            ) {\n                                if (dataObject.isAttendee\n                                        .equals(\"2\", ignoreCase = true)\n                                ) {\n                                    mCCADetailModelchoice.status = \"1\"\n                                    mCCADetailModel.choice1 = objectCCAchoice.cca_item_name\n                                    mCCADetailModel.choice1Id = objectCCAchoice.cca_details_id.toString()\n                                } else {\n                                    mCCADetailModelchoice.status = \"0\"\n                                }\n                                k = k + 1\n                            } else {\n                                mCCADetailModelchoice.status = \"0\"\n                            }\n                            mCCADetailModelchoice.disableCccaiem = false\n                            mCCADetailModelchoice.dayChoice = objectCCAchoice.day\n                        } else {\n                            mCCADetailModelchoice.cca_item_name = \"None\"\n                            mCCADetailModelchoice.cca_details_id = \"-541\"\n                            mCCADetailModelchoice.venue = \"0\"\n                            mCCADetailModelchoice.isattending = \"0\"\n                            if (k == 0) {\n                                if (dataObject.isAttendee\n                                        .equals(\"2\", ignoreCase = true)\n                                ) {\n                                    mCCADetailModelchoice.status = \"1\"\n                                    mCCADetailModel.choice1 = \"None\"\n                                    mCCADetailModel.choice1Id = \"-541\"\n                                } else {\n                                    mCCADetailModelchoice.status = \"0\"\n                                }\n                            } else {\n                                mCCADetailModelchoice.status = \"0\"\n                            }\n                            mCCADetailModelchoice.disableCccaiem = false\n                            mCCADetailModelchoice.dayChoice = objectCCA.day\n                        }\n                        CCAchoiceModelArrayList!!.add(mCCADetailModelchoice)\n                    }\n                }\n                mCCADetailModel.ccaChoiceModel = CCAchoiceModelArrayList\n                CCAchoiceModelArrayList2 = java.util.ArrayList<CCAchoiceModel>()\n                if (jsonCCAChoiceArray2!!.isNotEmpty()) {\n                    var k = 0\n                    for (j in 0..jsonCCAChoiceArray2.size) {\n                        val mCCADetailModelchoice = CCAchoiceModel()\n                        if (jsonCCAChoiceArray2.size != j) {\n                            val objectCCAchoice = jsonCCAChoiceArray2[j]\n                            mCCADetailModelchoice.cca_item_name = objectCCAchoice!!.cca_item_name\n                            mCCADetailModelchoice.cca_details_id = objectCCAchoice.cca_details_id.toString()\n                            mCCADetailModelchoice.isattending = objectCCAchoice.isAttendee\n                            mCCADetailModelchoice.cca_item_start_time = objectCCAchoice.cca_item_start_time\n                            mCCADetailModelchoice.cca_item_end_time = objectCCAchoice.cca_item_end_time\n                            mCCADetailModelchoice.venue = objectCCAchoice.venue\n                            mCCADetailModelchoice.dayChoice = objectCCAchoice.day\n                            if (objectCCAchoice.attending_status\n                                    .equals(\"0\", ignoreCase = true)\n                            ) {\n                                if (dataObject.isAttendee\n                                        .equals(\"2\", ignoreCase = true)\n                                ) {\n                                    mCCADetailModelchoice.status = \"1\"\n                                    mCCADetailModel.choice2 = objectCCAchoice.cca_item_name\n                                    mCCADetailModel.choice2Id = objectCCAchoice.cca_details_id.toString()\n                                    Log.e(\"choice2qqq\",mCCADetailModel.choice2.toString())\n                                } else {\n                                    mCCADetailModelchoice.status = \"0\"\n                                }\n                                k += 1\n                            } else {\n                                mCCADetailModelchoice.status = \"0\"\n                            }\n                            mCCADetailModelchoice.disableCccaiem = false\n                        } else {\n                            mCCADetailModelchoice.cca_item_name = \"None\"\n                            mCCADetailModelchoice.cca_details_id = \"-541\"\n                            mCCADetailModelchoice.isattending = \"0\"\n                            mCCADetailModelchoice.venue = \"0\"\n                            if (k == 0) {\n                                if (dataObject.isAttendee\n                                        .equals(\"2\", ignoreCase = true)\n                                ) {\n                                    mCCADetailModelchoice.status = \"1\"\n                                    mCCADetailModel.choice2 = \"None\"\n                                    mCCADetailModel.choice2Id = \"-541\"\n                                } else {\n                                    mCCADetailModelchoice.status = \"0\"\n                                }\n                            } else {\n                                mCCADetailModelchoice.status = \"0\"\n                            }\n                            mCCADetailModelchoice.dayChoice = objectCCA.day\n                            mCCADetailModelchoice.disableCccaiem = false\n                        }\n                        CCAchoiceModelArrayList2!!.add(mCCADetailModelchoice)\n                    }\n                }\n                mCCADetailModel.ccaChoiceModel2 = CCAchoiceModelArrayList2\n                CCADetailModelArrayList!!.add(mCCADetailModel)\n            }\n        }\n        mCCAModel.details = CCADetailModelArrayList\n        return mCCAModel\n    }\n\n    private fun initilaiseUI() {\n        progress = findViewById(R.id.progress)\n        titleTextView = findViewById(R.id.heading)\n        back = findViewById(R.id.btn_left)\n        backRelative = findViewById(R.id.backRelative)\n        logoclick = findViewById(R.id.logoClickImgView)\n        extras = intent.extras\n        if (extras != null) {\n            tab_type = extras!!.getString(\"tab_type\")!!\n        }\n        relativeHeader = findViewById<View>(R.id.relativeHeader) as RelativeLayout\n        recycler_review = findViewById<View>(R.id.recycler_view_cca) as RecyclerView\n        recycler_review!!.setHasFixedSize(true)\n        recyclerViewLayoutManager = GridLayoutManager(mContext, 1)\n        val spacing = 5 // 50px\n\n        val divider = DividerItemDecoration(mContext, DividerItemDecoration.VERTICAL)\n        divider.setDrawable(ContextCompat.getDrawable(mContext,R.drawable.list_divider_teal)!!)\n        recycler_review!!.addItemDecoration(divider)\n       // val itemDecoration = ItemOffsetDecoration(mContext, spacing)\n//        recycler_review!!.addItemDecoration(\n//            DividerItemDecoration(mContext.resources.getDrawable(R.drawable.list_divider))\n//        )\n  //      recycler_review!!.addItemDecoration(itemDecoration)\n        recycler_review!!.layoutManager = recyclerViewLayoutManager\n//        headermanager = HeaderManager(this@CCA_Activity, tab_type)\n//        headermanager.getHeader(relativeHeader, 0)\n//        back = headermanager.getLeftButton()\n//        headermanager.setButtonLeftSelector(\n//            R.drawable.back,\n//            R.drawable.back\n//        )\n//        back.setOnClickListener {\n//            AppUtils.hideKeyBoard(mContext)\n//            finish()\n//        }\n//        home = headermanager.getLogoButton()\n//        home.setOnClickListener(View.OnClickListener {\n//            val `in` = Intent(mContext, HomeListAppCompatActivity::class.java)\n//            `in`.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)\n//            startActivity(`in`)\n//        })\n        studImg = findViewById(R.id.imagicon)\n\n        mStudentSpinner = findViewById<View>(R.id.studentSpinner) as LinearLayout\n        studentName = findViewById<View>(R.id.studentName) as TextView\n        enterTextView = findViewById<View>(R.id.enterTextView) as TextView\n        textViewYear = findViewById<View>(R.id.textViewYear) as TextView\n        recycler_review!!.addOnItemClickListener(object :OnItemClickListener{\n            override fun onItemClicked(position: Int, view: View) {\n                if (mCCAmodelArrayList!![position].status.equals(\"0\") || mCCAmodelArrayList!![position].status.equals(\n                        \"2\"\n                    )\n                ) {\n                    callStatusChangeApi(\n                        mCCAmodelArrayList!![position].cca_days_id,\n                        position,\n                        mCCAmodelArrayList!![position].status\n                    )\n                }\n                if (mCCAmodelArrayList!![position].isAttendee.equals(\"0\")) {\n                    if (mCCAmodelArrayList!![position].isSubmissionDateOver.equals(\n                            \"0\"\n                        )\n                    ) {\n                        if (mCCAmodelArrayList!![position].details!!.size > 0) {\n                            val intent = Intent(mContext, CCASelectionActivity::class.java)\n                            /*intent.putExtra(\n                                \"CCA_Detail\",\n                                mCCAmodelArrayList!![position].details\n                            )*/\n                            intent.putExtra(\"tab_type\", tab_type)\n                            PreferenceManager.saveDetailsArrayList(mContext, mCCAmodelArrayList!![position].details)\n                            PreferenceManager.setStudIdForCCA(mContext, stud_id)\n                            PreferenceManager.setStudNameForCCA(mContext, stud_name)\n                            PreferenceManager.setStudClassForCCA(mContext, stud_class)\n                            PreferenceManager.setCCATitle(\n                                mContext,\n                                mCCAmodelArrayList!![position].title\n                            )\n                            PreferenceManager.setCCAItemId(\n                                mContext,\n                                mCCAmodelArrayList!![position].cca_days_id\n                            )\n                            startActivity(intent)\n                        } else {\n                            ConstantFunctions.showDialogueWithOk(mContext,\"No Data Available\",\"Alert\")\n                        }\n                    } else {\n                        ConstantFunctions.showDialogueWithOk(mContext,\"CCA Sign-Up Closed\",\"Alert\")\n                        \n                    }\n                } else if (mCCAmodelArrayList!![position].isAttendee.equals(\"2\")) {\n                    val intent =\n                        Intent(mContext, CCAsReviewEditAfterSubmissionActivity::class.java)\n                    Log.e(\"cca choice1s\", mCCAmodelArrayList!![position].details!!.get(0).choice1!!)\n                    Log.e(\"cca choice2s\", mCCAmodelArrayList!![position].details!!.get(0).choice2!!)\n                    intent.putExtra(\"tab_type\", tab_type)\n                   // intent.putExtra(\"CCA_Detail\", mCCAmodelArrayList!![position].details)\n                    intent.putExtra(\"submissiondateover\", mCCAmodelArrayList!![position].isSubmissionDateOver)\n                    PreferenceManager.saveDetailsArrayList(mContext, mCCAmodelArrayList!![position].details)\n                    PreferenceManager.setStudIdForCCA(mContext, stud_id)\n                   PreferenceManager.setStudNameForCCA(mContext, stud_name)\n                    PreferenceManager.setStudClassForCCA(mContext, stud_class)\n                    PreferenceManager.setCCATitle(mContext, mCCAmodelArrayList!![position].title)\n                    PreferenceManager.setCCAItemId(mContext, mCCAmodelArrayList!![position].cca_days_id)\n                    startActivity(intent)\n                } else {\n                    val intent =\n                        Intent(mContext, CCAsReviewAfterSubmissionActivity::class.java)\n                    intent.putExtra(\"tab_type\", tab_type)\n                    PreferenceManager.setStudIdForCCA(mContext, stud_id)\n                    PreferenceManager.setStudNameForCCA(mContext, stud_name)\n                    PreferenceManager.setStudClassForCCA(mContext, stud_class)\n                    PreferenceManager.setCCATitle(mContext, mCCAmodelArrayList!![position].title)\n                    PreferenceManager.setCCAItemId(mContext, mCCAmodelArrayList!![position].cca_days_id)\n                    startActivity(intent)\n                }\n            }\n\n        })\n    }\n\n    private fun callStatusChangeApi(ccaDaysId: String?, eventPosition: Int, status: String?) {\n\n\n        var model= CCAReadStatusRequestModel(PreferenceManager.getStudentID(mContext).toString(),\n            ccaDaysId,\"cca\")\n\n        val token = PreferenceManager.getaccesstoken(mContext)\n        val call: Call<CCASubmitResponseModel> =\n            ApiClient.getClient.readstatusupdate( model,\"Bearer $token\")\n       // progressBar.visibility = View.VISIBLE\n        call.enqueue(object : Callback<CCASubmitResponseModel> {\n            override fun onResponse(\n                call: Call<CCASubmitResponseModel>,\n                response: Response<CCASubmitResponseModel>\n            ) {\n               // progressBar.visibility = View.GONE\n                if (response.isSuccessful){\n                    if (response.body() != null){\n                        if (response.body()!!.status!!.equals(100)){\n\n                            if (status.equals(\"0\", ignoreCase = true) || status.equals(\n                                    \"2\",\n                                    ignoreCase = true\n                                )\n                            ) {\n                                mCCAmodelArrayList!![eventPosition].status=(\"1\")\n                                mCCAsActivityAdapter!!.notifyDataSetChanged()\n                            }\n                        }\n                        else if (response.body()!!.status!!.equals(109))\n                        {\n\n\n                        }\n                        else{\n\n                            Toast.makeText(mContext, \"Failure\", Toast.LENGTH_SHORT).show()\n                        }\n\n                    }else{\n\n                        ConstantFunctions.showDialogueWithOk(mContext,getString(R.string.common_error),\"Alert\")\n                    }\n                }else{\n\n                    ConstantFunctions.showDialogueWithOk(mContext,getString(R.string.common_error),\"Alert\")\n                }\n            }\n\n            override fun onFailure(call: Call<CCASubmitResponseModel>, t: Throwable) {\n               // progressBar.visibility = View.GONE\n                ConstantFunctions.showDialogueWithOk(mContext,getString(R.string.common_error),\"Alert\")\n            }\n\n        })\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/nas/alreem/activity/cca/CCA_Activity.kt b/app/src/main/java/com/nas/alreem/activity/cca/CCA_Activity.kt
--- a/app/src/main/java/com/nas/alreem/activity/cca/CCA_Activity.kt	(revision 10a3cbb13b5fc05b1815351c42577261066dfaa1)
+++ b/app/src/main/java/com/nas/alreem/activity/cca/CCA_Activity.kt	(date 1689571316771)
@@ -57,7 +57,6 @@
     var mStudentSpinner: LinearLayout? = null
     var relativeHeader: RelativeLayout? = null
     lateinit var student_Name: String
-    lateinit var studentId: String
     lateinit var studentImg: String
     lateinit var studentClass: String
    lateinit var studImg: ImageView
@@ -132,6 +131,8 @@
                 stud_class = mStudentArray.get(position).studentClass.toString()
                 stud_img = mStudentArray.get(position).photo.toString()
                 textViewYear!!.text = "Class : " + mStudentArray.get(position).studentClass
+               // PreferenceManager.setStudentID(mContext,stud_id)
+
                 if (stud_img != "") {
                     Glide.with(mContext) //1
                         .load(stud_img)
@@ -171,18 +172,21 @@
                 if (response.body()!!.status==100)
                 {
                     studentListArrayList.addAll(response.body()!!.responseArray.studentList)
-                    if (PreferenceManager.getStudentID(mContext).equals(""))
+                    if (PreferenceManager.getStudIdForCCA(mContext).equals(""))
                     {
-                        Log.e("studentname",student_Name)
+                      //  Log.e("studentname",student_Name)
                         student_Name=studentListArrayList.get(0).name
                         studentImg=studentListArrayList.get(0).photo
-                        studentId=studentListArrayList.get(0).id
+                        stud_id=studentListArrayList.get(0).id
                         studentClass=studentListArrayList.get(0).section
-                        PreferenceManager.setStudentID(mContext,studentId)
+                        Log.e("Student_idss",stud_id)
+                       // PreferenceManager.setStudentID(mContext,studentId)
                         PreferenceManager.setStudentName(mContext,student_Name)
                         PreferenceManager.setStudentPhoto(mContext,studentImg)
                         PreferenceManager.setStudentClass(mContext,studentClass)
                         studentName.text=student_Name
+                        PreferenceManager.setCCAStudentIdPosition(mContext, "0")
+
                         if(!studentImg.equals(""))
                         {
                             Glide.with(mContext) //1
@@ -200,11 +204,15 @@
 
                     }
                     else{
+                        val studentSelectPosition = Integer.valueOf(
+                            PreferenceManager.getCCAStudentIdPosition(mContext)
+                        )
                         student_Name= PreferenceManager.getStudentName(mContext)!!
                         studentImg= PreferenceManager.getStudentPhoto(mContext)!!
-                        studentId= PreferenceManager.getStudentID(mContext)!!
-                        PreferenceManager.setStudIdForCCA(mContext, studentId)
-                        Log.e("Studentid1",studentId)
+                        stud_id=  studentListArrayList!![studentSelectPosition].id.toString()
+                       // PreferenceManager.setStudentID(mContext, studentId)
+                       // PreferenceManager.setStudIdForCCA(mContext, studentId)
+                        Log.e("Studentid1",stud_id)
                         studentClass= PreferenceManager.getStudentClass(mContext)!!
                         studentName.text=student_Name
                         if(!studentImg.equals(""))
@@ -223,7 +231,7 @@
                         }
                     }
 
-                    getCCAListAPI(studentId)
+                    getCCAListAPI(stud_id)
 //                    var internetCheck = InternetCheckClass.isInternetAvailable(nContext)
 //                    if (internetCheck)
 //                    {
@@ -346,7 +354,7 @@
         Log.e("choice2adasda", dataObject.details!![0]!!.choice2.toString())
 
         Log.e("choice2adasda", dataObject.details!![0]!!.choice2!![0]!!.attending_status.toString())
-        CCADetailModelArrayList = java.util.ArrayList<CCADetailModel>()
+        CCADetailModelArrayList = ArrayList<CCADetailModel>()
         if (jsonCCADetailArray!!.isNotEmpty()) {
             for (element in jsonCCADetailArray) {
                 val objectCCA = element
@@ -372,6 +380,8 @@
                             mCCADetailModelchoice.cca_item_start_time = objectCCAchoice.cca_item_start_time
                             mCCADetailModelchoice.cca_item_end_time = objectCCAchoice.cca_item_end_time
                             mCCADetailModelchoice.venue = objectCCAchoice.venue
+                            mCCADetailModelchoice.description = objectCCAchoice.description
+
 
                             if (objectCCAchoice.attending_status
                                     .equals("0", ignoreCase = true)
@@ -416,7 +426,7 @@
                     }
                 }
                 mCCADetailModel.ccaChoiceModel = CCAchoiceModelArrayList
-                CCAchoiceModelArrayList2 = java.util.ArrayList<CCAchoiceModel>()
+                CCAchoiceModelArrayList2 = ArrayList<CCAchoiceModel>()
                 if (jsonCCAChoiceArray2!!.isNotEmpty()) {
                     var k = 0
                     for (j in 0..jsonCCAChoiceArray2.size) {
@@ -430,6 +440,8 @@
                             mCCADetailModelchoice.cca_item_end_time = objectCCAchoice.cca_item_end_time
                             mCCADetailModelchoice.venue = objectCCAchoice.venue
                             mCCADetailModelchoice.dayChoice = objectCCAchoice.day
+                            mCCADetailModelchoice.description = objectCCAchoice.description
+
                             if (objectCCAchoice.attending_status
                                     .equals("0", ignoreCase = true)
                             ) {
@@ -477,6 +489,7 @@
             }
         }
         mCCAModel.details = CCADetailModelArrayList
+        Log.e("mCCAModel", mCCAModel.details!!.get(0).choice1.toString())
         return mCCAModel
     }
 
@@ -553,6 +566,7 @@
                             )*/
                             intent.putExtra("tab_type", tab_type)
                             PreferenceManager.saveDetailsArrayList(mContext, mCCAmodelArrayList!![position].details)
+                           // PreferenceManager.setStudentID(mContext, stud_id)
                             PreferenceManager.setStudIdForCCA(mContext, stud_id)
                             PreferenceManager.setStudNameForCCA(mContext, stud_name)
                             PreferenceManager.setStudClassForCCA(mContext, stud_class)
@@ -581,6 +595,8 @@
                    // intent.putExtra("CCA_Detail", mCCAmodelArrayList!![position].details)
                     intent.putExtra("submissiondateover", mCCAmodelArrayList!![position].isSubmissionDateOver)
                     PreferenceManager.saveDetailsArrayList(mContext, mCCAmodelArrayList!![position].details)
+                  //  PreferenceManager.setStudentID(mContext, stud_id)
+                    Log.e("id",stud_id)
                     PreferenceManager.setStudIdForCCA(mContext, stud_id)
                    PreferenceManager.setStudNameForCCA(mContext, stud_name)
                     PreferenceManager.setStudClassForCCA(mContext, stud_class)
@@ -591,6 +607,7 @@
                     val intent =
                         Intent(mContext, CCAsReviewAfterSubmissionActivity::class.java)
                     intent.putExtra("tab_type", tab_type)
+                   // PreferenceManager.setStudentID(mContext, stud_id)
                     PreferenceManager.setStudIdForCCA(mContext, stud_id)
                     PreferenceManager.setStudNameForCCA(mContext, stud_name)
                     PreferenceManager.setStudClassForCCA(mContext, stud_class)
Index: app/src/main/java/com/nas/alreem/activity/cca/CCAsReviewEditAfterSubmissionActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.nas.alreem.activity.cca\n\nimport android.content.Context\nimport android.content.Intent\nimport android.os.Bundle\nimport android.text.Html\nimport android.util.Log\nimport android.view.View\nimport android.widget.*\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.recyclerview.widget.GridLayoutManager\nimport androidx.recyclerview.widget.RecyclerView\nimport com.nas.alreem.R\nimport com.nas.alreem.activity.cca.adapter.CCAfinalReviewEditAfterSubmissionAdapter\nimport com.nas.alreem.activity.cca.model.*\nimport com.nas.alreem.activity.home.HomeActivity\nimport com.nas.alreem.constants.ConstantFunctions\nimport com.nas.alreem.constants.PreferenceManager\nimport com.nas.alreem.rest.ApiClient\n\nimport retrofit2.Call\nimport retrofit2.Callback\nimport retrofit2.Response\nimport java.util.*\n\nclass CCAsReviewEditAfterSubmissionActivity : AppCompatActivity() {\n    lateinit var mContext: Context\n    lateinit var titleTextView: TextView\n    lateinit var back: ImageView\n    lateinit var backRelative: RelativeLayout\n    lateinit var logoclick: ImageView\n    lateinit var progressBar: ProgressBar\n    var recyclerViewLayoutManager: GridLayoutManager? = null\n    var recycler_review: RecyclerView? = null\n    var relativeHeader: RelativeLayout? = null\n    var home: ImageView? = null\n    var editCcca: RelativeLayout? = null\n    var messageTxt: RelativeLayout? = null\n    var msgTxt: TextView? = null\n    var tab_type = \"ECAs\"\n    var extras: Bundle? = null\n    var mCCADetailModelArrayList: ArrayList<CCAReviewAfterSubmissionModel>? = null\n    var textViewCCAaItem: TextView? = null\n    var weekList: ArrayList<String>? = null\n    var absentDaysChoice2Array: ArrayList<String>? = null\n    var presentDaysChoice2Array: ArrayList<String>? = null\n    var upcomingDaysChoice2Array: ArrayList<String>? = null\n    var absentDaysChoice1Array: ArrayList<String>? = null\n    var presentDaysChoice1Array: ArrayList<String>? = null\n    var upcomingDaysChoice1Array: ArrayList<String>? = null\n    var datestringChoice1: ArrayList<CCAAttendanceModel>? = null\n    var datestringChoice2: ArrayList<CCAAttendanceModel>? = null\n    var submissiondateover = \"-1\"\n    var CCADetailModelArrayList: ArrayList<CCADetailModel>? = null\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_ccas_review_edit_after_submission)\n        mContext = this\n        progressBar = findViewById(R.id.progress)\n        titleTextView = findViewById(R.id.heading)\n        back = findViewById(R.id.btn_left)\n        backRelative = findViewById(R.id.backRelative)\n        logoclick = findViewById(R.id.logoClickImgView)\n        extras = intent.extras\n        logoclick.setOnClickListener {\n            val mIntent = Intent(mContext, HomeActivity::class.java)\n            mIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)\n\n            startActivity(mIntent)\n        }\n        backRelative.setOnClickListener {\n            finish()\n        }\n        if (extras != null) {\n            tab_type = extras!!.getString(\"tab_type\")!!\n            submissiondateover = extras!!.getString(\"submissiondateover\", \"-1\")\n        //    CCADetailModelArrayList =\n       //         extras!!.getSerializable(\"CCA_Detail\") as ArrayList<CCADetailModel>?\n            CCADetailModelArrayList=PreferenceManager.getDetailsArrayList(mContext)\n        }\n        weekList = java.util.ArrayList()\n        weekList!!.add(\"Sunday\")\n        weekList!!.add(\"Monday\")\n        weekList!!.add(\"Tuesday\")\n        weekList!!.add(\"Wednesday\")\n        weekList!!.add(\"Thursday\")\n        weekList!!.add(\"Friday\")\n        weekList!!.add(\"Saturday\")\n        absentDaysChoice2Array = java.util.ArrayList()\n        presentDaysChoice2Array = java.util.ArrayList()\n        upcomingDaysChoice2Array = java.util.ArrayList()\n        absentDaysChoice1Array = java.util.ArrayList()\n        presentDaysChoice1Array = java.util.ArrayList()\n        upcomingDaysChoice1Array = java.util.ArrayList()\n        datestringChoice1 = java.util.ArrayList()\n        datestringChoice2 = java.util.ArrayList()\n        relativeHeader = findViewById<View>(R.id.relativeHeader) as RelativeLayout\n        recycler_review = findViewById<View>(R.id.recycler_view_cca) as RecyclerView\n        textViewCCAaItem = findViewById<View>(R.id.textViewCCAaItem) as TextView\n        messageTxt = findViewById<View>(R.id.messageTxt) as RelativeLayout\n        msgTxt = findViewById<View>(R.id.msgTxt) as TextView\n\n        messageTxt!!.visibility = View.VISIBLE\n\n        editCcca = findViewById<View>(R.id.editCcca) as RelativeLayout\n\n        editCcca!!.setOnClickListener {\n            val intent = Intent(mContext, CCASelectionActivity::class.java)\n            //intent.putExtra(\n             //   \"CCA_Detail\",\n             //   CCADetailModelArrayList\n           // )\n            intent.putExtra(\"tab_type\", tab_type)\n            intent.putExtra(\"ccaedit\", 1)\n            startActivity(intent)\n        }\n//        home = headermanager.getLogoButton()\n//        home!!.setOnClickListener {\n//            val `in` = Intent(mContext, HomeListAppCompatActivity::class.java)\n//            `in`.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)\n//            startActivity(`in`)\n//        }\n        recycler_review!!.setHasFixedSize(true)\n        recyclerViewLayoutManager = GridLayoutManager(mContext, 1)\n        recycler_review!!.layoutManager = recyclerViewLayoutManager\n        mCCADetailModelArrayList = java.util.ArrayList()\n//        textViewCCAaItem.setText(Html.fromHtml(PreferenceManager.getCCATitle(mContext) + \"<br/>\" + PreferenceManager.getStudNameForCCA(mContext)));\n        //        textViewCCAaItem.setText(Html.fromHtml(PreferenceManager.getCCATitle(mContext) + \"<br/>\" + PreferenceManager.getStudNameForCCA(mContext)));\n        if (PreferenceManager.getStudClassForCCA(mContext).equals(\"\")) {\n            textViewCCAaItem!!.text = Html.fromHtml(\n                PreferenceManager.getCCATitle(mContext)\n                    .toString() + \"<br/>\" + PreferenceManager.getStudentName(mContext)+ \"<br/>Year Group : \" + PreferenceManager.getStudentClass( mContext\n                )\n            )\n        } else {\n            textViewCCAaItem!!.text = Html.fromHtml(\n                PreferenceManager.getCCATitle(mContext)\n                    .toString() + \"<br/>\" + PreferenceManager.getStudNameForCCA(mContext) + \"<br/>Year Group : \" + PreferenceManager.getStudClassForCCA(\n                    mContext\n                )\n            )\n        }\n        var internetCheck = ConstantFunctions.internetCheck(mContext)\n        if (internetCheck) {\n            ccaReviewListAPI()\n\n        } else {\n            //  InternetCheckClass.showSuccessInternetAlert(mContext)\n        }\n    }\n\n    private fun ccaReviewListAPI() {\n        val body = CCAReviewRequestModel(\n            PreferenceManager.getStudentID(mContext)!!,\n            PreferenceManager.getCCAItemId(mContext)!!\n        )\n        val token = PreferenceManager.getaccesstoken(mContext)\n        val call: Call<CCAReviewResponseModel> =\n            ApiClient.getClient.ccaReview(body, \"Bearer $token\")\n        progressBar.visibility = View.VISIBLE\n        call.enqueue(object : Callback<CCAReviewResponseModel> {\n            override fun onResponse(\n                call: Call<CCAReviewResponseModel>,\n                response: Response<CCAReviewResponseModel>\n            ) {\n                progressBar.visibility = View.GONE\n                if (response.isSuccessful) {\n                    if (response.body() != null) {\n                        if (response.body()!!.status.toString() == \"100\") {\n\n                            if (response.body()!!.data!!.size > 0) {\n                                for (j in weekList!!.indices) {\n                                    for (i in 0 until response.body()!!.data!!.size) {\n                                        if (response.body()!!.data!![i]!!.day.equals(\n                                                weekList!!.get(j)\n                                                    .toString(), ignoreCase = true\n                                            )\n                                        ) {\n                                            addCCAReviewlist(\n                                                response.body()!!.data!![i]\n                                            )\n                                        }\n                                    }\n                                }\n                                val mCCAsActivityAdapter = CCAfinalReviewEditAfterSubmissionAdapter(\n                                    mContext,\n                                    mCCADetailModelArrayList!!\n                                )\n                                recycler_review!!.setAdapter(\n                                    mCCAsActivityAdapter\n                                )\n                            } else {\n                                val mCCAsActivityAdapter = CCAfinalReviewEditAfterSubmissionAdapter(\n                                    mContext,\n                                    mCCADetailModelArrayList!!\n                                )\n                                recycler_review!!.setAdapter(\n                                    mCCAsActivityAdapter\n                                )\n                                Toast.makeText(\n                                    mContext,\n                                    \"No ECA available\",\n                                    Toast.LENGTH_SHORT\n                                ).show()\n                            }\n                        } else {\n                            ConstantFunctions.showDialogueWithOk(\n                                mContext,\n                                getString(R.string.common_error),\n                                \"Alert\"\n                            )\n                        }\n                    } else {\n                        ConstantFunctions.showDialogueWithOk(\n                            mContext,\n                            getString(R.string.common_error),\n                            \"Alert\"\n                        )\n                    }\n                }\n            }\n\n            override fun onFailure(call: Call<CCAReviewResponseModel>, t: Throwable) {\n                progressBar.visibility = View.GONE\n                ConstantFunctions.showDialogueWithOk(\n                    mContext,\n                    getString(R.string.common_error),\n                    \"Alert\"\n                )\n            }\n\n\n        })\n    }\n\n    private fun addCCAReviewlist(dataObject: CCAReviewResponseModel.Data) {\n        val mCCAModel = CCAReviewAfterSubmissionModel()\n        mCCAModel.day = dataObject!!.day\n        datestringChoice1 = java.util.ArrayList()\n        datestringChoice2 = java.util.ArrayList()\n        if (dataObject.choice1 != null) {\n            val choice1  = dataObject.choice1\n            if (choice1 != null) {\n                if (choice1.cca_item_name != null) {\n                    mCCAModel.choice1 = choice1.cca_item_name\n                    mCCAModel.cca_item_start_time = choice1.cca_item_start_time\n                    mCCAModel.cca_item_end_time = choice1.cca_item_end_time\n                    if (choice1.cca_item_description != null){\n                        mCCAModel.cca_item_description = choice1.cca_item_description\n//                        mCCAModel.cca_item_description_2 = \"\"\n                    }else{\n                        mCCAModel.cca_item_description = \"\"\n//                        mCCAModel.cca_item_description_2 = \"\"\n                    }\n                    if (choice1.cca_venue != null){\n                        mCCAModel.venue = choice1.cca_venue\n//                        mCCAModel.venue2 = \"\"\n                    }else{\n                        mCCAModel.venue = \"\"\n//                        mCCAModel.venue2 = \"\"\n                    }\n\n                    Log.e(\"des1\",choice1.cca_item_description.toString())\n                    mCCAModel.venue2 = \"\"\n                    mCCAModel.cca_item_description_2 = \"\"\n                    val absentDaysChoice1 = choice1.absentDays\n                    absentDaysChoice1Array = java.util.ArrayList()\n                    if (choice1.absentDays !=null) {\n                        for (i in 0 until absentDaysChoice1!!.size) {\n                            absentDaysChoice1Array!!.add(absentDaysChoice1[i]!!)\n                        }\n                    }\n                    presentDaysChoice1Array = java.util.ArrayList()\n                    if (choice1.presentDays != null) {\n                        val presentDaysChoice1 = choice1.presentDays\n                        for (i in 0 until presentDaysChoice1.size) {\n                            presentDaysChoice1Array!!.add(presentDaysChoice1[i]!!)\n                        }\n                    }\n                    upcomingDaysChoice1Array = java.util.ArrayList()\n                    if (choice1.upcomingDays !=null) {\n                        val upcomingDaysChoice1 = choice1.upcomingDays\n                        for (i in 0 until upcomingDaysChoice1.size) {\n                            upcomingDaysChoice1Array!!.add(upcomingDaysChoice1[i]!!)\n                        }\n                    }\n                } else {\n                    mCCAModel.choice1 = \"0\"\n                }\n            } else {\n                mCCAModel.choice1 = \"0\"\n            }\n        } else {\n            mCCAModel.choice1 = \"-1\"\n        }\n        if (dataObject.choice2 != null) {\n            val choice2 = dataObject.choice2\n            if (choice2 != null) {\n                if (choice2.cca_item_name != null) {\n                    mCCAModel.choice2 = choice2.cca_item_name\n                    mCCAModel.cca_item_start_time = choice2.cca_item_start_time\n                    mCCAModel.cca_item_end_time = choice2.cca_item_end_time\n                    val absentDaysChoice2 = choice2.absentDays\n                    Log.e(\"des\",choice2.cca_item_description.toString())\n                    if (choice2.cca_item_description != null){\n                        mCCAModel.cca_item_description_2 = choice2.cca_item_description\n//                        mCCAModel.cca_item_description = \"\"\n                    }else{\n                        mCCAModel.cca_item_description_2 = \"\"\n//                        mCCAModel.cca_item_description = \"\"\n                    }\n                    if (choice2.cca_venue != null){\n                        mCCAModel.venue2 = choice2.cca_venue\n//                        mCCAModel.venue = \"\"\n                    }else{\n                        mCCAModel.venue2 = \"\"\n//                        mCCAModel.venue = \"\"\n                    }\n\n                    if (choice2.absentDays != null) {\n                        absentDaysChoice2Array = java.util.ArrayList()\n                        for (i in 0 until absentDaysChoice2!!.size) {\n                            absentDaysChoice2Array!!.add(absentDaysChoice2[i]!!)\n                        }\n                    }\n                    presentDaysChoice2Array = java.util.ArrayList()\n                    val presentDaysChoice2 = choice2.presentDays\n                    if (choice2.presentDays != null) {\n                        for (i in 0 until presentDaysChoice2!!.size) {\n                            presentDaysChoice2Array!!.add(presentDaysChoice2[i]!!)\n                        }\n                    }\n                    upcomingDaysChoice2Array = java.util.ArrayList()\n                    val upcomingDaysChoice2 = choice2.upcomingDays\n                    if (choice2.upcomingDays != null) {\n                        for (i in 0 until upcomingDaysChoice2!!.size) {\n                            upcomingDaysChoice2Array!!.add(upcomingDaysChoice2[i]!!)\n                        }\n                    }\n                } else {\n                    mCCAModel.choice2 = \"0\"\n                }\n            } else {\n                mCCAModel.choice2 = \"0\"\n            }\n        } else {\n            mCCAModel.choice2 = \"-1\"\n        }\n\n        if (absentDaysChoice1Array!!.size > 0) {\n            for (i in absentDaysChoice1Array!!.indices) {\n                val mCCAAttendanceModel = CCAAttendanceModel()\n                mCCAAttendanceModel.dateAttend = absentDaysChoice1Array!![i]\n                mCCAAttendanceModel.statusCCA = \"a\"\n                datestringChoice1!!.add(mCCAAttendanceModel)\n            }\n        }\n\n        if (upcomingDaysChoice1Array!!.size > 0) {\n            for (i in upcomingDaysChoice1Array!!.indices) {\n                val mCCAAttendanceModel = CCAAttendanceModel()\n                mCCAAttendanceModel.dateAttend = upcomingDaysChoice1Array!![i]\n                mCCAAttendanceModel.statusCCA = \"u\"\n                datestringChoice1!!.add(mCCAAttendanceModel)\n            }\n        }\n\n        if (presentDaysChoice1Array!!.size > 0) {\n            for (i in presentDaysChoice1Array!!.indices) {\n                val mCCAAttendanceModel = CCAAttendanceModel()\n                mCCAAttendanceModel.dateAttend = presentDaysChoice1Array!![i]\n                mCCAAttendanceModel.statusCCA = \"p\"\n                datestringChoice1!!.add(mCCAAttendanceModel)\n            }\n        }\n        if (absentDaysChoice2Array!!.size > 0) {\n            for (i in absentDaysChoice2Array!!.indices) {\n                val mCCAAttendanceModel = CCAAttendanceModel()\n                mCCAAttendanceModel.dateAttend = absentDaysChoice2Array!![i]\n                mCCAAttendanceModel.statusCCA = \"a\"\n                datestringChoice2!!.add(mCCAAttendanceModel)\n            }\n        }\n        if (upcomingDaysChoice2Array!!.size > 0) {\n            for (i in upcomingDaysChoice2Array!!.indices) {\n                val mCCAAttendanceModel = CCAAttendanceModel()\n                mCCAAttendanceModel.dateAttend = upcomingDaysChoice2Array!![i]\n                mCCAAttendanceModel.statusCCA = \"u\"\n                datestringChoice2!!.add(mCCAAttendanceModel)\n            }\n        }\n        if (presentDaysChoice2Array!!.size > 0) {\n            for (i in presentDaysChoice2Array!!.indices) {\n                val mCCAAttendanceModel = CCAAttendanceModel()\n                mCCAAttendanceModel.dateAttend = presentDaysChoice2Array!![i]\n                mCCAAttendanceModel.statusCCA = \"p\"\n                datestringChoice2!!.add(mCCAAttendanceModel)\n            }\n        }\n        if (datestringChoice1!!.size > 0) {\n            Collections.sort(datestringChoice1, object : Comparator<CCAAttendanceModel?> {\n\n                override fun compare(s1: CCAAttendanceModel?, s2: CCAAttendanceModel?): Int {\n                    return s1!!.dateAttend!!.compareTo(s2!!.dateAttend!!)\n                }\n            })\n        }\n        if (datestringChoice2!!.size > 0) {\n            Collections.sort(datestringChoice1, object : Comparator<CCAAttendanceModel?> {\n\n                override fun compare(s1: CCAAttendanceModel?, s2: CCAAttendanceModel?): Int {\n                    return s1!!.dateAttend!!.compareTo(s2!!.dateAttend!!)\n                }\n            })\n        }\n        mCCAModel.calendarDaysChoice1 = datestringChoice1\n        mCCAModel.calendarDaysChoice2 = datestringChoice2\n\n            mCCADetailModelArrayList!!.add(mCCAModel)\n\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/nas/alreem/activity/cca/CCAsReviewEditAfterSubmissionActivity.kt b/app/src/main/java/com/nas/alreem/activity/cca/CCAsReviewEditAfterSubmissionActivity.kt
--- a/app/src/main/java/com/nas/alreem/activity/cca/CCAsReviewEditAfterSubmissionActivity.kt	(revision 10a3cbb13b5fc05b1815351c42577261066dfaa1)
+++ b/app/src/main/java/com/nas/alreem/activity/cca/CCAsReviewEditAfterSubmissionActivity.kt	(date 1689577204920)
@@ -112,6 +112,9 @@
            // )
             intent.putExtra("tab_type", tab_type)
             intent.putExtra("ccaedit", 1)
+            Log.e("loation1", CCADetailModelArrayList!!.get(0).choice1.toString())
+            Log.e("Location2", CCADetailModelArrayList!!.get(0).location2.toString())
+           // PreferenceManager.saveDetailsArrayList(mContext, CCADetailModelArrayList)
             startActivity(intent)
         }
 //        home = headermanager.getLogoButton()
@@ -123,7 +126,7 @@
         recycler_review!!.setHasFixedSize(true)
         recyclerViewLayoutManager = GridLayoutManager(mContext, 1)
         recycler_review!!.layoutManager = recyclerViewLayoutManager
-        mCCADetailModelArrayList = java.util.ArrayList()
+        mCCADetailModelArrayList = ArrayList()
 //        textViewCCAaItem.setText(Html.fromHtml(PreferenceManager.getCCATitle(mContext) + "<br/>" + PreferenceManager.getStudNameForCCA(mContext)));
         //        textViewCCAaItem.setText(Html.fromHtml(PreferenceManager.getCCATitle(mContext) + "<br/>" + PreferenceManager.getStudNameForCCA(mContext)));
         if (PreferenceManager.getStudClassForCCA(mContext).equals("")) {
@@ -151,7 +154,7 @@
 
     private fun ccaReviewListAPI() {
         val body = CCAReviewRequestModel(
-            PreferenceManager.getStudentID(mContext)!!,
+            PreferenceManager.getStudIdForCCA(mContext)!!,
             PreferenceManager.getCCAItemId(mContext)!!
         )
         val token = PreferenceManager.getaccesstoken(mContext)
@@ -236,13 +239,14 @@
     private fun addCCAReviewlist(dataObject: CCAReviewResponseModel.Data) {
         val mCCAModel = CCAReviewAfterSubmissionModel()
         mCCAModel.day = dataObject!!.day
-        datestringChoice1 = java.util.ArrayList()
-        datestringChoice2 = java.util.ArrayList()
+        datestringChoice1 = ArrayList()
+        datestringChoice2 = ArrayList()
         if (dataObject.choice1 != null) {
             val choice1  = dataObject.choice1
             if (choice1 != null) {
                 if (choice1.cca_item_name != null) {
                     mCCAModel.choice1 = choice1.cca_item_name
+                    Log.e("Satrttime", choice1.cca_item_start_time!!)
                     mCCAModel.cca_item_start_time = choice1.cca_item_start_time
                     mCCAModel.cca_item_end_time = choice1.cca_item_end_time
                     if (choice1.cca_item_description != null){
@@ -298,6 +302,7 @@
             if (choice2 != null) {
                 if (choice2.cca_item_name != null) {
                     mCCAModel.choice2 = choice2.cca_item_name
+                    Log.e("Satrttime2", choice2.cca_item_start_time!!)
                     mCCAModel.cca_item_start_time = choice2.cca_item_start_time
                     mCCAModel.cca_item_end_time = choice2.cca_item_end_time
                     val absentDaysChoice2 = choice2.absentDays
Index: app/src/main/java/com/nas/alreem/activity/cca/CCAsReviewActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.nas.alreem.activity.cca\n\nimport android.app.Activity\nimport android.app.Dialog\nimport android.content.Context\nimport android.content.Intent\nimport android.graphics.Color\nimport android.graphics.drawable.ColorDrawable\nimport android.os.Bundle\nimport android.text.Html\nimport android.util.Log\nimport android.view.View\nimport android.view.Window\nimport android.widget.*\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.recyclerview.widget.GridLayoutManager\nimport androidx.recyclerview.widget.RecyclerView\nimport com.nas.alreem.R\nimport com.nas.alreem.activity.cca.adapter.CCAfinalReviewAdapter\nimport com.nas.alreem.activity.cca.model.CCADetailModel\nimport com.nas.alreem.activity.cca.model.CCASubmitResponseModel\nimport com.nas.alreem.activity.cca.model.CCASumbitRequestModel\nimport com.nas.alreem.activity.home.HomeActivity\nimport com.nas.alreem.appcontroller.AppController\nimport com.nas.alreem.constants.ConstantFunctions\nimport com.nas.alreem.constants.PreferenceManager\nimport com.nas.alreem.rest.ApiClient\n\nimport retrofit2.Call\nimport retrofit2.Callback\nimport retrofit2.Response\n\nclass CCAsReviewActivity : AppCompatActivity() {\n    lateinit var mContext: Context\n    lateinit var titleTextView: TextView\n    lateinit var back: ImageView\n    lateinit var backRelative: RelativeLayout\n    lateinit var logoclick: ImageView\n    lateinit var progressBar: ProgressBar\n    var recyclerViewLayoutManager: GridLayoutManager? = null\n    var recycler_review: RecyclerView? = null\n//    var headermanager: HeaderManager? = null\n    var relativeHeader: RelativeLayout? = null\n    var CCADetailModelArrayList: ArrayList<CCADetailModel>? = ArrayList()\n//    var back: ImageView? = null\n    var submitBtn: Button? = null\n    var home: ImageView? = null\n    var tab_type = \"ECAs\"\n    var extras: Bundle? = null\n    var mCCADetailModelArrayList: ArrayList<CCADetailModel>? = ArrayList()\n    var mCCAItemIdArray: java.util.ArrayList<String>? = null\n    var textViewCCAaItem: TextView? = null\n    var cca_details = \"\"\n    var cca_detailsId = \"[\"\n    var mCCADetailModels: CCADetailModel? = null\n    var survey_satisfation_status = 0\n    var currentPage = 0\n    var currentPageSurvey = 0\n    private val surveySize = 0\n    var pos = -1\n//    var surveyArrayList: java.util.ArrayList<SurveyModel>? = null\n//    var surveyQuestionArrayList: java.util.ArrayList<SurveyQuestionsModel>? = null\n//    var surveyAnswersArrayList: java.util.ArrayList<SurveyAnswersModel>? = null\n//    var mAnswerList: java.util.ArrayList<AnswerSubmitModel>? = null\n    var text_content: TextView? = null\n    var text_dialog: TextView? = null\n    private val surveyEmail = \"\"\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_ccas_review)\n        mContext = this\n        titleTextView = findViewById(R.id.heading)\n        back = findViewById(R.id.btn_left)\n        backRelative = findViewById(R.id.backRelative)\n        logoclick = findViewById(R.id.logoClickImgView)\n        progressBar = findViewById(R.id.progress)\n        extras = intent.extras\n        logoclick.setOnClickListener {\n            val mIntent = Intent(mContext, HomeActivity::class.java)\n            mIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)\n\n            startActivity(mIntent)\n        }\n        backRelative.setOnClickListener {\n            finish()\n        }\n        if (extras != null) {\n//            tab_type = extras!!.getString(\"tab_type\").toString()\n\n            CCADetailModelArrayList=\n                extras!!.getSerializable(\"detail_array\") as ArrayList<CCADetailModel>?\n            Log.e(\"size review\", CCADetailModelArrayList!!.size.toString())\n        }else{\n           CCADetailModelArrayList = AppController.CCADetailModelArrayList\n            Log.e(\"size review\", CCADetailModelArrayList!!.size.toString())\n        }\n\n        for (j in 0 until CCADetailModelArrayList!!.size)\n            {\n                Log.e(\"ccadetail model size\", CCADetailModelArrayList!!.size.toString())\n        }\n\n        relativeHeader = findViewById<View>(R.id.relativeHeader) as RelativeLayout\n        recycler_review = findViewById<View>(R.id.recycler_view_cca) as RecyclerView\n        textViewCCAaItem = findViewById<View>(R.id.textViewCCAaItem) as TextView\n        submitBtn = findViewById<View>(R.id.submitBtn) as Button\n\n        recycler_review!!.setHasFixedSize(true)\n        recyclerViewLayoutManager = GridLayoutManager(mContext, 1)\n        recycler_review!!.layoutManager = recyclerViewLayoutManager\n        mCCADetailModelArrayList = ArrayList<CCADetailModel>()\n        mCCAItemIdArray = ArrayList<String>()\n        if (PreferenceManager.getStudClassForCCA(mContext).equals(\"\")) {\n            textViewCCAaItem!!.text = Html.fromHtml(\n                PreferenceManager.getCCATitle(mContext)\n                    .toString() + \"<br/>\" + PreferenceManager.getStudNameForCCA(mContext)\n            )\n        } else {\n            textViewCCAaItem!!.text = Html.fromHtml(\n                PreferenceManager.getCCATitle(mContext)\n                    .toString() + \"<br/>\" + PreferenceManager.getStudNameForCCA(mContext) + \"<br/>Year Group : \" + PreferenceManager.getStudClassForCCA(\n                    mContext\n                )\n            )\n        }\n        for (i in 0 until AppController.weekList.size) {\n            Log.e(\"here\",\"Here\")\n            for (j in 0 until CCADetailModelArrayList!!.size) {\n                if (AppController.weekList[i].weekDay.equals(\n                        CCADetailModelArrayList!![j].day,ignoreCase = true\n                    )\n                ) {\n                    Log.e(\"ccadetail model size\", CCADetailModelArrayList!!.size.toString())\n                    val mCCADetailModel = CCADetailModel()\n                    mCCADetailModel.day = CCADetailModelArrayList!![j].day\n                    mCCADetailModel.choice1 = CCADetailModelArrayList!![j].choice1\n                    mCCADetailModel.choice2 = CCADetailModelArrayList!![j].choice2\n                    mCCADetailModel.choice1Id = CCADetailModelArrayList!![j].choice1Id\n                    mCCADetailModel.choice2Id = CCADetailModelArrayList!![j].choice2Id\n                    if(CCADetailModelArrayList!![j].location != null){\n                        mCCADetailModel.location = CCADetailModelArrayList!![j].location\n                    }else{\n                        mCCADetailModel.location = \"\"\n                    }\n                    if(CCADetailModelArrayList!![j].location2 != null){\n                        mCCADetailModel.location2 = CCADetailModelArrayList!![j].location2\n                    }else{\n                        mCCADetailModel.location2 = \"\"\n                    }\n                    if(CCADetailModelArrayList!![j].description != null){\n                        mCCADetailModel.description = CCADetailModelArrayList!![j].description\n                    }else{\n                        mCCADetailModel.description = \"\"\n                    }\n                    if(CCADetailModelArrayList!![j].description2 != null){\n                        mCCADetailModel.description2 = CCADetailModelArrayList!![j].description2\n                    }else{\n                        mCCADetailModel.description2 = \"\"\n                    }\n\n                    for (k in 0 until CCADetailModelArrayList!![j].ccaChoiceModel!!.size)\n                        if (CCADetailModelArrayList!![j].choice1.equals(\n                                CCADetailModelArrayList!![j].ccaChoiceModel!![k].cca_item_name\n                            )\n                    ) {\n                        if (CCADetailModelArrayList!![j].ccaChoiceModel!![k].cca_item_start_time != null\n                            && CCADetailModelArrayList!![j].ccaChoiceModel!![k].cca_item_end_time != null\n                        ) {\n                            mCCADetailModel.cca_item_start_timechoice1 = CCADetailModelArrayList!![j].ccaChoiceModel!![k].cca_item_start_time\n                            mCCADetailModel.cca_item_end_timechoice1 = CCADetailModelArrayList!![j].ccaChoiceModel!![k].cca_item_end_time\n                            break\n                        }\n                    }\n                    for (k in 0 until CCADetailModelArrayList!![j]\n                        .ccaChoiceModel2!!.size) if (CCADetailModelArrayList!![j]\n                            .choice2.equals(\n                                CCADetailModelArrayList!![j].ccaChoiceModel2!![k].cca_item_name,ignoreCase = true\n                            )\n                    ) {\n                        if (CCADetailModelArrayList!![j].ccaChoiceModel2!![k]\n                                .cca_item_start_time != null && CCADetailModelArrayList!![j].ccaChoiceModel2!![k].cca_item_end_time != null\n                        ) {\n                            mCCADetailModel.cca_item_start_timechoice2 = CCADetailModelArrayList!![j].ccaChoiceModel2!![k].cca_item_start_time\n                            mCCADetailModel.cca_item_end_timechoice2 = CCADetailModelArrayList!![j].ccaChoiceModel2!![k].cca_item_end_time\n                            break\n                        }\n                    }\n                    mCCADetailModelArrayList!!.add(mCCADetailModel)\n                    Log.e(\"detaiol\",mCCADetailModel.location.toString())\n                    break\n                }\n            }\n        }\n\n        val mCCAsActivityAdapter = CCAfinalReviewAdapter(mContext, mCCADetailModelArrayList!!)\n        recycler_review!!.adapter = mCCAsActivityAdapter\n        for (j in mCCADetailModelArrayList!!.indices) {\n            Log.e(\"cca\", mCCADetailModelArrayList!![j].choice1.toString())\n            if (mCCADetailModelArrayList!!.get(j)\n                    .choice1 != null && mCCADetailModelArrayList!![j].choice2 != null\n            ) {\n                if (!mCCADetailModelArrayList!![j].choice1Id.equals(\"-541\") &&\n                    !mCCADetailModelArrayList!![j].choice2Id.equals(\"-541\")\n                ) {\n                   /* Log.e(\"1\",\n                        mCCAItemIdArray!!.add(mCCADetailModelArrayList!![j].choice1Id!!).toString()\n                    )*/\n\n                    mCCAItemIdArray!!.add(mCCADetailModelArrayList!![j].choice1Id!!)\n                    mCCAItemIdArray!!.add(mCCADetailModelArrayList!![j].choice2Id!!)\n                } else if (!mCCADetailModelArrayList!![j].choice1Id.equals(\"-541\")\n                ) {\n                   /* Log.e(\"2\",\n                        mCCAItemIdArray!!.add(mCCADetailModelArrayList!![j].choice1Id!!).toString()\n                    )*/\n                    mCCAItemIdArray!!.add(mCCADetailModelArrayList!![j].choice1Id!!)\n                } else if (!mCCADetailModelArrayList!![j].choice2Id.equals(\"-541\")\n                ) {\n                   /* Log.e(\"13\",\n                        mCCAItemIdArray!!.add(mCCADetailModelArrayList!![j].choice1Id!!).toString()\n                    )*/\n                    mCCAItemIdArray!!.add(mCCADetailModelArrayList!![j].choice2Id!!)\n                }\n            } else if (mCCADetailModelArrayList!![j].choice1 != null) {\n                if (!mCCADetailModelArrayList!![j].choice1Id.equals(\"-541\")) {\n                   /* Log.e(\"14\",\n                        mCCAItemIdArray!!.add(mCCADetailModelArrayList!![j].choice1Id!!).toString()\n                    )*/\n                    mCCAItemIdArray!!.add(mCCADetailModelArrayList!![j].choice1Id!!)\n                }\n            } else if (mCCADetailModelArrayList!![j].choice2 != null) {\n                if (!mCCADetailModelArrayList!![j].choice2Id.equals(\"-541\")) {\n                   /* Log.e(\"15\",\n                        mCCAItemIdArray!!.add(mCCADetailModelArrayList!![j].choice1Id!!).toString()\n                    )*/\n                    mCCAItemIdArray!!.add(mCCADetailModelArrayList!![j].choice2Id!!)\n                }\n            }\n        }\n\n        if (mCCAItemIdArray!!.size == 0) {\n            cca_detailsId += \"]}\"\n        }\n        for (i in mCCAItemIdArray!!.indices) {\n            Log.e(\"items\", mCCAItemIdArray!![i].toString())\n            if (mCCAItemIdArray!!.size - 1 == 0) {\n                cca_detailsId += \"\\\"\" + mCCAItemIdArray!![i] + \"\\\"]}\"\n            } else if (i == mCCAItemIdArray!!.size - 1) {\n                cca_detailsId += mCCAItemIdArray!![i] + \"\\\"]}\"\n            } else if (i == 0) {\n                cca_detailsId += \"\\\"\" + mCCAItemIdArray!![i] + \"\\\",\\\"\"\n            } else {\n                cca_detailsId += mCCAItemIdArray!![i] + \"\\\",\\\"\"\n            }\n        }\n        cca_details = \"{\\\"cca_days_id\\\":\\\"\" + PreferenceManager.getCCAItemId(mContext)\n            .toString() + \"\\\",\\\"student_id\\\":\\\"\" + PreferenceManager.getStudentID(mContext)\n            .toString() + \"\\\",\\\"users_id\\\":\\\"\" + PreferenceManager.getUserCode(mContext)\n            .toString() + \"\\\",\\\"cca_days_details_id\\\":\" + cca_detailsId\n\n        Log.e(\"cca_details\",cca_details)\n        Log.e(\"cca_detailsId\",cca_detailsId)\n\n        submitBtn!!.setOnClickListener(View.OnClickListener {\n            showDialogReviewSubmit(\n                mContext as Activity,\n                \"Confirm\",\n                \"Do you want to confirm this ECA?\",\n                R.drawable.exclamationicon,\n                R.drawable.round\n            )\n        })\n    }\n\n    private fun showDialogReviewSubmit(activity: Activity, msgHead: String, msg: String, ico: Int, bgIcon: Int) {\n        val dialog = Dialog(activity)\n        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE)\n        dialog.window!!.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))\n        dialog.setCancelable(false)\n        dialog.setContentView(R.layout.dialog_ok_cancel)\n        val icon = dialog.findViewById<View>(R.id.iconImageView) as ImageView\n        icon.setBackgroundResource(bgIcon)\n        icon.setImageResource(ico)\n        val text = dialog.findViewById<View>(R.id.text_dialog) as TextView\n        val textHead = dialog.findViewById<View>(R.id.alertHead) as TextView\n        text.text = msg\n        textHead.text = msgHead\n\n        val dialogButton = dialog.findViewById<View>(R.id.btn_Ok) as Button\n        dialogButton.setOnClickListener {\n\n            var internetCheck = ConstantFunctions.internetCheck(mContext)\n            if (internetCheck) {\n                ccaSubmitAPI()\n\n\n            } else {\n              //  internetCheck.showSuccessInternetAlert(mContext)\n            }\n            dialog.dismiss()\n\n        }\n        val dialogButtonCancel = dialog.findViewById<View>(R.id.btn_Cancel) as Button\n        dialogButtonCancel.setOnClickListener { dialog.dismiss() }\n        dialog.show()\n\n    }\n\n    private fun ccaSubmitAPI() {\n        Log.e(\"stud\", PreferenceManager.getStudIdForCCA(mContext).toString())\n        Log.e(\"day\",PreferenceManager.getCCAItemId(mContext).toString())\n        Log.e(\"details\",cca_detailsId)\n        val ccaDetail: ArrayList<String> = ArrayList()\n        for (i in mCCAItemIdArray!!.indices){\n//            if ( i != 0) {\n            if(!mCCAItemIdArray!![i].equals(\"-541\"))\n                ccaDetail.add(mCCAItemIdArray!![i].toString())\n//            }\n\n        }\n        Log.e(\"details1\",ccaDetail.toString())\n\n        var model= CCASumbitRequestModel(PreferenceManager.getStudentID(mContext).toString(),\n            PreferenceManager.getCCAItemId(mContext).toString(),ccaDetail.toString()\n        )\n        val token = PreferenceManager.getaccesstoken(mContext)\n        val call: Call<CCASubmitResponseModel> =\n            ApiClient.getClient.ccaSubmit( model,\"Bearer $token\")\n        progressBar.visibility = View.VISIBLE\n        call.enqueue(object : Callback<CCASubmitResponseModel> {\n            override fun onResponse(\n                call: Call<CCASubmitResponseModel>,\n                response: Response<CCASubmitResponseModel>\n            ) {\n                progressBar.visibility = View.GONE\n                if (response.isSuccessful){\n                    if (response.body() != null){\n                        if (response.body()!!.status!!.equals(100)){\n\n//                            val survey: Int = secobj.optInt(\"survey\")\n                            showDialogAlert(\n                                mContext as Activity,\n                                \"Success\",\n                                \"You are able to make changes until the closing date. After the closing date selections are final\",\n                                R.drawable.tickicon,\n                                R.drawable.round,\n                            )\n\n                        }\n                        else if (response.body()!!.status!!.equals(109))\n                        {\n\n\n                        }\n                        else{\n\n                            Toast.makeText(mContext, \"Failure\", Toast.LENGTH_SHORT).show()\n                        }\n\n                    }else{\n\n                        ConstantFunctions.showDialogueWithOk(mContext,getString(R.string.common_error),\"Alert\")\n                    }\n                }else{\n\n                    ConstantFunctions.showDialogueWithOk(mContext,getString(R.string.common_error),\"Alert\")\n                }\n            }\n\n            override fun onFailure(call: Call<CCASubmitResponseModel>, t: Throwable) {\n                progressBar.visibility = View.GONE\n                ConstantFunctions.showDialogueWithOk(mContext,getString(R.string.common_error),\"Alert\")\n            }\n\n        })\n    }\n\n    fun showDialogAlert(\n        activity: Activity?,\n        msgHead: String?,\n        msg: String?,\n        ico: Int,\n        bgIcon: Int,\n    ) {\n        val dialog = Dialog(activity!!)\n        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE)\n        dialog.window!!.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))\n        dialog.setCancelable(false)\n        dialog.setContentView(R.layout.dialog_common_error_alert)\n        val icon = dialog.findViewById<View>(R.id.iconImageView) as ImageView\n        icon.setBackgroundResource(bgIcon)\n        icon.setImageResource(ico)\n        val text = dialog.findViewById<View>(R.id.messageTxt) as TextView\n        val textHead = dialog.findViewById<View>(R.id.alertHead) as TextView\n        text.text = msg\n        textHead.text = msgHead\n        val dialogButton = dialog.findViewById<View>(R.id.btn_Ok) as Button\n        dialogButton.setOnClickListener {\n            dialog.dismiss()\n//            if (survey == 1) {\n//                callSurveyApi()\n//            } else {\n                val intent = Intent(mContext, CCA_Activity::class.java)\n                intent.flags = Intent.FLAG_ACTIVITY_CLEAR_TOP\n                startActivity(intent)\n//            }\n        }\n        dialog.show()\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/nas/alreem/activity/cca/CCAsReviewActivity.kt b/app/src/main/java/com/nas/alreem/activity/cca/CCAsReviewActivity.kt
--- a/app/src/main/java/com/nas/alreem/activity/cca/CCAsReviewActivity.kt	(revision 10a3cbb13b5fc05b1815351c42577261066dfaa1)
+++ b/app/src/main/java/com/nas/alreem/activity/cca/CCAsReviewActivity.kt	(date 1689572040028)
@@ -113,7 +113,8 @@
         if (PreferenceManager.getStudClassForCCA(mContext).equals("")) {
             textViewCCAaItem!!.text = Html.fromHtml(
                 PreferenceManager.getCCATitle(mContext)
-                    .toString() + "<br/>" + PreferenceManager.getStudNameForCCA(mContext)
+                    .toString() + "<br/>" + PreferenceManager.getStudentName(mContext)+ "<br/>Year Group : " + PreferenceManager.getStudentClass(
+                    mContext)
             )
         } else {
             textViewCCAaItem!!.text = Html.fromHtml(
@@ -137,6 +138,7 @@
                     mCCADetailModel.choice2 = CCADetailModelArrayList!![j].choice2
                     mCCADetailModel.choice1Id = CCADetailModelArrayList!![j].choice1Id
                     mCCADetailModel.choice2Id = CCADetailModelArrayList!![j].choice2Id
+
                     if(CCADetailModelArrayList!![j].location != null){
                         mCCADetailModel.location = CCADetailModelArrayList!![j].location
                     }else{
@@ -168,6 +170,9 @@
                         ) {
                             mCCADetailModel.cca_item_start_timechoice1 = CCADetailModelArrayList!![j].ccaChoiceModel!![k].cca_item_start_time
                             mCCADetailModel.cca_item_end_timechoice1 = CCADetailModelArrayList!![j].ccaChoiceModel!![k].cca_item_end_time
+                            mCCADetailModel.location = CCADetailModelArrayList!![j].ccaChoiceModel!![k].venue
+                            mCCADetailModel.description = CCADetailModelArrayList!![j].ccaChoiceModel!![k].description
+
                             break
                         }
                     }
@@ -182,6 +187,10 @@
                         ) {
                             mCCADetailModel.cca_item_start_timechoice2 = CCADetailModelArrayList!![j].ccaChoiceModel2!![k].cca_item_start_time
                             mCCADetailModel.cca_item_end_timechoice2 = CCADetailModelArrayList!![j].ccaChoiceModel2!![k].cca_item_end_time
+                            mCCADetailModel.location2 = CCADetailModelArrayList!![j].ccaChoiceModel2!![k].venue
+                            mCCADetailModel.description2 = CCADetailModelArrayList!![j].ccaChoiceModel2!![k].description
+
+
                             break
                         }
                     }
@@ -254,7 +263,7 @@
             }
         }
         cca_details = "{\"cca_days_id\":\"" + PreferenceManager.getCCAItemId(mContext)
-            .toString() + "\",\"student_id\":\"" + PreferenceManager.getStudentID(mContext)
+            .toString() + "\",\"student_id\":\"" + PreferenceManager.getStudIdForCCA(mContext)
             .toString() + "\",\"users_id\":\"" + PreferenceManager.getUserCode(mContext)
             .toString() + "\",\"cca_days_details_id\":" + cca_detailsId
 
@@ -320,7 +329,7 @@
         }
         Log.e("details1",ccaDetail.toString())
 
-        var model= CCASumbitRequestModel(PreferenceManager.getStudentID(mContext).toString(),
+        var model= CCASumbitRequestModel(PreferenceManager.getStudIdForCCA(mContext).toString(),
             PreferenceManager.getCCAItemId(mContext).toString(),ccaDetail.toString()
         )
         val token = PreferenceManager.getaccesstoken(mContext)
@@ -401,7 +410,9 @@
 //                callSurveyApi()
 //            } else {
                 val intent = Intent(mContext, CCA_Activity::class.java)
-                intent.flags = Intent.FLAG_ACTIVITY_CLEAR_TOP
+                PreferenceManager.setStudIdForCCA(mContext!!, "")
+
+            intent.flags = Intent.FLAG_ACTIVITY_CLEAR_TOP
                 startActivity(intent)
 //            }
         }
Index: app/src/main/java/com/nas/alreem/activity/cca/adapter/CCAfinalReviewAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.nas.alreem.activity.cca.adapter\n\nimport android.content.Context\nimport android.util.Log\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.LinearLayout\nimport android.widget.TextView\nimport androidx.recyclerview.widget.RecyclerView\nimport com.nas.alreem.R\nimport com.nas.alreem.activity.cca.model.CCADetailModel\nimport java.text.ParseException\nimport java.text.SimpleDateFormat\nimport java.util.*\n\nclass CCAfinalReviewAdapter(\n    var mContext: Context,\n    mCCADetailModelArrayList: ArrayList<CCADetailModel>\n) :\n    RecyclerView.Adapter<CCAfinalReviewAdapter.MyViewHolder>() {\n    var mCCADetailModelArrayList: ArrayList<CCADetailModel>\n\n    inner class MyViewHolder(view: View) : RecyclerView.ViewHolder(view) {\n        var textViewCCAaDateItemChoice1: TextView\n        var textViewCCAaDateItemChoice2: TextView\n        var textViewCCADay: TextView\n        var textViewCCAChoice1: TextView\n        var textViewCCAChoice2: TextView\n        var locationTxt: TextView\n        var location2Txt: TextView\n        var description2Txt: TextView\n        var descriptionTxt: TextView\n        var linearChoice1: LinearLayout\n        var linearChoice2: LinearLayout\n\n        init {\n            textViewCCAaDateItemChoice1 =\n                view.findViewById<View>(R.id.textViewCCAaDateItemChoice1) as TextView\n            textViewCCAaDateItemChoice2 =\n                view.findViewById<View>(R.id.textViewCCAaDateItemChoice2) as TextView\n            textViewCCADay = view.findViewById<View>(R.id.textViewCCADay) as TextView\n            textViewCCAChoice1 = view.findViewById<View>(R.id.textViewCCAChoice1) as TextView\n            textViewCCAChoice2 = view.findViewById<View>(R.id.textViewCCAChoice2) as TextView\n            locationTxt = view.findViewById<View>(R.id.locationTxt) as TextView\n            location2Txt = view.findViewById<View>(R.id.location2Txt) as TextView\n            description2Txt = view.findViewById<View>(R.id.description2Txt) as TextView\n            descriptionTxt = view.findViewById<View>(R.id.descriptionTxt) as TextView\n            linearChoice1 = view.findViewById<View>(R.id.linearChoice1) as LinearLayout\n            linearChoice2 = view.findViewById<View>(R.id.linearChoice2) as LinearLayout\n        }\n    }\n\n    //    public CCAfinalReviewAdapter(Context mContext) {\n    //        this.mContext = mContext;\n    //    }\n    //    public CCAfinalReviewAdapter(Context mContext,ArrayList<CCADetailModel>mCCADetailModelArrayList) {\n    //        this.mContext = mContext;\n    //        this.mCCADetailModelArrayList = mCCADetailModelArrayList;\n    //    }\n    init {\n        this.mCCADetailModelArrayList = mCCADetailModelArrayList\n    }\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MyViewHolder {\n        val itemView: View = LayoutInflater.from(parent.context)\n            .inflate(R.layout.adapter_cca_final_review, parent, false)\n        return MyViewHolder(itemView)\n    }\n\n    override fun onBindViewHolder(holder: MyViewHolder, position: Int) {\n        Log.e(\"Location\", mCCADetailModelArrayList[position].location.toString())\n        Log.e(\"Location2\", mCCADetailModelArrayList[position].location2.toString())\n        Log.e(\"item\", mCCADetailModelArrayList[position].choice1.toString())\n        Log.e(\"item2\", mCCADetailModelArrayList[position].choice2.toString())\n        Log.e(\"desc\", mCCADetailModelArrayList[position].description.toString())\n        Log.e(\"desc\", mCCADetailModelArrayList[position].description2.toString())\n        if (mCCADetailModelArrayList[position].location\n                .equals(\"0\") || mCCADetailModelArrayList[position].location\n                .equals(\"\")\n        ) {\n            holder.locationTxt.visibility = View.GONE\n        } else {\n            holder.locationTxt.visibility = View.VISIBLE\n            holder.locationTxt.text =\n                \"Location       : \" + mCCADetailModelArrayList[position].location\n        }\n        if (mCCADetailModelArrayList[position].location2\n                .equals(\"0\") || mCCADetailModelArrayList[position].location2\n                .equals(\"\")\n        ) {\n            holder.location2Txt.visibility = View.GONE\n        } else {\n            holder.location2Txt.visibility = View.VISIBLE\n            holder.location2Txt.text =\n                \"Location       : \" + mCCADetailModelArrayList[position].location2\n        }\n        if (mCCADetailModelArrayList[position].description\n                .equals(\"0\") || mCCADetailModelArrayList[position].description\n                .equals(\"\")\n        ) {\n            holder.descriptionTxt.visibility = View.GONE\n        } else {\n            holder.descriptionTxt.visibility = View.VISIBLE\n            holder.descriptionTxt.text =\n                \"Description : \" + mCCADetailModelArrayList[position].description\n        }\n        if (mCCADetailModelArrayList[position].description2\n                .equals(\"0\") || mCCADetailModelArrayList[position].description2\n                .equals(\"\")\n        ) {\n            holder.description2Txt.visibility = View.GONE\n        } else {\n            holder.description2Txt.visibility = View.VISIBLE\n            holder.description2Txt.text =\n                \"Description : \" + mCCADetailModelArrayList[position].description2\n        }\n        holder.textViewCCADay.setText(mCCADetailModelArrayList[position].day)\n        if (mCCADetailModelArrayList[position].choice1 == null) {\n            holder.linearChoice1.visibility = View.GONE\n            holder.textViewCCAChoice1.text = \"Choice 1 : Nil\"\n        } else {\n            holder.linearChoice1.visibility = View.VISIBLE\n            holder.textViewCCAChoice1.text =\n                \"Choice 1 : \" + mCCADetailModelArrayList[position].choice1\n            if (mCCADetailModelArrayList[position].cca_item_start_timechoice1 != null && mCCADetailModelArrayList[position].cca_item_end_timechoice1 != null) {\n                holder.textViewCCAaDateItemChoice1.visibility = View.VISIBLE\n                holder.textViewCCAaDateItemChoice1.text = \"(\" + convertTimeToAMPM(\n                    mCCADetailModelArrayList[position].cca_item_start_timechoice1\n                ) + \" - \" + convertTimeToAMPM(\n                    mCCADetailModelArrayList[position].cca_item_end_timechoice1\n                ) + \")\"\n            } else if (mCCADetailModelArrayList[position].cca_item_start_timechoice1 != null) {\n                holder.textViewCCAaDateItemChoice1.visibility = View.VISIBLE\n                holder.textViewCCAaDateItemChoice1.text = \"(\" + convertTimeToAMPM(\n                    mCCADetailModelArrayList[position].cca_item_end_timechoice1\n                ) + \")\"\n            } else if (mCCADetailModelArrayList[position].cca_item_end_timechoice1 != null) {\n                holder.textViewCCAaDateItemChoice1.visibility = View.VISIBLE\n                holder.textViewCCAaDateItemChoice1.text = \"(\" + convertTimeToAMPM(\n                    mCCADetailModelArrayList[position].cca_item_end_timechoice1\n                ) + \")\"\n            } else {\n                holder.textViewCCAaDateItemChoice1.visibility = View.GONE\n            }\n        }\n        if (mCCADetailModelArrayList[position].choice2 == null) {\n            holder.linearChoice2.visibility = View.GONE\n            holder.textViewCCAChoice2.text = \"Choice 2 : Nil\"\n        } else {\n            holder.linearChoice2.visibility = View.VISIBLE\n            holder.textViewCCAChoice2.text =\n                \"Choice 2 : \" + mCCADetailModelArrayList[position].choice2\n            if (mCCADetailModelArrayList[position].cca_item_start_timechoice2 != null && mCCADetailModelArrayList[position].cca_item_end_timechoice2 != null) {\n                holder.textViewCCAaDateItemChoice2.visibility = View.VISIBLE\n                holder.textViewCCAaDateItemChoice2.text = \"(\" + convertTimeToAMPM(\n                    mCCADetailModelArrayList[position].cca_item_start_timechoice2\n                ) + \" - \" + convertTimeToAMPM(\n                    mCCADetailModelArrayList[position].cca_item_end_timechoice2\n                ) + \")\"\n            } else if (mCCADetailModelArrayList[position].cca_item_start_timechoice2 != null) {\n                holder.textViewCCAaDateItemChoice2.visibility = View.VISIBLE\n                holder.textViewCCAaDateItemChoice2.text = \"(\" + convertTimeToAMPM(\n                    mCCADetailModelArrayList[position].cca_item_start_timechoice2\n                ) + \")\"\n            } else if (mCCADetailModelArrayList[position].cca_item_end_timechoice2 != null) {\n                holder.textViewCCAaDateItemChoice2.visibility = View.VISIBLE\n                holder.textViewCCAaDateItemChoice2.text = \"(\" + convertTimeToAMPM(\n                    mCCADetailModelArrayList[position].cca_item_end_timechoice2\n                ) + \")\"\n            } else {\n                holder.textViewCCAaDateItemChoice2.visibility = View.GONE\n            }\n        }\n    }\n\n    override fun getItemCount(): Int {\n        Log.e(\"size\", mCCADetailModelArrayList.size.toString())\n        return mCCADetailModelArrayList.size\n    }\n\n    companion object {\n        fun convertTimeToAMPM(date: String?): String {\n            var strCurrentDate = \"\"\n            var format = SimpleDateFormat(\"HH:mm:ss\", Locale.ENGLISH)\n            var newDate: Date? = null\n            try {\n                newDate = format.parse(date)\n            } catch (e: ParseException) {\n                e.printStackTrace()\n            }\n            format = SimpleDateFormat(\"hh:mm a\", Locale.ENGLISH)\n            strCurrentDate = format.format(newDate)\n            return strCurrentDate\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/nas/alreem/activity/cca/adapter/CCAfinalReviewAdapter.kt b/app/src/main/java/com/nas/alreem/activity/cca/adapter/CCAfinalReviewAdapter.kt
--- a/app/src/main/java/com/nas/alreem/activity/cca/adapter/CCAfinalReviewAdapter.kt	(revision 10a3cbb13b5fc05b1815351c42577261066dfaa1)
+++ b/app/src/main/java/com/nas/alreem/activity/cca/adapter/CCAfinalReviewAdapter.kt	(date 1689522202123)
@@ -69,12 +69,12 @@
     }
 
     override fun onBindViewHolder(holder: MyViewHolder, position: Int) {
-        Log.e("Location", mCCADetailModelArrayList[position].location.toString())
-        Log.e("Location2", mCCADetailModelArrayList[position].location2.toString())
-        Log.e("item", mCCADetailModelArrayList[position].choice1.toString())
-        Log.e("item2", mCCADetailModelArrayList[position].choice2.toString())
-        Log.e("desc", mCCADetailModelArrayList[position].description.toString())
-        Log.e("desc", mCCADetailModelArrayList[position].description2.toString())
+      //  Log.e("Location", mCCADetailModelArrayList[position].ccaChoiceModel!!.toString())
+       // Log.e("Location2", mCCADetailModelArrayList[position].location2.toString())
+       // Log.e("item", mCCADetailModelArrayList[position].choice1.toString())
+      //  Log.e("item2", mCCADetailModelArrayList[position].choice2.toString())
+      //  Log.e("desc", mCCADetailModelArrayList[position].description.toString())
+     //   Log.e("desc", mCCADetailModelArrayList[position].description2.toString())
         if (mCCADetailModelArrayList[position].location
                 .equals("0") || mCCADetailModelArrayList[position].location
                 .equals("")
@@ -121,6 +121,7 @@
             holder.textViewCCAChoice1.text = "Choice 1 : Nil"
         } else {
             holder.linearChoice1.visibility = View.VISIBLE
+            Log.e("date", mCCADetailModelArrayList[position].cca_item_start_timechoice1.toString())
             holder.textViewCCAChoice1.text =
                 "Choice 1 : " + mCCADetailModelArrayList[position].choice1
             if (mCCADetailModelArrayList[position].cca_item_start_timechoice1 != null && mCCADetailModelArrayList[position].cca_item_end_timechoice1 != null) {
Index: app/src/main/java/com/nas/alreem/activity/cca/CCAsReviewAfterSubmissionNoDeleteActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.nas.alreem.activity.cca\n\nimport android.app.Activity\nimport android.content.Context\nimport android.content.Intent\nimport android.os.Bundle\nimport android.text.Html\nimport android.view.View\nimport android.widget.ImageView\nimport android.widget.RelativeLayout\nimport android.widget.TextView\nimport android.widget.Toast\nimport androidx.recyclerview.widget.GridLayoutManager\nimport androidx.recyclerview.widget.RecyclerView\nimport com.nas.alreem.R\nimport com.nas.alreem.activity.cca.model.CCAAttendanceModel\nimport com.nas.alreem.activity.cca.model.CCADetailModel\nimport com.nas.alreem.activity.cca.model.CCAReviewAfterSubmissionModel\nimport com.nas.alreem.constants.PreferenceManager\nimport org.json.JSONObject\nimport java.util.*\n\n/*\nclass CCAsReviewAfterSubmissionNoDeleteActivity : Activity(){\n    var recyclerViewLayoutManager: GridLayoutManager? = null\n    var recycler_review: RecyclerView? = null\n   // var headermanager: HeaderManager? = null\n    var relativeHeader: RelativeLayout? = null\n    var back: ImageView? = null\n    var home: ImageView? = null\n    var editCcca: RelativeLayout? = null\n    var messageTxt: RelativeLayout? = null\n    var msgTxt: TextView? = null\n    var tab_type: String? = \"CCAs\"\n    var extras: Bundle? = null\n   lateinit var mContext: Context\n    var mCCADetailModelArrayList: ArrayList<CCAReviewAfterSubmissionModel>? = null\n    var textViewCCAaItem: TextView? = null\n    var weekList: ArrayList<String>? = null\n    var absentDaysChoice2Array: ArrayList<String>? = null\n    var presentDaysChoice2Array: ArrayList<String>? = null\n    var upcomingDaysChoice2Array: ArrayList<String>? = null\n    var absentDaysChoice1Array: ArrayList<String>? = null\n    var presentDaysChoice1Array: ArrayList<String>? = null\n    var upcomingDaysChoice1Array: ArrayList<String>? = null\n    var datestringChoice1: ArrayList<CCAAttendanceModel>? = null\n    var datestringChoice2: ArrayList<CCAAttendanceModel>? = null\n    var submissiondateover = \"-1\"\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_cca_no_edit_delete)\n        mContext = this\n        extras = intent.extras\n        if (extras != null) {\n            tab_type = extras!!.getString(\"tab_type\")\n            submissiondateover = extras!!.getString(\"submissiondateover\", \"-1\")\n            CCADetailModelArrayList =\n                extras!!.getSerializable(\"CCA_Detail\") as ArrayList<CCADetailModel>?\n        }\n        weekList = ArrayList()\n        weekList!!.add(\"Sunday\")\n        weekList!!.add(\"Monday\")\n        weekList!!.add(\"Tuesday\")\n        weekList!!.add(\"Wednesday\")\n        weekList!!.add(\"Thursday\")\n        weekList!!.add(\"Friday\")\n        weekList!!.add(\"Saturday\")\n        absentDaysChoice2Array = ArrayList()\n        presentDaysChoice2Array = ArrayList()\n        upcomingDaysChoice2Array = ArrayList()\n        absentDaysChoice1Array = ArrayList()\n        presentDaysChoice1Array = ArrayList()\n        upcomingDaysChoice1Array = ArrayList()\n        datestringChoice1 = ArrayList<CCAAttendanceModel>()\n        datestringChoice2 = ArrayList<CCAAttendanceModel>()\n        relativeHeader = findViewById<View>(R.id.relativeHeader) as RelativeLayout\n        recycler_review = findViewById<View>(R.id.recycler_view_cca) as RecyclerView\n        textViewCCAaItem = findViewById<View>(R.id.textViewCCAaItem) as TextView\n        messageTxt = findViewById<View>(R.id.messageTxt) as RelativeLayout\n        msgTxt = findViewById<View>(R.id.msgTxt) as TextView\n        messageTxt!!.visibility = View.VISIBLE\n        editCcca = findViewById<View>(R.id.editCcca) as RelativeLayout\n        headermanager = HeaderManager(this@CCAsReviewAfterSubmissionNoDeleteActivity, tab_type)\n        headermanager.getHeader(relativeHeader, 0)\n        back = headermanager.getLeftButton()\n        headermanager.setButtonLeftSelector(\n            R.drawable.back,\n            R.drawable.back\n        )\n        back!!.setOnClickListener {\n            AppUtils.hideKeyBoard(mContext)\n            finish()\n        }\n        editCcca!!.setOnClickListener {\n            val intent = Intent(\n                mContext,\n                CCASelectionActivity::class.java\n            )\n            intent.putExtra(\n                \"CCA_Detail\",\n                CCADetailModelArrayList\n            )\n            intent.putExtra(\"tab_type\", tab_type)\n            intent.putExtra(\"ccaedit\", 1)\n            startActivity(intent)\n        }\n        home = headermanager.getLogoButton()\n        home!!.setOnClickListener {\n            val `in` = Intent(\n                mContext,\n                HomeListAppCompatActivity::class.java\n            )\n            `in`.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)\n            startActivity(`in`)\n        }\n        recycler_review!!.setHasFixedSize(true)\n        recyclerViewLayoutManager = GridLayoutManager(mContext, 1)\n        recycler_review!!.layoutManager = recyclerViewLayoutManager\n        mCCADetailModelArrayList = ArrayList<CCAReviewAfterSubmissionModel>()\n        //        textViewCCAaItem.setText(Html.fromHtml(PreferenceManager.getCCATitle(mContext) + \"<br/>\" + PreferenceManager.getStudNameForCCA(mContext)));\n        if (PreferenceManager.getStudClassForCCA(mContext).equals(\"\")) {\n            textViewCCAaItem!!.text = Html.fromHtml(\n                PreferenceManager.getCCATitle(mContext) + \"<br/>\" + PreferenceManager.getStudNameForCCA(\n                    mContext\n                )\n            )\n        } else {\n            textViewCCAaItem!!.text = Html.fromHtml(\n                PreferenceManager.getCCATitle(mContext) + \"<br/>\" + PreferenceManager.getStudNameForCCA(\n                    mContext\n                ) + \"<br/>Year Group : \" + PreferenceManager.getStudClassForCCA(mContext)\n            )\n        }\n      //  if (AppUtils.isNetworkConnected(mContext)) {\n            ccaReviewListAPI()\n      //  } else {\n      //      AppUtils.showDialogAlertDismiss(\n        //        mContext as Activity?,\n        //        \"Network Error\",\n        //        getString(R.string.no_internet),\n        //        R.drawable.nonetworkicon,\n        //        R.drawable.roundred\n        //    )\n       // }\n    }\n\n    private fun ccaReviewListAPI() {\n        val volleyWrapper = VolleyWrapper(URL_CCA_REVIEWS)\n        val name = arrayOf(\"access_token\", \"student_id\", \"cca_days_id\")\n        val value = arrayOf<String>(\n            PreferenceManager.getAccessToken(mContext),\n            PreferenceManager.getStudIdForCCA(mContext),\n            PreferenceManager.getCCAItemId(mContext)\n        )\n        volleyWrapper.getResponsePOST(mContext, 11, name, value, object : ResponseListener() {\n            fun responseSuccess(successResponse: String) {\n                println(\"The response is$successResponse\")\n                try {\n                    val obj = JSONObject(successResponse)\n                    val response_code = obj.getString(JTAG_RESPONSECODE)\n                    if (response_code.equals(\"200\", ignoreCase = true)) {\n                        val secobj = obj.getJSONObject(JTAG_RESPONSE)\n                        val status_code = secobj.getString(JTAG_STATUSCODE)\n                        if (status_code.equals(\"303\", ignoreCase = true)) {\n                            val data = secobj.optJSONArray(\"data\")\n                            if (data.length() > 0) {\n                                for (j in weekList!!.indices) {\n                                    for (i in 0 until data.length()) {\n                                        val dataObject = data.getJSONObject(i)\n                                        if (dataObject.optString(\"day\")\n                                                .equals(weekList!![j], ignoreCase = true)\n                                        ) {\n                                            mCCADetailModelArrayList!!.add(\n                                                addCCAReviewlist(\n                                                    dataObject\n                                                )\n                                            )\n                                        }\n                                    }\n                                }\n                                if (mCCADetailModelArrayList!!.size > 0) {\n                                    messageTxt!!.visibility = View.VISIBLE\n                                    val mCCAsActivityAdapter =\n                                        CCAfinalReviewEditAfterSubmissionAdapter(\n                                            mContext,\n                                            mCCADetailModelArrayList\n                                        )\n                                    recycler_review!!.adapter = mCCAsActivityAdapter\n                                }\n                            } else {\n                                messageTxt!!.visibility = View.GONE\n                                Toast.makeText(\n                                    this@CCAsReviewAfterSubmissionNoDeleteActivity,\n                                    \"No EAP available\",\n                                    Toast.LENGTH_SHORT\n                                ).show()\n                            }\n                        }\n                    } else if (response_code.equals(\"500\", ignoreCase = true)) {\n                        AppUtils.showDialogAlertDismiss(\n                            mContext as Activity?,\n                            \"Alert\",\n                            getString(R.string.common_error),\n                            R.drawable.exclamationicon,\n                            R.drawable.round\n                        )\n                    } else if (response_code.equals(\"400\", ignoreCase = true)) {\n                        AppUtils.getToken(mContext, object : GetTokenSuccess() {\n                            fun tokenrenewed() {}\n                        })\n                        ccaReviewListAPI()\n                    } else if (response_code.equals(\"401\", ignoreCase = true)) {\n                        AppUtils.getToken(mContext, object : GetTokenSuccess() {\n                            fun tokenrenewed() {}\n                        })\n                        ccaReviewListAPI()\n                    } else if (response_code.equals(\"402\", ignoreCase = true)) {\n                        AppUtils.getToken(mContext, object : GetTokenSuccess() {\n                            fun tokenrenewed() {}\n                        })\n                        ccaReviewListAPI()\n                    } else {\n                        AppUtils.showDialogAlertDismiss(\n                            mContext as Activity?,\n                            \"Alert\",\n                            getString(R.string.common_error),\n                            R.drawable.exclamationicon,\n                            R.drawable.round\n                        )\n                    }\n                } catch (ex: Exception) {\n                }\n            }\n\n            fun responseFailure(failureResponse: String?) {\n                AppUtils.showDialogAlertDismiss(\n                    mContext as Activity?,\n                    \"Alert\",\n                    getString(R.string.common_error),\n                    R.drawable.exclamationicon,\n                    R.drawable.round\n                )\n            }\n        })\n    }\n\n    private fun addCCAReviewlist(dataObject: JSONObject): CCAReviewAfterSubmissionModel {\n        val mCCAModel = CCAReviewAfterSubmissionModel()\n        mCCAModel.setDay(dataObject.optString(\"day\"))\n        datestringChoice1 = ArrayList<CCAAttendanceModel>()\n        datestringChoice2 = ArrayList<CCAAttendanceModel>()\n        if (dataObject.has(\"choice1\")) {\n            val choice1 = dataObject.optJSONObject(\"choice1\")\n            if (choice1 != null) {\n                if (choice1.has(\"cca_item_name\")) {\n                    mCCAModel.setChoice1(choice1.optString(\"cca_item_name\"))\n                    if (choice1.has(\"cca_details_venue\")) {\n                        mCCAModel.setVenue(choice1.optString(\"cca_details_venue\"))\n                    } else {\n                        mCCAModel.setVenue(\"\")\n                    }\n                    if (choice1.has(\"cca_item_description\")) {\n                        mCCAModel.setCca_item_description(choice1.optString(\"cca_item_description\"))\n                    } else {\n                        mCCAModel.setCca_item_description(\"\")\n                    }\n                    mCCAModel.setCca_item_start_time(choice1.optString(\"cca_item_start_time\"))\n                    mCCAModel.setCca_item_end_time(choice1.optString(\"cca_item_end_time\"))\n                    val absentDaysChoice1 = choice1.optJSONArray(\"absentDays\")\n                    absentDaysChoice1Array = ArrayList()\n                    if (choice1.has(\"absentDays\")) {\n                        for (i in 0 until absentDaysChoice1.length()) {\n                            absentDaysChoice1Array!!.add(absentDaysChoice1.optString(i))\n                        }\n                    }\n                    presentDaysChoice1Array = ArrayList()\n                    if (choice1.has(\"presentDays\")) {\n                        val presentDaysChoice1 = choice1.optJSONArray(\"presentDays\")\n                        for (i in 0 until presentDaysChoice1.length()) {\n                            presentDaysChoice1Array!!.add(presentDaysChoice1.optString(i))\n                        }\n                    }\n                    upcomingDaysChoice1Array = ArrayList()\n                    if (choice1.has(\"upcomingDays\")) {\n                        val upcomingDaysChoice1 = choice1.optJSONArray(\"upcomingDays\")\n                        for (i in 0 until upcomingDaysChoice1.length()) {\n                            upcomingDaysChoice1Array!!.add(upcomingDaysChoice1.optString(i))\n                        }\n                    }\n                } else {\n                    mCCAModel.setChoice1(\"0\")\n                }\n            } else {\n                mCCAModel.setChoice1(\"0\")\n            }\n        } else {\n            mCCAModel.setChoice1(\"-1\")\n        }\n        if (dataObject.has(\"choice2\")) {\n            val choice2 = dataObject.optJSONObject(\"choice2\")\n            if (choice2 != null) {\n                if (choice2.has(\"cca_item_name\")) {\n                    mCCAModel.setChoice2(choice2.optString(\"cca_item_name\"))\n                    if (choice2.has(\"cca_details_venue\")) {\n                        mCCAModel.setVenue2(choice2.optString(\"cca_details_venue\"))\n                    } else {\n                        mCCAModel.setVenue2(\"\")\n                    }\n                    if (choice2.has(\"cca_item_description\")) {\n                        mCCAModel.setCca_item_description_2(choice2.optString(\"cca_item_description\"))\n                    } else {\n                        mCCAModel.setCca_item_description_2(\"\")\n                    }\n                    mCCAModel.setCca_item_start_time(choice2.optString(\"cca_item_start_time\"))\n                    mCCAModel.setCca_item_end_time(choice2.optString(\"cca_item_end_time\"))\n                    val absentDaysChoice2 = choice2.optJSONArray(\"absentDays\")\n                    if (choice2.has(\"absentDays\")) {\n                        absentDaysChoice2Array = ArrayList()\n                        for (i in 0 until absentDaysChoice2.length()) {\n                            absentDaysChoice2Array!!.add(absentDaysChoice2.optString(i))\n                        }\n                    }\n                    presentDaysChoice2Array = ArrayList()\n                    val presentDaysChoice2 = choice2.optJSONArray(\"presentDays\")\n                    if (choice2.has(\"presentDays\")) {\n                        for (i in 0 until presentDaysChoice2.length()) {\n                            presentDaysChoice2Array!!.add(presentDaysChoice2.optString(i))\n                        }\n                    }\n                    upcomingDaysChoice2Array = ArrayList()\n                    val upcomingDaysChoice2 = choice2.optJSONArray(\"upcomingDays\")\n                    if (choice2.has(\"upcomingDays\")) {\n                        for (i in 0 until upcomingDaysChoice2.length()) {\n                            upcomingDaysChoice2Array!!.add(upcomingDaysChoice2.optString(i))\n                        }\n                    }\n                } else {\n                    mCCAModel.setChoice2(\"0\")\n                }\n            } else {\n                mCCAModel.setChoice2(\"0\")\n            }\n        } else {\n            mCCAModel.setChoice2(\"-1\")\n        }\n        if (absentDaysChoice1Array!!.size > 0) {\n            for (i in absentDaysChoice1Array!!.indices) {\n                val mCCAAttendanceModel = CCAAttendanceModel()\n                mCCAAttendanceModel.setDateAttend(absentDaysChoice1Array!![i])\n                mCCAAttendanceModel.setStatusCCA(\"a\")\n                datestringChoice1!!.add(mCCAAttendanceModel)\n            }\n        }\n        if (upcomingDaysChoice1Array!!.size > 0) {\n            for (i in upcomingDaysChoice1Array!!.indices) {\n                val mCCAAttendanceModel = CCAAttendanceModel()\n                mCCAAttendanceModel.setDateAttend(upcomingDaysChoice1Array!![i])\n                mCCAAttendanceModel.setStatusCCA(\"u\")\n                datestringChoice1!!.add(mCCAAttendanceModel)\n            }\n        }\n        if (presentDaysChoice1Array!!.size > 0) {\n            for (i in presentDaysChoice1Array!!.indices) {\n                val mCCAAttendanceModel = CCAAttendanceModel()\n                mCCAAttendanceModel.setDateAttend(presentDaysChoice1Array!![i])\n                mCCAAttendanceModel.setStatusCCA(\"p\")\n                datestringChoice1!!.add(mCCAAttendanceModel)\n            }\n        }\n        if (absentDaysChoice2Array!!.size > 0) {\n            for (i in absentDaysChoice2Array!!.indices) {\n                val mCCAAttendanceModel = CCAAttendanceModel()\n                mCCAAttendanceModel.setDateAttend(absentDaysChoice2Array!![i])\n                mCCAAttendanceModel.setStatusCCA(\"a\")\n                datestringChoice2!!.add(mCCAAttendanceModel)\n            }\n        }\n        if (upcomingDaysChoice2Array!!.size > 0) {\n            for (i in upcomingDaysChoice2Array!!.indices) {\n                val mCCAAttendanceModel = CCAAttendanceModel()\n                mCCAAttendanceModel.setDateAttend(upcomingDaysChoice2Array!![i])\n                mCCAAttendanceModel.setStatusCCA(\"u\")\n                datestringChoice2!!.add(mCCAAttendanceModel)\n            }\n        }\n        if (presentDaysChoice2Array!!.size > 0) {\n            for (i in presentDaysChoice2Array!!.indices) {\n                val mCCAAttendanceModel = CCAAttendanceModel()\n                mCCAAttendanceModel.setDateAttend(presentDaysChoice2Array!![i])\n                mCCAAttendanceModel.setStatusCCA(\"p\")\n                datestringChoice2!!.add(mCCAAttendanceModel)\n            }\n        }\n        if (datestringChoice1!!.size > 0) {\n            Collections.sort(datestringChoice1,\n                Comparator<Any?> { s1, s2 ->\n                    s1.getDateAttend().compareToIgnoreCase(s2.getDateAttend())\n                })\n        }\n        if (datestringChoice2!!.size > 0) {\n            Collections.sort(datestringChoice1,\n                Comparator<Any?> { s1, s2 ->\n                    s1.getDateAttend().compareToIgnoreCase(s2.getDateAttend())\n                })\n        }\n        mCCAModel.setCalendarDaysChoice1(datestringChoice1)\n        mCCAModel.setCalendarDaysChoice2(datestringChoice2)\n        return mCCAModel\n    }\n\n    companion object {\n        var CCADetailModelArrayList: ArrayList<CCADetailModel>? = null\n    }\n}*/\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/nas/alreem/activity/cca/CCAsReviewAfterSubmissionNoDeleteActivity.kt b/app/src/main/java/com/nas/alreem/activity/cca/CCAsReviewAfterSubmissionNoDeleteActivity.kt
--- a/app/src/main/java/com/nas/alreem/activity/cca/CCAsReviewAfterSubmissionNoDeleteActivity.kt	(revision 10a3cbb13b5fc05b1815351c42577261066dfaa1)
+++ b/app/src/main/java/com/nas/alreem/activity/cca/CCAsReviewAfterSubmissionNoDeleteActivity.kt	(date 1689562373183)
@@ -5,28 +5,30 @@
 import android.content.Intent
 import android.os.Bundle
 import android.text.Html
+import android.util.Log
 import android.view.View
-import android.widget.ImageView
-import android.widget.RelativeLayout
-import android.widget.TextView
-import android.widget.Toast
+import android.widget.*
 import androidx.recyclerview.widget.GridLayoutManager
 import androidx.recyclerview.widget.RecyclerView
 import com.nas.alreem.R
-import com.nas.alreem.activity.cca.model.CCAAttendanceModel
-import com.nas.alreem.activity.cca.model.CCADetailModel
-import com.nas.alreem.activity.cca.model.CCAReviewAfterSubmissionModel
+import com.nas.alreem.activity.cca.adapter.CCAfinalReviewEditAfterSubmissionAdapter
+import com.nas.alreem.activity.cca.model.*
+import com.nas.alreem.activity.home.HomeActivity
+import com.nas.alreem.constants.ConstantFunctions
 import com.nas.alreem.constants.PreferenceManager
+import com.nas.alreem.rest.ApiClient
 import org.json.JSONObject
+import retrofit2.Call
+import retrofit2.Callback
+import retrofit2.Response
 import java.util.*
 
-/*
 class CCAsReviewAfterSubmissionNoDeleteActivity : Activity(){
     var recyclerViewLayoutManager: GridLayoutManager? = null
     var recycler_review: RecyclerView? = null
    // var headermanager: HeaderManager? = null
     var relativeHeader: RelativeLayout? = null
-    var back: ImageView? = null
+   // var back: ImageView? = null
     var home: ImageView? = null
     var editCcca: RelativeLayout? = null
     var messageTxt: RelativeLayout? = null
@@ -46,6 +48,11 @@
     var datestringChoice1: ArrayList<CCAAttendanceModel>? = null
     var datestringChoice2: ArrayList<CCAAttendanceModel>? = null
     var submissiondateover = "-1"
+    lateinit var progressBar: ProgressBar
+    var CCADetailModelArrayList: ArrayList<CCADetailModel>? = null
+    lateinit var logoclick: ImageView
+    lateinit var back: ImageView
+    lateinit var backRelative: RelativeLayout
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
         setContentView(R.layout.activity_cca_no_edit_delete)
@@ -80,19 +87,23 @@
         msgTxt = findViewById<View>(R.id.msgTxt) as TextView
         messageTxt!!.visibility = View.VISIBLE
         editCcca = findViewById<View>(R.id.editCcca) as RelativeLayout
-        headermanager = HeaderManager(this@CCAsReviewAfterSubmissionNoDeleteActivity, tab_type)
-        headermanager.getHeader(relativeHeader, 0)
-        back = headermanager.getLeftButton()
-        headermanager.setButtonLeftSelector(
-            R.drawable.back,
-            R.drawable.back
-        )
-        back!!.setOnClickListener {
-            AppUtils.hideKeyBoard(mContext)
+        progressBar = findViewById(R.id.progress)
+       // back = findViewById(R.id.btn_left)
+        backRelative = findViewById(R.id.backRelative)
+        logoclick = findViewById(R.id.logoClickImgView)
+        //  headermanager = HeaderManager(this@CCAsReviewAfterSubmissionNoDeleteActivity, tab_type)
+      //  headermanager.getHeader(relativeHeader, 0)
+        logoclick.setOnClickListener {
+            val mIntent = Intent(mContext, HomeActivity::class.java)
+            mIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)
+
+            startActivity(mIntent)
+        }
+        backRelative.setOnClickListener {
             finish()
         }
         editCcca!!.setOnClickListener {
-            val intent = Intent(
+            /*val intent = Intent(
                 mContext,
                 CCASelectionActivity::class.java
             )
@@ -102,17 +113,10 @@
             )
             intent.putExtra("tab_type", tab_type)
             intent.putExtra("ccaedit", 1)
-            startActivity(intent)
+            startActivity(intent)*/
         }
-        home = headermanager.getLogoButton()
-        home!!.setOnClickListener {
-            val `in` = Intent(
-                mContext,
-                HomeListAppCompatActivity::class.java
-            )
-            `in`.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)
-            startActivity(`in`)
-        }
+       // home = headermanager.getLogoButton()
+
         recycler_review!!.setHasFixedSize(true)
         recyclerViewLayoutManager = GridLayoutManager(mContext, 1)
         recycler_review!!.layoutManager = recyclerViewLayoutManager
@@ -145,270 +149,272 @@
     }
 
     private fun ccaReviewListAPI() {
-        val volleyWrapper = VolleyWrapper(URL_CCA_REVIEWS)
-        val name = arrayOf("access_token", "student_id", "cca_days_id")
-        val value = arrayOf<String>(
-            PreferenceManager.getAccessToken(mContext),
-            PreferenceManager.getStudIdForCCA(mContext),
-            PreferenceManager.getCCAItemId(mContext)
+        val body = CCAReviewRequestModel(
+            PreferenceManager.getStudentID(mContext)!!,
+            PreferenceManager.getCCAItemId(mContext)!!
         )
-        volleyWrapper.getResponsePOST(mContext, 11, name, value, object : ResponseListener() {
-            fun responseSuccess(successResponse: String) {
-                println("The response is$successResponse")
-                try {
-                    val obj = JSONObject(successResponse)
-                    val response_code = obj.getString(JTAG_RESPONSECODE)
-                    if (response_code.equals("200", ignoreCase = true)) {
-                        val secobj = obj.getJSONObject(JTAG_RESPONSE)
-                        val status_code = secobj.getString(JTAG_STATUSCODE)
-                        if (status_code.equals("303", ignoreCase = true)) {
-                            val data = secobj.optJSONArray("data")
-                            if (data.length() > 0) {
+        val token = PreferenceManager.getaccesstoken(mContext)
+        val call: Call<CCAReviewResponseModel> =
+            ApiClient.getClient.ccaReview(body, "Bearer $token")
+        progressBar.visibility = View.VISIBLE
+        call.enqueue(object : Callback<CCAReviewResponseModel> {
+            override fun onResponse(
+                call: Call<CCAReviewResponseModel>,
+                response: Response<CCAReviewResponseModel>
+            ) {
+                progressBar.visibility = View.GONE
+                if (response.isSuccessful) {
+                    if (response.body() != null) {
+                        if (response.body()!!.status.toString() == "100") {
+
+                            if (response.body()!!.data!!.size > 0) {
                                 for (j in weekList!!.indices) {
-                                    for (i in 0 until data.length()) {
-                                        val dataObject = data.getJSONObject(i)
-                                        if (dataObject.optString("day")
-                                                .equals(weekList!![j], ignoreCase = true)
-                                        ) {
-                                            mCCADetailModelArrayList!!.add(
-                                                addCCAReviewlist(
-                                                    dataObject
-                                                )
+                                    for (i in 0 until response.body()!!.data!!.size) {
+                                        if (response.body()!!.data!![i]!!.day.equals(
+                                                weekList!!.get(j)
+                                                    .toString(), ignoreCase = true
                                             )
+                                        ) {
+                                            addCCAReviewlist(response.body()!!.data!![i])
                                         }
                                     }
                                 }
-                                if (mCCADetailModelArrayList!!.size > 0) {
-                                    messageTxt!!.visibility = View.VISIBLE
-                                    val mCCAsActivityAdapter =
-                                        CCAfinalReviewEditAfterSubmissionAdapter(
-                                            mContext,
-                                            mCCADetailModelArrayList
-                                        )
-                                    recycler_review!!.adapter = mCCAsActivityAdapter
-                                }
+                                val mCCAsActivityAdapter = CCAfinalReviewEditAfterSubmissionAdapter(
+                                    mContext,
+                                    mCCADetailModelArrayList!!
+                                )
+                                recycler_review!!.setAdapter(
+                                    mCCAsActivityAdapter
+                                )
                             } else {
-                                messageTxt!!.visibility = View.GONE
+                                val mCCAsActivityAdapter = CCAfinalReviewEditAfterSubmissionAdapter(
+                                    mContext,
+                                    mCCADetailModelArrayList!!
+                                )
+                                recycler_review!!.setAdapter(
+                                    mCCAsActivityAdapter
+                                )
                                 Toast.makeText(
-                                    this@CCAsReviewAfterSubmissionNoDeleteActivity,
-                                    "No EAP available",
+                                    mContext,
+                                    "No ECA available",
                                     Toast.LENGTH_SHORT
                                 ).show()
                             }
-                        }
-                    } else if (response_code.equals("500", ignoreCase = true)) {
-                        AppUtils.showDialogAlertDismiss(
-                            mContext as Activity?,
-                            "Alert",
-                            getString(R.string.common_error),
-                            R.drawable.exclamationicon,
-                            R.drawable.round
-                        )
-                    } else if (response_code.equals("400", ignoreCase = true)) {
-                        AppUtils.getToken(mContext, object : GetTokenSuccess() {
-                            fun tokenrenewed() {}
-                        })
-                        ccaReviewListAPI()
-                    } else if (response_code.equals("401", ignoreCase = true)) {
-                        AppUtils.getToken(mContext, object : GetTokenSuccess() {
-                            fun tokenrenewed() {}
-                        })
-                        ccaReviewListAPI()
-                    } else if (response_code.equals("402", ignoreCase = true)) {
-                        AppUtils.getToken(mContext, object : GetTokenSuccess() {
-                            fun tokenrenewed() {}
-                        })
-                        ccaReviewListAPI()
+                        } else {
+                            ConstantFunctions.showDialogueWithOk(
+                                mContext,
+                                getString(R.string.common_error),
+                                "Alert"
+                            )
+                        }
                     } else {
-                        AppUtils.showDialogAlertDismiss(
-                            mContext as Activity?,
-                            "Alert",
+                        ConstantFunctions.showDialogueWithOk(
+                            mContext,
                             getString(R.string.common_error),
-                            R.drawable.exclamationicon,
-                            R.drawable.round
+                            "Alert"
                         )
                     }
-                } catch (ex: Exception) {
                 }
             }
 
-            fun responseFailure(failureResponse: String?) {
-                AppUtils.showDialogAlertDismiss(
-                    mContext as Activity?,
-                    "Alert",
+            override fun onFailure(call: Call<CCAReviewResponseModel>, t: Throwable) {
+                progressBar.visibility = View.GONE
+                ConstantFunctions.showDialogueWithOk(
+                    mContext,
                     getString(R.string.common_error),
-                    R.drawable.exclamationicon,
-                    R.drawable.round
+                    "Alert"
                 )
             }
+
+
         })
     }
 
-    private fun addCCAReviewlist(dataObject: JSONObject): CCAReviewAfterSubmissionModel {
+    private fun addCCAReviewlist(dataObject: CCAReviewResponseModel.Data) {
         val mCCAModel = CCAReviewAfterSubmissionModel()
-        mCCAModel.setDay(dataObject.optString("day"))
-        datestringChoice1 = ArrayList<CCAAttendanceModel>()
-        datestringChoice2 = ArrayList<CCAAttendanceModel>()
-        if (dataObject.has("choice1")) {
-            val choice1 = dataObject.optJSONObject("choice1")
+        mCCAModel.day = dataObject!!.day
+        datestringChoice1 = java.util.ArrayList()
+        datestringChoice2 = java.util.ArrayList()
+        if (dataObject.choice1 != null) {
+            val choice1  = dataObject.choice1
             if (choice1 != null) {
-                if (choice1.has("cca_item_name")) {
-                    mCCAModel.setChoice1(choice1.optString("cca_item_name"))
-                    if (choice1.has("cca_details_venue")) {
-                        mCCAModel.setVenue(choice1.optString("cca_details_venue"))
-                    } else {
-                        mCCAModel.setVenue("")
+                if (choice1.cca_item_name != null) {
+                    mCCAModel.choice1 = choice1.cca_item_name
+                    mCCAModel.cca_item_start_time = choice1.cca_item_start_time
+                    mCCAModel.cca_item_end_time = choice1.cca_item_end_time
+                    if (choice1.cca_item_description != null){
+                        mCCAModel.cca_item_description = choice1.cca_item_description
+//                        mCCAModel.cca_item_description_2 = ""
+                    }else{
+                        mCCAModel.cca_item_description = ""
+//                        mCCAModel.cca_item_description_2 = ""
                     }
-                    if (choice1.has("cca_item_description")) {
-                        mCCAModel.setCca_item_description(choice1.optString("cca_item_description"))
-                    } else {
-                        mCCAModel.setCca_item_description("")
+                    if (choice1.cca_venue != null){
+                        mCCAModel.venue = choice1.cca_venue
+//                        mCCAModel.venue2 = ""
+                    }else{
+                        mCCAModel.venue = ""
+//                        mCCAModel.venue2 = ""
                     }
-                    mCCAModel.setCca_item_start_time(choice1.optString("cca_item_start_time"))
-                    mCCAModel.setCca_item_end_time(choice1.optString("cca_item_end_time"))
-                    val absentDaysChoice1 = choice1.optJSONArray("absentDays")
-                    absentDaysChoice1Array = ArrayList()
-                    if (choice1.has("absentDays")) {
-                        for (i in 0 until absentDaysChoice1.length()) {
-                            absentDaysChoice1Array!!.add(absentDaysChoice1.optString(i))
+
+                    Log.e("des1",choice1.cca_item_description.toString())
+                    mCCAModel.venue2 = ""
+                    mCCAModel.cca_item_description_2 = ""
+                    val absentDaysChoice1 = choice1.absentDays
+                    absentDaysChoice1Array = java.util.ArrayList()
+                    if (choice1.absentDays !=null) {
+                        for (i in 0 until absentDaysChoice1!!.size) {
+                            absentDaysChoice1Array!!.add(absentDaysChoice1[i]!!)
                         }
                     }
-                    presentDaysChoice1Array = ArrayList()
-                    if (choice1.has("presentDays")) {
-                        val presentDaysChoice1 = choice1.optJSONArray("presentDays")
-                        for (i in 0 until presentDaysChoice1.length()) {
-                            presentDaysChoice1Array!!.add(presentDaysChoice1.optString(i))
+                    presentDaysChoice1Array = java.util.ArrayList()
+                    if (choice1.presentDays != null) {
+                        val presentDaysChoice1 = choice1.presentDays
+                        for (i in 0 until presentDaysChoice1.size) {
+                            presentDaysChoice1Array!!.add(presentDaysChoice1[i]!!)
                         }
                     }
-                    upcomingDaysChoice1Array = ArrayList()
-                    if (choice1.has("upcomingDays")) {
-                        val upcomingDaysChoice1 = choice1.optJSONArray("upcomingDays")
-                        for (i in 0 until upcomingDaysChoice1.length()) {
-                            upcomingDaysChoice1Array!!.add(upcomingDaysChoice1.optString(i))
+                    upcomingDaysChoice1Array = java.util.ArrayList()
+                    if (choice1.upcomingDays !=null) {
+                        val upcomingDaysChoice1 = choice1.upcomingDays
+                        for (i in 0 until upcomingDaysChoice1.size) {
+                            upcomingDaysChoice1Array!!.add(upcomingDaysChoice1[i]!!)
                         }
                     }
                 } else {
-                    mCCAModel.setChoice1("0")
+                    mCCAModel.choice1 = "0"
                 }
             } else {
-                mCCAModel.setChoice1("0")
+                mCCAModel.choice1 = "0"
             }
         } else {
-            mCCAModel.setChoice1("-1")
+            mCCAModel.choice1 = "-1"
         }
-        if (dataObject.has("choice2")) {
-            val choice2 = dataObject.optJSONObject("choice2")
+        if (dataObject.choice2 != null) {
+            val choice2 = dataObject.choice2
             if (choice2 != null) {
-                if (choice2.has("cca_item_name")) {
-                    mCCAModel.setChoice2(choice2.optString("cca_item_name"))
-                    if (choice2.has("cca_details_venue")) {
-                        mCCAModel.setVenue2(choice2.optString("cca_details_venue"))
-                    } else {
-                        mCCAModel.setVenue2("")
+                if (choice2.cca_item_name != null) {
+                    mCCAModel.choice2 = choice2.cca_item_name
+                    mCCAModel.cca_item_start_time = choice2.cca_item_start_time
+                    mCCAModel.cca_item_end_time = choice2.cca_item_end_time
+                    val absentDaysChoice2 = choice2.absentDays
+                    Log.e("des",choice2.cca_item_description.toString())
+                    if (choice2.cca_item_description != null){
+                        mCCAModel.cca_item_description_2 = choice2.cca_item_description
+//                        mCCAModel.cca_item_description = ""
+                    }else{
+                        mCCAModel.cca_item_description_2 = ""
+//                        mCCAModel.cca_item_description = ""
                     }
-                    if (choice2.has("cca_item_description")) {
-                        mCCAModel.setCca_item_description_2(choice2.optString("cca_item_description"))
-                    } else {
-                        mCCAModel.setCca_item_description_2("")
+                    if (choice2.cca_venue != null){
+                        mCCAModel.venue2 = choice2.cca_venue
+//                        mCCAModel.venue = ""
+                    }else{
+                        mCCAModel.venue2 = ""
+//                        mCCAModel.venue = ""
                     }
-                    mCCAModel.setCca_item_start_time(choice2.optString("cca_item_start_time"))
-                    mCCAModel.setCca_item_end_time(choice2.optString("cca_item_end_time"))
-                    val absentDaysChoice2 = choice2.optJSONArray("absentDays")
-                    if (choice2.has("absentDays")) {
-                        absentDaysChoice2Array = ArrayList()
-                        for (i in 0 until absentDaysChoice2.length()) {
-                            absentDaysChoice2Array!!.add(absentDaysChoice2.optString(i))
+
+                    if (choice2.absentDays != null) {
+                        absentDaysChoice2Array = java.util.ArrayList()
+                        for (i in 0 until absentDaysChoice2!!.size) {
+                            absentDaysChoice2Array!!.add(absentDaysChoice2[i]!!)
                         }
                     }
-                    presentDaysChoice2Array = ArrayList()
-                    val presentDaysChoice2 = choice2.optJSONArray("presentDays")
-                    if (choice2.has("presentDays")) {
-                        for (i in 0 until presentDaysChoice2.length()) {
-                            presentDaysChoice2Array!!.add(presentDaysChoice2.optString(i))
+                    presentDaysChoice2Array = java.util.ArrayList()
+                    val presentDaysChoice2 = choice2.presentDays
+                    if (choice2.presentDays != null) {
+                        for (i in 0 until presentDaysChoice2!!.size) {
+                            presentDaysChoice2Array!!.add(presentDaysChoice2[i]!!)
                         }
                     }
-                    upcomingDaysChoice2Array = ArrayList()
-                    val upcomingDaysChoice2 = choice2.optJSONArray("upcomingDays")
-                    if (choice2.has("upcomingDays")) {
-                        for (i in 0 until upcomingDaysChoice2.length()) {
-                            upcomingDaysChoice2Array!!.add(upcomingDaysChoice2.optString(i))
+                    upcomingDaysChoice2Array = java.util.ArrayList()
+                    val upcomingDaysChoice2 = choice2.upcomingDays
+                    if (choice2.upcomingDays != null) {
+                        for (i in 0 until upcomingDaysChoice2!!.size) {
+                            upcomingDaysChoice2Array!!.add(upcomingDaysChoice2[i]!!)
                         }
                     }
                 } else {
-                    mCCAModel.setChoice2("0")
+                    mCCAModel.choice2 = "0"
                 }
             } else {
-                mCCAModel.setChoice2("0")
+                mCCAModel.choice2 = "0"
             }
         } else {
-            mCCAModel.setChoice2("-1")
+            mCCAModel.choice2 = "-1"
         }
+
         if (absentDaysChoice1Array!!.size > 0) {
             for (i in absentDaysChoice1Array!!.indices) {
                 val mCCAAttendanceModel = CCAAttendanceModel()
-                mCCAAttendanceModel.setDateAttend(absentDaysChoice1Array!![i])
-                mCCAAttendanceModel.setStatusCCA("a")
+                mCCAAttendanceModel.dateAttend = absentDaysChoice1Array!![i]
+                mCCAAttendanceModel.statusCCA = "a"
                 datestringChoice1!!.add(mCCAAttendanceModel)
             }
         }
+
         if (upcomingDaysChoice1Array!!.size > 0) {
             for (i in upcomingDaysChoice1Array!!.indices) {
                 val mCCAAttendanceModel = CCAAttendanceModel()
-                mCCAAttendanceModel.setDateAttend(upcomingDaysChoice1Array!![i])
-                mCCAAttendanceModel.setStatusCCA("u")
+                mCCAAttendanceModel.dateAttend = upcomingDaysChoice1Array!![i]
+                mCCAAttendanceModel.statusCCA = "u"
                 datestringChoice1!!.add(mCCAAttendanceModel)
             }
         }
+
         if (presentDaysChoice1Array!!.size > 0) {
             for (i in presentDaysChoice1Array!!.indices) {
                 val mCCAAttendanceModel = CCAAttendanceModel()
-                mCCAAttendanceModel.setDateAttend(presentDaysChoice1Array!![i])
-                mCCAAttendanceModel.setStatusCCA("p")
+                mCCAAttendanceModel.dateAttend = presentDaysChoice1Array!![i]
+                mCCAAttendanceModel.statusCCA = "p"
                 datestringChoice1!!.add(mCCAAttendanceModel)
             }
         }
         if (absentDaysChoice2Array!!.size > 0) {
             for (i in absentDaysChoice2Array!!.indices) {
                 val mCCAAttendanceModel = CCAAttendanceModel()
-                mCCAAttendanceModel.setDateAttend(absentDaysChoice2Array!![i])
-                mCCAAttendanceModel.setStatusCCA("a")
+                mCCAAttendanceModel.dateAttend = absentDaysChoice2Array!![i]
+                mCCAAttendanceModel.statusCCA = "a"
                 datestringChoice2!!.add(mCCAAttendanceModel)
             }
         }
         if (upcomingDaysChoice2Array!!.size > 0) {
             for (i in upcomingDaysChoice2Array!!.indices) {
                 val mCCAAttendanceModel = CCAAttendanceModel()
-                mCCAAttendanceModel.setDateAttend(upcomingDaysChoice2Array!![i])
-                mCCAAttendanceModel.setStatusCCA("u")
+                mCCAAttendanceModel.dateAttend = upcomingDaysChoice2Array!![i]
+                mCCAAttendanceModel.statusCCA = "u"
                 datestringChoice2!!.add(mCCAAttendanceModel)
             }
         }
         if (presentDaysChoice2Array!!.size > 0) {
             for (i in presentDaysChoice2Array!!.indices) {
                 val mCCAAttendanceModel = CCAAttendanceModel()
-                mCCAAttendanceModel.setDateAttend(presentDaysChoice2Array!![i])
-                mCCAAttendanceModel.setStatusCCA("p")
+                mCCAAttendanceModel.dateAttend = presentDaysChoice2Array!![i]
+                mCCAAttendanceModel.statusCCA = "p"
                 datestringChoice2!!.add(mCCAAttendanceModel)
             }
         }
         if (datestringChoice1!!.size > 0) {
-            Collections.sort(datestringChoice1,
-                Comparator<Any?> { s1, s2 ->
-                    s1.getDateAttend().compareToIgnoreCase(s2.getDateAttend())
-                })
+            Collections.sort(datestringChoice1, object : Comparator<CCAAttendanceModel?> {
+
+                override fun compare(s1: CCAAttendanceModel?, s2: CCAAttendanceModel?): Int {
+                    return s1!!.dateAttend!!.compareTo(s2!!.dateAttend!!)
+                }
+            })
         }
         if (datestringChoice2!!.size > 0) {
-            Collections.sort(datestringChoice1,
-                Comparator<Any?> { s1, s2 ->
-                    s1.getDateAttend().compareToIgnoreCase(s2.getDateAttend())
-                })
+            Collections.sort(datestringChoice1, object : Comparator<CCAAttendanceModel?> {
+
+                override fun compare(s1: CCAAttendanceModel?, s2: CCAAttendanceModel?): Int {
+                    return s1!!.dateAttend!!.compareTo(s2!!.dateAttend!!)
+                }
+            })
         }
-        mCCAModel.setCalendarDaysChoice1(datestringChoice1)
-        mCCAModel.setCalendarDaysChoice2(datestringChoice2)
-        return mCCAModel
+        mCCAModel.calendarDaysChoice1 = datestringChoice1
+        mCCAModel.calendarDaysChoice2 = datestringChoice2
+
+        mCCADetailModelArrayList!!.add(mCCAModel)
+
     }
 
-    companion object {
-        var CCADetailModelArrayList: ArrayList<CCADetailModel>? = null
-    }
-}*/
+}
Index: app/src/main/java/com/nas/alreem/fragment/permission_slip/PermissionSlipFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.nas.alreem.fragment.permission_slip\n\nimport android.app.Dialog\nimport android.content.Context\nimport android.graphics.Color\nimport android.graphics.drawable.ColorDrawable\nimport android.os.Build\nimport android.os.Bundle\nimport android.util.Log\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.view.Window\nimport android.view.animation.Animation\nimport android.view.animation.AnimationUtils\nimport android.widget.*\nimport androidx.fragment.app.Fragment\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport androidx.recyclerview.widget.RecyclerView\nimport com.bumptech.glide.Glide\nimport com.bumptech.glide.load.engine.DiskCacheStrategy\nimport com.bumptech.glide.load.resource.bitmap.CircleCrop\nimport com.nas.alreem.R\nimport com.nas.alreem.activity.payments.adapter.StudentListAdapter\nimport com.nas.alreem.activity.payments.model.StudentList\nimport com.nas.alreem.activity.payments.model.StudentListModel\nimport com.nas.alreem.constants.ConstantFunctions\nimport com.nas.alreem.constants.OnItemClickListener\nimport com.nas.alreem.constants.PreferenceManager\nimport com.nas.alreem.constants.addOnItemClickListener\nimport com.nas.alreem.fragment.permission_slip.adapter.FormslistAdapter\nimport com.nas.alreem.fragment.permission_slip.model.PermissionSlipListApiModel\nimport com.nas.alreem.fragment.permission_slip.model.PermissionSlipListModel\nimport com.nas.alreem.fragment.permission_slip.model.PermissionSlipModel\nimport com.nas.alreem.rest.ApiClient\nimport retrofit2.Call\nimport retrofit2.Callback\nimport retrofit2.Response\n\nclass PermissionSlipFragment : Fragment(){\n    lateinit var progressDialog: RelativeLayout\n    lateinit var titleTextView: TextView\n    lateinit var mContext: Context\n    lateinit var sharedprefs: PreferenceManager\n    lateinit var studentSpinner: LinearLayout\n    var studentListArrayList = ArrayList<StudentList>()\n    lateinit var formslist:ArrayList<PermissionSlipListModel>\n    lateinit var studImg: ImageView\n    lateinit var studentName: String\n    lateinit var studentId: String\n    lateinit var studentImg: String\n    lateinit var studentClass: String\n    lateinit var studentNameTxt: TextView\n    lateinit var forms_recycler: RecyclerView\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        return inflater.inflate(R.layout.fragment_permission_slip, container, false)\n    }\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        sharedprefs = PreferenceManager()\n        mContext = requireContext()\n\n        initializeUI()\n        var internetCheck = ConstantFunctions.internetCheck(mContext)\n        if (internetCheck) {\n            callStudentListApi()\n\n        } else {\n          //  InternetCheckClass.showSuccessInternetAlert(mContext)\n        }\n    }\n    private fun initializeUI(){\n        mContext=requireContext()\n        titleTextView = view!!.findViewById(R.id.titleTextView) as TextView\n        titleTextView.text = \"Permission Slips\"\n        formslist= ArrayList()\n        studentSpinner = view!!.findViewById<LinearLayout>(R.id.studentSpinner)\n        studImg = view!!.findViewById<ImageView>(R.id.studImg)\n        studentNameTxt = view!!.findViewById<TextView>(R.id.studentName)\n        forms_recycler=view!!.findViewById(R.id.forms_rec)\n        progressDialog = view!!.findViewById(R.id.progressDialog)\n        val aniRotate: Animation =\n            AnimationUtils.loadAnimation(mContext, R.anim.linear_interpolator)\n        progressDialog.startAnimation(aniRotate)\n\n\n\n        studentSpinner.setOnClickListener(object : View.OnClickListener {\n            override fun onClick(v: View?) {\n                showStudentList(mContext,studentListArrayList)\n\n            }\n        })\n    }\n    fun showStudentList(context: Context ,mStudentList : ArrayList<StudentList>)\n    {\n        val dialog = Dialog(context)\n        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE)\n        dialog.window!!.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))\n        dialog.setCancelable(false)\n        dialog.setContentView(R.layout.dialogue_student_list)\n        var iconImageView = dialog.findViewById(R.id.iconImageView) as ImageView\n        var btn_dismiss = dialog.findViewById(R.id.btn_dismiss) as Button\n        var studentListRecycler = dialog.findViewById(R.id.studentListRecycler) as RecyclerView\n        iconImageView.setImageResource(R.drawable.boy)\n        //if(mSocialMediaArray.get())\n        val sdk = Build.VERSION.SDK_INT\n        if (sdk < Build.VERSION_CODES.JELLY_BEAN) {\n            btn_dismiss.setBackgroundDrawable(\n                mContext.resources.getDrawable(R.drawable.button_new)\n            )\n        } else {\n            btn_dismiss.background = mContext.resources.getDrawable(R.drawable.button_new)\n        }\n\n        studentListRecycler.setHasFixedSize(true)\n        val llm = LinearLayoutManager(mContext)\n        llm.orientation = LinearLayoutManager.VERTICAL\n        studentListRecycler.layoutManager = llm\n        if(mStudentList.size>0)\n        {\n            val studentAdapter = StudentListAdapter(mContext,mStudentList)\n            studentListRecycler.adapter = studentAdapter\n        }\n\n        btn_dismiss.setOnClickListener()\n        {\n            dialog.dismiss()\n        }\n        studentListRecycler.addOnItemClickListener(object: OnItemClickListener {\n            override fun onItemClicked(position: Int, view: View) {\n                // Your logic\n                progressDialog.visibility=View.VISIBLE\n                val aniRotate: Animation =\n                    AnimationUtils.loadAnimation(mContext, R.anim.linear_interpolator)\n                progressDialog.startAnimation(aniRotate)\n\n                studentName=studentListArrayList.get(position).name\n                studentImg=studentListArrayList.get(position).photo\n                studentId=studentListArrayList.get(position).id\n                studentClass=studentListArrayList.get(position).section\n                PreferenceManager.setStudentID(mContext,studentId)\n                PreferenceManager.setStudentName(mContext,studentName)\n                PreferenceManager.setStudentPhoto(mContext,studentImg)\n                PreferenceManager.setStudentClass(mContext,studentClass)\n                Log.e(\"studidclick\", PreferenceManager.getStudentID(mContext).toString())\n                studentNameTxt.text=studentName\n                if(!studentImg.equals(\"\"))\n                {\n                    Glide.with(mContext) //1\n                        .load(studentImg)\n                        .placeholder(R.drawable.student)\n                        .error(R.drawable.student)\n                        .skipMemoryCache(true) //2\n                        .diskCacheStrategy(DiskCacheStrategy.NONE) //3\n                        .transform(CircleCrop()) //4\n                        .into(studImg)\n                }\n                else\n                {\n                    studImg.setImageResource(R.drawable.student)\n                }\n                progressDialog.visibility = View.VISIBLE\n                formslistApi()\n                Log.e(\"TEST\",\"call 2\")\n\n                //  Toast.makeText(activity, mStudentList.get(position).name, Toast.LENGTH_SHORT).show()\n                dialog.dismiss()\n            }\n        })\n        dialog.show()\n    }\n    private fun formslistApi(){\n        progressDialog.visibility = View.VISIBLE\n        formslist=ArrayList()\n        val token = PreferenceManager.getaccesstoken(mContext)\n        Log.e(\"stid\", PreferenceManager.getStudentID(mContext).toString())\n        val list_permissionSlip= PermissionSlipListApiModel(\"0\",\"20\",PreferenceManager.getStudentID(mContext).toString())\n        val call: Call<PermissionSlipModel> = ApiClient.getClient.permissnslipList(list_permissionSlip,\"Bearer \"+token)\n        call.enqueue(object : Callback<PermissionSlipModel>{\n            override fun onFailure(call: Call<PermissionSlipModel>, t: Throwable) {\n                progressDialog.visibility = View.GONE\n                Log.e(\"Error\", t.localizedMessage)\n            }\n            override fun onResponse(call: Call<PermissionSlipModel>, response: Response<PermissionSlipModel>) {\n                progressDialog.visibility = View.GONE\n                if (response.body()!!.status==100)\n                {\n                    formslist.addAll(response.body()!!.responseArray.request)\n                    if (response.body()!!.responseArray.request.size > 0){\n                        Log.e(\"notempty\",\"true\")\n                        forms_recycler.layoutManager=LinearLayoutManager(mContext)\n                        var forms_adapter= FormslistAdapter(mContext,formslist)\n                        forms_recycler.adapter=forms_adapter\n                    }else{\n                        Log.e(\"empty\",\"true\")\n                        formslist=ArrayList()\n                        forms_recycler.layoutManager=LinearLayoutManager(mContext)\n                        var forms_adapter= FormslistAdapter(mContext,formslist)\n                        forms_recycler.adapter=forms_adapter\n                        //showerror(mContext,\"No Data Found\",\"Alert\")\n                        Toast.makeText(mContext, \"No Permission Slips Found\", Toast.LENGTH_SHORT).show()\n                    }\n\n\n                }/*else if(response.body()!!.status.equals(\"116\"))\n                {\n                    var internetCheck = InternetCheckClass.isInternetAvailable(com.mobatia.bisad.fragment.home.mContext)\n                    if (internetCheck){\n                        AccessTokenClass.getAccessToken(com.mobatia.bisad.fragment.home.mContext)\n                        Log.e(\"TEST\",\"call 3\")\n\n                        formslistApi()\n                    }else{\n                        InternetCheckClass.showSuccessInternetAlert(com.mobatia.bisad.fragment.home.mContext)\n                    }\n\n                }*/\n                else {\n                    if (response.body()!!.status == 132) {\n                        formslist=ArrayList()\n                        forms_recycler.layoutManager=LinearLayoutManager(mContext)\n                        var forms_adapter= FormslistAdapter(mContext,formslist)\n                        forms_recycler.adapter=forms_adapter\n                        Toast.makeText(mContext, \"No Permission Slips Found\", Toast.LENGTH_SHORT).show()\n                        //validation check error\n                    }\n                }\n            }\n        })\n    }\n    fun callStudentListApi()\n    {\n        progressDialog.visibility = View.VISIBLE\n        val token = PreferenceManager.getaccesstoken(mContext)\n        val call: Call<StudentListModel> = ApiClient.getClient.studentList(\"Bearer \"+token)\n        call.enqueue(object : Callback<StudentListModel> {\n            override fun onFailure(call: Call<StudentListModel>, t: Throwable) {\n                Log.e(\"Error\", t.localizedMessage)\n                progressDialog.visibility = View.GONE\n            }\n            override fun onResponse(call: Call<StudentListModel>, response: Response<StudentListModel>) {\n                progressDialog.visibility = View.GONE\n                //val arraySize :Int = response.body()!!.responseArray.studentList.size\n                if (response.body()!!.status==100)\n                {\n                    studentListArrayList.addAll(response.body()!!.responseArray.studentList)\n                    if (PreferenceManager.getStudentID(mContext).equals(\"\"))\n                    {\n                        studentName=studentListArrayList.get(0).name\n                        studentImg=studentListArrayList.get(0).photo\n                        studentId=studentListArrayList.get(0).id\n                        studentClass=studentListArrayList.get(0).section\n                        PreferenceManager.setStudentID(mContext,studentId)\n                        PreferenceManager.setStudentName(mContext,studentName)\n                        PreferenceManager.setStudentPhoto(mContext,studentImg)\n                        PreferenceManager.setStudentClass(mContext,studentClass)\n                        studentNameTxt.text=studentName\n                        if(!studentImg.equals(\"\"))\n                        {\n                            Glide.with(mContext) //1\n                                .load(studentImg)\n                                .placeholder(R.drawable.student)\n                                .error(R.drawable.student)\n                                .skipMemoryCache(true) //2\n                                .diskCacheStrategy(DiskCacheStrategy.NONE) //3\n                                .transform(CircleCrop()) //4\n                                .into(studImg)\n                        }\n                        else{\n                            studImg.setImageResource(R.drawable.student)\n                        }\n\n                    }\n                    else{\n                        studentName= PreferenceManager.getStudentName(mContext)!!\n                        studentImg= PreferenceManager.getStudentPhoto(mContext)!!\n                        studentId= PreferenceManager.getStudentID(mContext)!!\n                        studentClass= PreferenceManager.getStudentClass(mContext)!!\n                        studentNameTxt.text=studentName\n                        if(!studentImg.equals(\"\"))\n                        {\n                            Glide.with(mContext) //1\n                                .load(studentImg)\n                                .placeholder(R.drawable.student)\n                                .error(R.drawable.student)\n                                .skipMemoryCache(true) //2\n                                .diskCacheStrategy(DiskCacheStrategy.NONE) //3\n                                .transform(CircleCrop()) //4\n                                .into(studImg)\n                        }\n                        else{\n                            studImg.setImageResource(R.drawable.student)\n                        }\n                    }\n\n                    formslistApi()\n//                    var internetCheck = InternetCheckClass.isInternetAvailable(nContext)\n//                    if (internetCheck)\n//                    {\n//                        //callStudentLeaveInfo()\n//                    }\n//                    else{\n//                        InternetCheckClass.showSuccessInternetAlert(com.mobatia.bisad.fragment.home.mContext)\n//                    }\n\n                    //callStudentInfoApi()\n                }\n\n\n            }\n\n        })\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/nas/alreem/fragment/permission_slip/PermissionSlipFragment.kt b/app/src/main/java/com/nas/alreem/fragment/permission_slip/PermissionSlipFragment.kt
--- a/app/src/main/java/com/nas/alreem/fragment/permission_slip/PermissionSlipFragment.kt	(revision 10a3cbb13b5fc05b1815351c42577261066dfaa1)
+++ b/app/src/main/java/com/nas/alreem/fragment/permission_slip/PermissionSlipFragment.kt	(date 1689563756723)
@@ -76,7 +76,7 @@
         mContext=requireContext()
         titleTextView = view!!.findViewById(R.id.titleTextView) as TextView
         titleTextView.text = "Permission Slips"
-        formslist= ArrayList()
+        //formslist= ArrayList()
         studentSpinner = view!!.findViewById<LinearLayout>(R.id.studentSpinner)
         studImg = view!!.findViewById<ImageView>(R.id.studImg)
         studentNameTxt = view!!.findViewById<TextView>(R.id.studentName)
@@ -189,6 +189,7 @@
                 progressDialog.visibility = View.GONE
                 if (response.body()!!.status==100)
                 {
+                    formslist=ArrayList()
                     formslist.addAll(response.body()!!.responseArray.request)
                     if (response.body()!!.responseArray.request.size > 0){
                         Log.e("notempty","true")
@@ -315,5 +316,28 @@
 
         })
     }
+    override fun onResume() {
+        super.onResume()
+        Log.e("TEST","call 1")
+        formslistApi()
+        studentNameTxt.text = PreferenceManager.getStudentName(mContext)
+        studentId= PreferenceManager.getStudentID(mContext).toString()
+        studentImg= PreferenceManager.getStudentPhoto(mContext)!!
+        if(!studentImg.equals(""))
+        {
+            Glide.with(mContext) //1
+                .load(studentImg)
+                .placeholder(R.drawable.student)
+                .error(R.drawable.student)
+                .skipMemoryCache(true) //2
+                .diskCacheStrategy(DiskCacheStrategy.NONE) //3
+                .transform(CircleCrop()) //4
+                .into(studImg)
+        }
+        else
+        {
+            studImg.setImageResource(R.drawable.student)
+        }
 
+    }
 }
\ No newline at end of file
Index: app/src/main/res/layout/activity_cca_no_edit_delete.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:background=\"@color/white\">\n\n    <RelativeLayout\n        android:id=\"@+id/relativeHeader\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:visibility=\"visible\" />\n\n    <com.nas.alreem.commonviews.CustomFontSansProTextBlackSemiBold\n        android:id=\"@+id/textViewCCAaItem\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_below=\"@+id/relativeHeader\"\n        android:text=\"CCA Review\"\n        android:layout_toLeftOf=\"@+id/editCcca\"\n        android:layout_marginLeft=\"5dp\"\n        android:textColor=\"#ff000000\"\n        android:textSize=\"16sp\" />\n    <RelativeLayout\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_alignBottom=\"@+id/textViewCCAaItem\"\n        android:layout_alignParentRight=\"true\"\n        android:layout_marginRight=\"5dp\"\n        android:id=\"@+id/editCcca\"\n        >\n        <ImageView\n            android:id=\"@+id/editImg\"\n            android:layout_width=\"30dp\"\n            android:layout_height=\"30dp\"\n            android:layout_centerHorizontal=\"true\"\n            android:visibility=\"gone\"\n            android:src=\"@drawable/edit_new\"/>\n\n        <com.nas.alreem.commonviews.CustomTextViewRegular\n            android:layout_width=\"9dp\"\n            android:layout_height=\"0dp\"\n            android:layout_below=\"@+id/editImg\"\n            android:layout_centerHorizontal=\"true\"\n            android:gravity=\"center\"\n            android:text=\"Edit\"\n            android:visibility=\"gone\"\n            android:textColor=\"@color/black\"\n            android:textSize=\"12sp\" />\n\n    </RelativeLayout>\n\n    <androidx.recyclerview.widget.RecyclerView\n        android:id=\"@+id/recycler_view_cca\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:layout_below=\"@+id/textViewCCAaItem\"\n        android:layout_marginBottom=\"5dp\"\n        android:layout_above=\"@+id/messageTxt\"\n        android:layout_marginTop=\"5dp\"\n        android:background=\"@color/white\"\n        android:overScrollMode=\"never\"\n        android:scrollbars=\"vertical\" />\n    <RelativeLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:id=\"@+id/messageTxt\"\n        android:layout_above=\"@+id/bannerImg\"\n        android:background=\"@color/cal_row_4\" >\n        <com.nas.alreem.commonviews.CustomTextViewRegular\n            android:id=\"@+id/msgTxt\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:gravity=\"center\"\n            android:textSize=\"14dp\"\n            android:textColor=\"@color/white\"\n            android:text=\"Your options are submitted &amp; waiting for approval\" />\n    </RelativeLayout>\n\n    <ImageView\n        android:id=\"@+id/bannerImg\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_alignParentBottom=\"true\"\n        android:visibility=\"invisible\"\n        android:src=\"@drawable/cca_review_banner_edit\" />\n</RelativeLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/activity_cca_no_edit_delete.xml b/app/src/main/res/layout/activity_cca_no_edit_delete.xml
--- a/app/src/main/res/layout/activity_cca_no_edit_delete.xml	(revision 10a3cbb13b5fc05b1815351c42577261066dfaa1)
+++ b/app/src/main/res/layout/activity_cca_no_edit_delete.xml	(date 1689561835128)
@@ -2,13 +2,86 @@
 <RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
     android:background="@color/white">
 
     <RelativeLayout
         android:id="@+id/relativeHeader"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
-        android:visibility="visible" />
+        android:layout_alignParentTop="true" >
+        <ImageView
+            android:id="@+id/relative_logo_header"
+            android:layout_width="match_parent"
+            android:src="@drawable/titlebar"
+            android:layout_height="wrap_content" />
+        <ImageView
+            android:id="@+id/logoClickImgView"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_centerHorizontal="true"
+            android:layout_alignTop="@+id/relative_logo_header"
+            android:background="@drawable/logotransperent"
+            android:layout_above="@+id/heading" />
+
+        <RelativeLayout
+            android:id="@+id/bottomRel"
+            android:layout_width="match_parent"
+            android:layout_above="@+id/heading"
+            android:layout_alignParentTop="true"
+            android:layout_height="wrap_content" >
+
+
+            <RelativeLayout
+                android:id="@+id/backRelative"
+                android:layout_width="45dp"
+                android:layout_centerVertical="true"
+                android:layout_height="45dp">
+
+                <ImageView
+                    android:id="@+id/btn_left"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_alignParentLeft="true"
+                    android:layout_centerVertical="true"
+                    android:background="@drawable/back"
+                    android:visibility="visible" />
+            </RelativeLayout>
+
+            <ImageView
+                android:id="@+id/btn_right"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_alignParentRight="true"
+                android:layout_centerVertical="true"
+                android:visibility="invisible"/>
+        </RelativeLayout>
+
+        <com.nas.alreem.commonviews.CustomFontDJ5TextWhite
+            android:id="@+id/heading"
+            android:layout_width="match_parent"
+            android:layout_height="40dp"
+            android:layout_below="@id/relative_logo_header"
+            android:background="@color/split_bg"
+            android:gravity="center"
+            android:paddingTop="5dp"
+            android:paddingBottom="5dp"
+            android:text="Enrichment Options"
+            android:textColor="@color/white"
+            android:textSize="17dp" />
+        <ImageView
+            android:id="@+id/btn_info"
+            android:layout_width="35dp"
+            android:layout_height="35dp"
+            android:layout_alignParentRight="true"
+            android:layout_marginBottom="8dp"
+            android:layout_marginRight="2dp"
+            android:layout_centerVertical="true"
+            android:layout_alignBottom="@+id/heading"
+            android:background="@drawable/infoptaicon"
+            android:visibility="invisible"/>
+
+    </RelativeLayout>
 
     <com.nas.alreem.commonviews.CustomFontSansProTextBlackSemiBold
         android:id="@+id/textViewCCAaItem"
@@ -83,4 +156,15 @@
         android:layout_alignParentBottom="true"
         android:visibility="invisible"
         android:src="@drawable/cca_review_banner_edit" />
+    <ProgressBar
+        android:id="@+id/progress"
+        android:layout_width="40dp"
+        android:layout_height="40dp"
+        android:layout_centerInParent="true"
+        android:indeterminateDrawable="@anim/customspinner"
+        android:visibility="gone"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent" />
 </RelativeLayout>
\ No newline at end of file
Index: app/src/main/java/com/nas/alreem/activity/cca/adapter/CCAsChoiceListActivityAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.nas.alreem.activity.cca.adapter\n\nimport android.content.Context\nimport android.util.Log\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.Button\nimport android.widget.ImageView\nimport android.widget.RelativeLayout\nimport android.widget.TextView\nimport androidx.recyclerview.widget.RecyclerView\nimport com.nas.alreem.R\nimport com.nas.alreem.activity.cca.model.CCADetailModel\nimport com.nas.alreem.activity.cca.model.CCAchoiceModel\nimport com.nas.alreem.activity.cca.model.WeekListModel\nimport com.nas.alreem.appcontroller.AppController\nimport com.nas.alreem.constants.ConstantFunctions\nimport java.text.ParseException\nimport java.text.SimpleDateFormat\nimport java.util.*\nimport kotlin.collections.ArrayList\n\nclass CCAsChoiceListActivityAdapter :\n    RecyclerView.Adapter<CCAsChoiceListActivityAdapter.MyViewHolder> {\n    //    ArrayList<String> mSocialMediaModels;\n    var mCCAmodelArrayList: ArrayList<CCAchoiceModel>\n    var mContext: Context\n    var dayPosition = 0\n    var choicePosition = 0\n    var ccaDetailpos = 0\n    var msgRelative: RelativeLayout? = null\n    var weekList: ArrayList<WeekListModel>? = null\n    var ccaDetailModelArrayList: ArrayList<CCADetailModel>? = null\n    var submitBtn: Button? = null\n    var nextBtn: Button? = null\n    var filled: Boolean? = null\n    var recyclerWeek: RecyclerView? = null\n\n    constructor(\n        mContext: Context,\n        mCCAmodelArrayList: ArrayList<CCAchoiceModel>,\n        mdayPosition: Int,\n        mWeekList: ArrayList<WeekListModel>?,\n        mChoicePosition: Int,\n        recyclerWeek: RecyclerView?,\n        ccaDetailModelArrayList: ArrayList<CCADetailModel>?,\n        submitBtn: Button?,\n        nextBtn: Button?,\n        filled: Boolean?,\n        ccaDetailpos: Int,\n        msgRelative: RelativeLayout?\n    ) {\n        this.mContext = mContext\n        this.mCCAmodelArrayList = mCCAmodelArrayList\n        dayPosition = mdayPosition\n        weekList = mWeekList\n        choicePosition = mChoicePosition\n        this.recyclerWeek = recyclerWeek\n        this.ccaDetailModelArrayList = ccaDetailModelArrayList\n        this.submitBtn = submitBtn\n        this.nextBtn = nextBtn\n        this.filled = filled\n        this.ccaDetailpos = ccaDetailpos\n        this.msgRelative = msgRelative\n    }\n\n    constructor(mContext: Context, mCCAmodelArrayList: ArrayList<CCAchoiceModel>) {\n        this.mContext = mContext\n        this.mCCAmodelArrayList = mCCAmodelArrayList\n    }\n\n    constructor(\n        mContext: Context,\n        mCCAmodelArrayList: ArrayList<CCAchoiceModel>,\n        mdayPosition: Int,\n        mWeekList: ArrayList<WeekListModel>?\n    ) {\n        this.mContext = mContext\n        this.mCCAmodelArrayList = mCCAmodelArrayList\n        dayPosition = mdayPosition\n        weekList = mWeekList\n    }\n\n    constructor(\n        mContext: Context,\n        mCCAmodelArrayList: ArrayList<CCAchoiceModel>,\n        mdayPosition: Int,\n        mWeekList: ArrayList<WeekListModel>?,\n        mChoicePosition: Int,\n        recyclerWeek: RecyclerView?\n    ) {\n        this.mContext = mContext\n        this.mCCAmodelArrayList = mCCAmodelArrayList\n        dayPosition = mdayPosition\n        weekList = mWeekList\n        choicePosition = mChoicePosition\n        this.recyclerWeek = recyclerWeek\n    }\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MyViewHolder {\n        val itemView: View = LayoutInflater.from(parent.context)\n            .inflate(R.layout.adapter_ccalist_activity_new, parent, false)\n        return MyViewHolder(itemView)\n    }\n\n    override fun onBindViewHolder(holder: MyViewHolder, position: Int) {\n        holder.confirmationImageview.visibility = View.VISIBLE\n        if (mCCAmodelArrayList[position].venue != null) {\n            if (mCCAmodelArrayList[position].venue\n                    .equals(\"0\") || mCCAmodelArrayList[position].venue\n                    .equals(\"\")\n            ) {\n                holder.textViewCCAVenue.visibility = View.GONE\n            } else {\n                holder.textViewCCAVenue.text =\n                    java.lang.String.format(\"Location: %s\", mCCAmodelArrayList[position].venue)\n                holder.textViewCCAVenue.visibility = View.VISIBLE\n            }\n        } else {\n            holder.textViewCCAVenue.visibility = View.GONE\n        }\n\n//\n//        System.out.println(\"DESC TEST\"+mCCAmodelArrayList.get(position).getDescription());\n//\n        Log.e(\"descptn\",mCCAmodelArrayList[position].description.toString())\n        if (mCCAmodelArrayList[position].description != null) {\n            if (mCCAmodelArrayList[position].description\n                    .equals(\"0\") || mCCAmodelArrayList[position].description\n                    .equals(\"\")\n            ) {\n                holder.descriptionRel.visibility = View.GONE\n            } else {\n                holder.descriptionRel.visibility = View.VISIBLE\n                holder.descriptionTxt.text =\n                    java.lang.String.format(\n                        \"Description : %s\",\n                        mCCAmodelArrayList[position].description\n                    )\n                if (mCCAmodelArrayList[position].description!!.length > 22) {\n                    holder.readMoreTxt.visibility = View.VISIBLE\n                } else {\n                    holder.readMoreTxt.visibility = View.GONE\n                }\n                holder.readMoreTxt.setOnClickListener {\n                    ConstantFunctions.Companion.showDialogueWithOk(\n                        mContext,\n                        mCCAmodelArrayList[position].description!!,\n                        \"Description\"\n                    )\n                }\n            }\n        } else {\n            holder.descriptionRel.visibility = View.GONE\n        }\n        //        //   Log.e(\"DESC ADA\",mCCAmodelArrayList.get(position).getDescription());\n//\n//        Integer count=holder.descriptionTxt.getLineCount();\n//        Log.e(\"LINE COUNT\", String.valueOf(count));\n//\n//\n        if (choicePosition == 0) {\n            Log.e(\"choicePosition\", choicePosition.toString())\n            Log.e(\"status\", mCCAmodelArrayList[position].status.toString())\n            Log.e(\"disableCccaiem\", mCCAmodelArrayList[position].disableCccaiem.toString())\n\n            if (mCCAmodelArrayList[position].disableCccaiem!!) {\n                holder.confirmationImageview.setBackgroundResource(R.drawable.disablecrossicon)\n                holder.listTxtView.setTextColor(mContext.resources.getColor(R.color.grey))\n            } else if (mCCAmodelArrayList[position].status.equals(\"0\")) {\n                holder.confirmationImageview.setBackgroundResource(R.drawable.close_icon_with_white)\n                holder.listTxtView.setTextColor(mContext.resources.getColor(R.color.black))\n            } else {\n                holder.confirmationImageview.setBackgroundResource(R.drawable.participatingsmallicon_new)\n                holder.listTxtView.setTextColor(mContext.resources.getColor(R.color.black))\n                AppController.weekList.get(dayPosition).choiceStatus=(\"1\")\n                ccaDetailModelArrayList!![ccaDetailpos].choice1=(mCCAmodelArrayList[position].cca_item_name)\n                ccaDetailModelArrayList!![ccaDetailpos].choice1Id=(mCCAmodelArrayList[position].cca_details_id)\n                val mCCAsWeekListAdapter =\n                    CCAsWeekListAdapter(mContext, AppController.weekList, dayPosition, msgRelative)\n                mCCAsWeekListAdapter.notifyDataSetChanged()\n                recyclerWeek!!.adapter = mCCAsWeekListAdapter\n            }\n        } else {\n            System.out.println(\n                \"disable2::\" + mCCAmodelArrayList[position].disableCccaiem.toString() + \" @ \" + position\n            )\n            System.out.println(\n                \"disable2::\" + mCCAmodelArrayList[position].disableCccaiem.toString() + \" @dayPosition: \" + dayPosition\n            )\n            if (mCCAmodelArrayList[position].disableCccaiem!!) {\n                holder.confirmationImageview.setBackgroundResource(R.drawable.disablecrossicon)\n                holder.listTxtView.setTextColor(mContext.resources.getColor(R.color.grey))\n            } else if (mCCAmodelArrayList[position].status.equals(\"0\")) {\n                holder.confirmationImageview.setBackgroundResource(R.drawable.close_icon_with_white)\n                holder.listTxtView.setTextColor(mContext.resources.getColor(R.color.black))\n            } else {\n                holder.confirmationImageview.setBackgroundResource(R.drawable.participatingsmallicon_new)\n                AppController.weekList.get(dayPosition).choiceStatus1=(\"1\")\n                ccaDetailModelArrayList!![ccaDetailpos].choice2=(mCCAmodelArrayList[position].cca_item_name)\n                ccaDetailModelArrayList!![ccaDetailpos].choice2Id=(mCCAmodelArrayList[position].cca_details_id)\n                val mCCAsWeekListAdapter =\n                    CCAsWeekListAdapter(mContext, AppController.weekList, dayPosition, msgRelative)\n                mCCAsWeekListAdapter.notifyDataSetChanged()\n                recyclerWeek!!.adapter = mCCAsWeekListAdapter\n            }\n        }\n        for (j in 0 until AppController.weekList.size) {\n            if (AppController.weekList.get(j).choiceStatus\n                    .equals(\"0\") || AppController.weekList.get(j).choiceStatus1\n                    .equals(\"0\")\n            ) {\n                filled = false\n                break\n            } else {\n                filled = true\n            }\n            if (!filled!!) {\n                break\n            }\n        }\n        if (filled!!) {\n            submitBtn!!.background.alpha = 255\n            submitBtn!!.visibility = View.VISIBLE\n            nextBtn!!.background.alpha = 255\n            nextBtn!!.visibility = View.GONE\n        } else {\n            submitBtn!!.background.alpha = 150\n            submitBtn!!.visibility = View.INVISIBLE\n            nextBtn!!.background.alpha = 255\n            nextBtn!!.visibility = View.VISIBLE\n        }\n        holder.listTxtView.setText(mCCAmodelArrayList[position].cca_item_name)\n        if (mCCAmodelArrayList[position].cca_item_start_time != null && mCCAmodelArrayList[position].cca_item_end_time != null) {\n            holder.textViewCCAaDateItem.visibility = View.VISIBLE\n            holder.textViewCCAaDateItem.text = \"(\" + convertTimeToAMPM(\n                mCCAmodelArrayList[position].cca_item_start_time\n            ) + \" - \" + convertTimeToAMPM(\n                mCCAmodelArrayList[position].cca_item_end_time\n            ) + \")\"\n        } else if (mCCAmodelArrayList[position].cca_item_start_time != null) {\n            holder.textViewCCAaDateItem.visibility = View.VISIBLE\n            holder.textViewCCAaDateItem.text = \"(\" + convertTimeToAMPM(\n                mCCAmodelArrayList[position].cca_item_start_time\n            ) + \")\"\n        } else if (mCCAmodelArrayList[position].cca_item_end_time != null) {\n            holder.textViewCCAaDateItem.visibility = View.VISIBLE\n            holder.textViewCCAaDateItem.text = \"(\" + convertTimeToAMPM(\n                mCCAmodelArrayList[position].cca_item_end_time\n            ) + \")\"\n        } else {\n            holder.textViewCCAaDateItem.visibility = View.GONE\n        }\n\n    }\n\n    override fun getItemCount(): Int {\n        return mCCAmodelArrayList.size\n    }\n\n    inner class MyViewHolder(view: View) : RecyclerView.ViewHolder(view) {\n        var listTxtView: TextView\n        var textViewCCAaDateItem: TextView\n        var confirmationImageview: ImageView\n        var textViewCCAVenue: TextView\n        var descriptionTxt: TextView\n        var readMoreTxt: TextView\n        var descriptionRel: RelativeLayout\n\n        init {\n            textViewCCAaDateItem = view.findViewById<View>(R.id.textViewCCAaDateItem) as TextView\n            listTxtView = view.findViewById<View>(R.id.textViewCCAaItem) as TextView\n            textViewCCAVenue = view.findViewById<View>(R.id.textViewCCAVenue) as TextView\n            descriptionTxt = view.findViewById<View>(R.id.descriptionTxt) as TextView\n            readMoreTxt = view.findViewById<View>(R.id.readMoreTxt) as TextView\n            confirmationImageview = view.findViewById<View>(R.id.confirmationImageview) as ImageView\n            descriptionRel = view.findViewById<View>(R.id.descriptionRel) as RelativeLayout\n        }\n    }\n\n    companion object {\n        fun convertTimeToAMPM(date: String?): String {\n            var strCurrentDate = \"\"\n            var format = SimpleDateFormat(\"HH:mm:ss\", Locale.ENGLISH)\n            var newDate: Date? = null\n            try {\n                newDate = format.parse(date)\n            } catch (e: ParseException) {\n                e.printStackTrace()\n            }\n            format = SimpleDateFormat(\"hh:mm a\", Locale.ENGLISH)\n            strCurrentDate = format.format(newDate)\n            return strCurrentDate\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/nas/alreem/activity/cca/adapter/CCAsChoiceListActivityAdapter.kt b/app/src/main/java/com/nas/alreem/activity/cca/adapter/CCAsChoiceListActivityAdapter.kt
--- a/app/src/main/java/com/nas/alreem/activity/cca/adapter/CCAsChoiceListActivityAdapter.kt	(revision 10a3cbb13b5fc05b1815351c42577261066dfaa1)
+++ b/app/src/main/java/com/nas/alreem/activity/cca/adapter/CCAsChoiceListActivityAdapter.kt	(date 1689560360251)
@@ -139,7 +139,7 @@
                         mCCAmodelArrayList[position].description
                     )
                 if (mCCAmodelArrayList[position].description!!.length > 22) {
-                    holder.readMoreTxt.visibility = View.VISIBLE
+                   // holder.readMoreTxt.visibility = View.VISIBLE
                 } else {
                     holder.readMoreTxt.visibility = View.GONE
                 }
@@ -177,6 +177,9 @@
                 AppController.weekList.get(dayPosition).choiceStatus=("1")
                 ccaDetailModelArrayList!![ccaDetailpos].choice1=(mCCAmodelArrayList[position].cca_item_name)
                 ccaDetailModelArrayList!![ccaDetailpos].choice1Id=(mCCAmodelArrayList[position].cca_details_id)
+
+
+
                 val mCCAsWeekListAdapter =
                     CCAsWeekListAdapter(mContext, AppController.weekList, dayPosition, msgRelative)
                 mCCAsWeekListAdapter.notifyDataSetChanged()
@@ -200,6 +203,9 @@
                 AppController.weekList.get(dayPosition).choiceStatus1=("1")
                 ccaDetailModelArrayList!![ccaDetailpos].choice2=(mCCAmodelArrayList[position].cca_item_name)
                 ccaDetailModelArrayList!![ccaDetailpos].choice2Id=(mCCAmodelArrayList[position].cca_details_id)
+
+
+
                 val mCCAsWeekListAdapter =
                     CCAsWeekListAdapter(mContext, AppController.weekList, dayPosition, msgRelative)
                 mCCAsWeekListAdapter.notifyDataSetChanged()
Index: app/src/main/java/com/nas/alreem/activity/cca/adapter/CCAfinalReviewAfterSubmissionAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.nas.alreem.activity.cca.adapter\n\nimport android.app.Dialog\nimport android.content.Context\nimport android.content.Intent\nimport android.graphics.Color\nimport android.graphics.drawable.ColorDrawable\nimport android.util.Log\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.view.Window\nimport android.widget.*\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport androidx.recyclerview.widget.RecyclerView\nimport com.nas.alreem.R\nimport com.nas.alreem.activity.cca.CCAsReviewAfterSubmissionActivity\nimport com.nas.alreem.activity.cca.model.CCACancelRequestModel\nimport com.nas.alreem.activity.cca.model.CCACancelResponseModel\nimport com.nas.alreem.activity.cca.model.CCAReviewAfterSubmissionModel\nimport com.nas.alreem.constants.ConstantFunctions\nimport com.nas.alreem.constants.PreferenceManager\nimport com.nas.alreem.rest.ApiClient\nimport retrofit2.Call\nimport retrofit2.Callback\nimport retrofit2.Response\nimport java.text.ParseException\nimport java.text.SimpleDateFormat\nimport java.util.*\n\nclass CCAfinalReviewAfterSubmissionAdapter(\n  var  mContext: Context,\n  var  mCCADetailModelArrayList: ArrayList<CCAReviewAfterSubmissionModel>\n) :\n    RecyclerView.Adapter<CCAfinalReviewAfterSubmissionAdapter.MyViewHolder>() {\n   // lateinit var mCCADetailModelArrayList: ArrayList<CCAReviewAfterSubmissionModel>\n    var dialog: Dialog\n\n    inner class MyViewHolder(view: View) : RecyclerView.ViewHolder(view) {\n        var textViewCCADay: TextView\n        var textViewCCAChoice1: TextView\n        var textViewCCAChoice2: TextView\n        var attendanceListIcon: ImageView\n        var deleteChoice1: ImageView\n        var deleteChoice2: ImageView\n        var linearChoice1: LinearLayout\n        var linearChoice2: LinearLayout\n        var textViewCCAaDateItemChoice1: TextView\n        var textViewCCAaDateItemChoice2: TextView\n        var locationTxt: TextView\n        var descriptionTxt: TextView\n        var location2Txt: TextView\n        var description2Txt: TextView\n        var readMore: TextView\n        var readMore1: TextView\n\n        init {\n            textViewCCAaDateItemChoice1 =\n                view.findViewById<View>(R.id.textViewCCAaDateItemChoice1) as TextView\n            textViewCCAaDateItemChoice2 =\n                view.findViewById<View>(R.id.textViewCCAaDateItemChoice2) as TextView\n            textViewCCADay = view.findViewById<View>(R.id.textViewCCADay) as TextView\n            textViewCCAChoice1 = view.findViewById<View>(R.id.textViewCCAChoice1) as TextView\n            textViewCCAChoice2 = view.findViewById<View>(R.id.textViewCCAChoice2) as TextView\n            attendanceListIcon = view.findViewById<View>(R.id.attendanceListIcon) as ImageView\n            deleteChoice1 = view.findViewById<View>(R.id.deleteChoice1) as ImageView\n            deleteChoice2 = view.findViewById<View>(R.id.deleteChoice2) as ImageView\n            linearChoice1 = view.findViewById<View>(R.id.linearChoice1) as LinearLayout\n            linearChoice2 = view.findViewById<View>(R.id.linearChoice2) as LinearLayout\n            locationTxt = view.findViewById<View>(R.id.locationTxt) as TextView\n            descriptionTxt = view.findViewById<View>(R.id.descriptionTxt) as TextView\n            description2Txt = view.findViewById<View>(R.id.description2Txt) as TextView\n            location2Txt = view.findViewById<View>(R.id.location2Txt) as TextView\n            readMore = view.findViewById<View>(R.id.readMore) as TextView\n            readMore1 = view.findViewById<View>(R.id.readMore1) as TextView\n        }\n    }\n\n    init {\n        this.mContext = mContext\n        this.mCCADetailModelArrayList = mCCADetailModelArrayList\n        dialog = Dialog(mContext)\n        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE)\n        dialog.setContentView(R.layout.dialog_attendance_list)\n        dialog.window!!.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))\n    }\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MyViewHolder {\n        val itemView: View = LayoutInflater.from(parent.context)\n            .inflate(R.layout.adapter_cca_review_after_submit, parent, false)\n        return MyViewHolder(itemView)\n    }\n\n    override fun onBindViewHolder(holder: MyViewHolder, position: Int) {\n        holder.textViewCCADay.setText(mCCADetailModelArrayList[position].day)\n        if (mCCADetailModelArrayList[position].cca_item_description!!.length > 40) {\n            holder.readMore1.visibility = View.VISIBLE\n        } else {\n            holder.readMore1.visibility = View.GONE\n        }\n        holder.attendanceListIcon.setOnClickListener {\n            if (!mCCADetailModelArrayList[position].choice1\n                    .equals(\"0\") || !mCCADetailModelArrayList[position].choice1\n                    .equals(\"-1\") || !mCCADetailModelArrayList[position].choice2\n                    .equals(\"0\") || !mCCADetailModelArrayList[position].choice2\n                    .equals(\"-1\")\n            ) {\n                showAttendanceList(position)\n            }\n        }\n        holder.readMore.setOnClickListener {\n            Log.e(\"click1\",\"Click1\")\n            ConstantFunctions.showDialogueWithOk(\n                mContext,\n                mCCADetailModelArrayList[position].cca_item_description_2!!,\n                \"Description\"\n            )\n        }\n        holder.description2Txt.setOnClickListener {\n            ConstantFunctions.showDialogueWithOk(\n                mContext,\n                mCCADetailModelArrayList[position].cca_item_description_2!!,\n                \"Description\"\n            )\n        }\n        holder.readMore1.setOnClickListener {\n            Log.e(\"click1\",\"Click1\")\n            ConstantFunctions.showDialogueWithOk(\n                mContext,\n                mCCADetailModelArrayList[position].cca_item_description!!,\n                \"Description\"\n            )\n        }\n        holder.descriptionTxt.setOnClickListener {\n            ConstantFunctions.showDialogueWithOk(\n                mContext,\n                mCCADetailModelArrayList[position].cca_item_description!!,\n                \"Description\"\n            )\n        }\n        if (mCCADetailModelArrayList[position].choice1.equals(\"0\")) {\n            holder.linearChoice1.visibility = View.GONE\n            holder.textViewCCAChoice1.text = \"Choice 1 : None\"\n        } else if (mCCADetailModelArrayList[position].choice1.equals(\"-1\")) {\n            holder.linearChoice1.visibility = View.GONE\n            holder.textViewCCAChoice1.text = \"Choice 1 : Nil\"\n        } else {\n            holder.linearChoice1.visibility = View.VISIBLE\n            holder.textViewCCAChoice1.setText(mCCADetailModelArrayList[position].choice1)\n            if (mCCADetailModelArrayList[position].venue\n                    .equals(\"0\") || mCCADetailModelArrayList[position].venue\n                    .equals(\"\")\n            ) {\n                holder.locationTxt.visibility = View.GONE\n            } else {\n                holder.locationTxt.visibility = View.VISIBLE\n                holder.locationTxt.text =\n                    \"Location            : \" + mCCADetailModelArrayList[position].venue\n            }\n            System.out.println(\"DESC EDIT\" + mCCADetailModelArrayList[position].cca_item_description)\n            if (mCCADetailModelArrayList[position].cca_item_description\n                    .equals(\"0\") || mCCADetailModelArrayList[position].cca_item_description\n                    .equals(\"\")\n            ) {\n                holder.descriptionTxt.visibility = View.GONE\n                holder.readMore1.visibility = View.GONE\n            } else {\n                holder.descriptionTxt.visibility = View.VISIBLE\n                holder.readMore1.visibility = View.VISIBLE\n                holder.descriptionTxt.text =\n                    \"Description      : \" + mCCADetailModelArrayList[position].cca_item_description\n            }\n            if (mCCADetailModelArrayList[position].cca_item_start_time != null && mCCADetailModelArrayList[position].cca_item_end_time != null) {\n                holder.textViewCCAaDateItemChoice1.visibility = View.VISIBLE\n                holder.textViewCCAaDateItemChoice1.text = \"(\" + convertTimeToAMPM(\n                    mCCADetailModelArrayList[position].cca_item_start_time\n                ) + \" - \" + convertTimeToAMPM(\n                    mCCADetailModelArrayList[position].cca_item_end_time\n                ) + \")\"\n            } else if (mCCADetailModelArrayList[position].cca_item_start_time != null) {\n                holder.textViewCCAaDateItemChoice1.visibility = View.VISIBLE\n                holder.textViewCCAaDateItemChoice1.text = \"(\" + convertTimeToAMPM(\n                    mCCADetailModelArrayList[position].cca_item_start_time\n                ) + \")\"\n            } else if (mCCADetailModelArrayList[position].cca_item_end_time != null) {\n                holder.textViewCCAaDateItemChoice1.visibility = View.VISIBLE\n                holder.textViewCCAaDateItemChoice1.text = \"(\" + convertTimeToAMPM(\n                    mCCADetailModelArrayList[position].cca_item_end_time\n                ) + \")\"\n            } else {\n                holder.textViewCCAaDateItemChoice1.visibility = View.GONE\n            }\n            if (mCCADetailModelArrayList[position].attending_status.equals(\"1\")) {\n                holder.deleteChoice1.setImageResource(R.drawable.delete_red)\n            } else if (mCCADetailModelArrayList[position].attending_status\n                    .equals(\"3\")\n            ) {\n                holder.deleteChoice1.setImageResource(R.drawable.delete_disabled)\n                holder.textViewCCAaDateItemChoice1.setTextColor(mContext.resources.getColor(R.color.light_grey))\n                holder.textViewCCAChoice1.setTextColor(mContext.resources.getColor(R.color.light_grey))\n            } else {\n                holder.deleteChoice2.setImageResource(R.drawable.delete_disabled)\n                holder.textViewCCAaDateItemChoice2.setTextColor(mContext.resources.getColor(R.color.light_grey))\n                holder.textViewCCAChoice2.setTextColor(mContext.resources.getColor(R.color.light_grey))\n            }\n        }\n        if (mCCADetailModelArrayList[position].choice2.equals(\"0\")) {\n            holder.linearChoice2.visibility = View.GONE\n            holder.textViewCCAChoice2.text = \"Choice 2 : None\"\n        } else if (mCCADetailModelArrayList[position].choice2.equals(\"-1\")) {\n            holder.linearChoice2.visibility = View.GONE\n            holder.textViewCCAChoice2.text = \"Choice 2 : Nil\"\n        } else {\n            holder.linearChoice2.visibility = View.VISIBLE\n            holder.textViewCCAChoice2.setText(mCCADetailModelArrayList[position].choice2)\n            if (mCCADetailModelArrayList[position].venue2\n                    .equals(\"0\") || mCCADetailModelArrayList[position].venue2\n                    .equals(\"\")\n            ) {\n                holder.location2Txt.visibility = View.GONE\n                holder.readMore.visibility = View.GONE\n            } else {\n                holder.location2Txt.visibility = View.VISIBLE\n                holder.readMore.visibility = View.VISIBLE\n                holder.location2Txt.text =\n                    \"Location            : \" + mCCADetailModelArrayList[position].venue2\n            }\n            if (mCCADetailModelArrayList[position].cca_item_description_2\n                    .equals(\"0\") || mCCADetailModelArrayList[position].cca_item_description_2\n                    .equals(\"\")\n            ) {\n                holder.description2Txt.visibility = View.GONE\n            } else {\n                holder.description2Txt.visibility = View.VISIBLE\n                holder.description2Txt.text =\n                    \"Description      : \" + mCCADetailModelArrayList[position].cca_item_description_2\n            }\n            if (mCCADetailModelArrayList[position].cca_item_start_time != null && mCCADetailModelArrayList[position].cca_item_end_time != null) {\n                holder.textViewCCAaDateItemChoice2.visibility = View.VISIBLE\n                holder.textViewCCAaDateItemChoice2.text = \"(\" + convertTimeToAMPM(\n                    mCCADetailModelArrayList[position].cca_item_start_time\n                ) + \" - \" + convertTimeToAMPM(\n                    mCCADetailModelArrayList[position].cca_item_end_time\n                ) + \")\"\n            } else if (mCCADetailModelArrayList[position].cca_item_start_time != null) {\n                holder.textViewCCAaDateItemChoice2.visibility = View.VISIBLE\n                holder.textViewCCAaDateItemChoice2.text = \"(\" + convertTimeToAMPM(\n                    mCCADetailModelArrayList[position].cca_item_start_time\n                ) + \")\"\n            } else if (mCCADetailModelArrayList[position].cca_item_end_time != null) {\n                holder.textViewCCAaDateItemChoice2.visibility = View.VISIBLE\n                holder.textViewCCAaDateItemChoice2.text = \"(\" + convertTimeToAMPM(\n                    mCCADetailModelArrayList[position].cca_item_end_time\n                ) + \")\"\n            } else {\n                holder.textViewCCAaDateItemChoice2.visibility = View.GONE\n            }\n            if (mCCADetailModelArrayList[position].attending_status2.equals(\"1\")) {\n                holder.deleteChoice2.setImageResource(R.drawable.delete_red)\n            } else if (mCCADetailModelArrayList[position].attending_status2\n                    .equals(\"3\")\n            ) {\n                holder.deleteChoice2.setImageResource(R.drawable.delete_disabled)\n                holder.textViewCCAaDateItemChoice2.setTextColor(mContext.resources.getColor(R.color.light_grey))\n                holder.textViewCCAChoice2.setTextColor(mContext.resources.getColor(R.color.light_grey))\n            } else {\n                holder.deleteChoice2.setImageResource(R.drawable.delete_disabled)\n                holder.textViewCCAaDateItemChoice2.setTextColor(mContext.resources.getColor(R.color.light_grey))\n                holder.textViewCCAChoice2.setTextColor(mContext.resources.getColor(R.color.light_grey))\n            }\n        }\n        if ((mCCADetailModelArrayList[position].choice1\n                .equals(\"0\") || mCCADetailModelArrayList[position].choice1\n                .equals(\"-1\")) && (mCCADetailModelArrayList[position].choice2\n                .equals(\"0\") || mCCADetailModelArrayList[position].choice2\n                .equals(\"-1\"))\n        ) {\n            holder.attendanceListIcon.visibility = View.INVISIBLE\n        } else {\n            holder.attendanceListIcon.visibility = View.VISIBLE\n        }\n        holder.deleteChoice1.setOnClickListener {\n            if (mCCADetailModelArrayList[position].attending_status.equals(\"1\")) {\n                showDialogAlertDelete(\n                    mContext as Context,\n                    \"Alert\",\n                    mContext.resources.getString(R.string.deltechoicealertques),\n                    R.drawable.questionmark_icon,\n                    R.drawable.round,\n                    position,\n                    mCCADetailModelArrayList[position].cca_details_id!!\n                )\n                notifyItemChanged(position)\n                notifyDataSetChanged()\n            } else {\n            }\n        }\n        holder.deleteChoice2.setOnClickListener {\n            if (mCCADetailModelArrayList[position].attending_status2.equals(\"1\")) {\n                showDialogAlertDelete(\n                    mContext as Context,\n                    \"Alert\",\n                    mContext.resources.getString(R.string.deltechoicealertques),\n                    R.drawable.questionmark_icon,\n                    R.drawable.round,\n                    position,\n                    mCCADetailModelArrayList[position].cca_details_id2!!\n                )\n                notifyItemChanged(position)\n                notifyDataSetChanged()\n            } else {\n            }\n        }\n        //        holder.textViewCCADay.setText(mCCADetailModelArrayList.get(position).getDay());\n//        holder.attendanceListIcon.setOnClickListener(new View.OnClickListener() {\n//            @Override\n//            public void onClick(View v) {\n//                if ((!(mCCADetailModelArrayList.get(position).getChoice1().equalsIgnoreCase(\"0\")) || !(mCCADetailModelArrayList.get(position).getChoice1().equalsIgnoreCase(\"-1\"))) || (!(mCCADetailModelArrayList.get(position).getChoice2().equalsIgnoreCase(\"0\")) || !(mCCADetailModelArrayList.get(position).getChoice2().equalsIgnoreCase(\"-1\")))) {\n//                    showAttendanceList(position);\n//                    }\n//                    }\n//        });\n//        if (mCCADetailModelArrayList.get(position).getChoice1().equalsIgnoreCase(\"0\")) {\n//            holder.linearChoice1.setVisibility(View.GONE);\n//            holder.textViewCCAChoice1.setText(\"Choice 1 : None\");\n//            } else if (mCCADetailModelArrayList.get(position).getChoice1().equalsIgnoreCase(\"-1\")) {\n//            holder.linearChoice1.setVisibility(View.GONE);\n//            holder.textViewCCAChoice1.setText(\"Choice 1 : Nil\");\n//            } else {\n//            holder.linearChoice1.setVisibility(View.VISIBLE);\n//            holder.textViewCCAChoice1.setText(mCCADetailModelArrayList.get(position).getChoice1());\n//            if (mCCADetailModelArrayList.get(position).getCca_item_start_time() != null && mCCADetailModelArrayList.get(position).getCca_item_end_time() != null) {\n//                holder.textViewCCAaDateItemChoice1.setVisibility(View.VISIBLE);\n//                holder.textViewCCAaDateItemChoice1.setText(\"(\" + convertTimeToAMPM(mCCADetailModelArrayList.get(position).getCca_item_start_time()) + \" - \" + convertTimeToAMPM(mCCADetailModelArrayList.get(position).getCca_item_end_time()) + \")\");\n//                } else if (mCCADetailModelArrayList.get(position).getCca_item_start_time() != null) {\n//                holder.textViewCCAaDateItemChoice1.setVisibility(View.VISIBLE);\n//                holder.textViewCCAaDateItemChoice1.setText(\"(\" + convertTimeToAMPM(mCCADetailModelArrayList.get(position).getCca_item_start_time()) + \")\"); } else if (mCCADetailModelArrayList.get(position).getCca_item_end_time() != null) {\n//                holder.textViewCCAaDateItemChoice1.setVisibility(View.VISIBLE);\n//                holder.textViewCCAaDateItemChoice1.setText(\"(\" + convertTimeToAMPM(mCCADetailModelArrayList.get(position).getCca_item_end_time()) + \")\");\n//            } else {\n//                holder.textViewCCAaDateItemChoice1.setVisibility(View.GONE);\n//                }\n//            if (mCCADetailModelArrayList.get(position).getAttending_status().equalsIgnoreCase(\"1\")) {\n//                holder.deleteChoice1.setImageResource(R.drawable.delete_red);\n//            } else if (mCCADetailModelArrayList.get(position).getAttending_status().equalsIgnoreCase(\"3\")) {\n//                holder.deleteChoice1.setImageResource(R.drawable.delete_disabled);\n//                holder.textViewCCAaDateItemChoice1.setTextColor(mContext.getResources().getColor(R.color.light_grey));\n//                holder.textViewCCAChoice1.setTextColor(mContext.getResources().getColor(R.color.light_grey));\n//                } else {\n//                holder.deleteChoice2.setImageResource(R.drawable.delete_disabled);\n//                holder.textViewCCAaDateItemChoice2.setTextColor(mContext.getResources().getColor(R.color.light_grey));\n//                holder.textViewCCAChoice2.setTextColor(mContext.getResources().getColor(R.color.light_grey));\n//                }\n//                }\n//        if (mCCADetailModelArrayList.get(position).getChoice2().equalsIgnoreCase(\"0\")) {\n//            holder.linearChoice2.setVisibility(View.GONE);\n//            holder.textViewCCAChoice2.setText(\"Choice 2 : None\");\n//            } else if (mCCADetailModelArrayList.get(position).getChoice2().equalsIgnoreCase(\"-1\")) {\n//            holder.linearChoice2.setVisibility(View.GONE);\n//            holder.textViewCCAChoice2.setText(\"Choice 2 : Nil\");\n//            } else {\n//            holder.linearChoice2.setVisibility(View.VISIBLE);\n//            holder.textViewCCAChoice2.setText(mCCADetailModelArrayList.get(position).getChoice2());\n//            if (mCCADetailModelArrayList.get(position).getCca_item_start_time() != null && mCCADetailModelArrayList.get(position).getCca_item_end_time() != null) {\n//                holder.textViewCCAaDateItemChoice2.setVisibility(View.VISIBLE);\n//                holder.textViewCCAaDateItemChoice2.setText(\"(\" + convertTimeToAMPM(mCCADetailModelArrayList.get(position).getCca_item_start_time()) + \" - \" + convertTimeToAMPM(mCCADetailModelArrayList.get(position).getCca_item_end_time()) + \")\");\n//                } else if (mCCADetailModelArrayList.get(position).getCca_item_start_time() != null) {\n//                holder.textViewCCAaDateItemChoice2.setVisibility(View.VISIBLE);\n//                holder.textViewCCAaDateItemChoice2.setText(\"(\" + convertTimeToAMPM(mCCADetailModelArrayList.get(position).getCca_item_start_time()) + \")\");\n//            } else if (mCCADetailModelArrayList.get(position).getCca_item_end_time() != null) {\n//                holder.textViewCCAaDateItemChoice2.setVisibility(View.VISIBLE);\n//                holder.textViewCCAaDateItemChoice2.setText(\"(\" + convertTimeToAMPM(mCCADetailModelArrayList.get(position).getCca_item_end_time()) + \")\");\n//            } else {\n//                holder.textViewCCAaDateItemChoice2.setVisibility(View.GONE);\n//                }\n//            if (mCCADetailModelArrayList.get(position).getAttending_status2().equalsIgnoreCase(\"1\")) {\n//                holder.deleteChoice2.setImageResource(R.drawable.delete_red);\n//                } else if (mCCADetailModelArrayList.get(position).getAttending_status2().equalsIgnoreCase(\"3\")) {\n//                holder.deleteChoice2.setImageResource(R.drawable.delete_disabled);\n//                holder.textViewCCAaDateItemChoice2.setTextColor(mContext.getResources().getColor(R.color.light_grey));\n//                holder.textViewCCAChoice2.setTextColor(mContext.getResources().getColor(R.color.light_grey));\n//                } else {\n//                holder.deleteChoice2.setImageResource(R.drawable.delete_disabled);\n//                holder.textViewCCAaDateItemChoice2.setTextColor(mContext.getResources().getColor(R.color.light_grey));\n//                holder.textViewCCAChoice2.setTextColor(mContext.getResources().getColor(R.color.light_grey));\n//                }\n//                }\n//        if (((mCCADetailModelArrayList.get(position).getChoice1().equalsIgnoreCase(\"0\")) || (mCCADetailModelArrayList.get(position).getChoice1().equalsIgnoreCase(\"-1\"))) && ((mCCADetailModelArrayList.get(position).getChoice2().equalsIgnoreCase(\"0\")) || (mCCADetailModelArrayList.get(position).getChoice2().equalsIgnoreCase(\"-1\")))) {\n//            holder.attendanceListIcon.setVisibility(View.INVISIBLE);\n//        } else {\n//            holder.attendanceListIcon.setVisibility(View.VISIBLE);\n//            }\n//            holder.deleteChoice1.setOnClickListener(new View.OnClickListener() {\n//            @Override\n//            public void onClick(View v) {\n//                if (mCCADetailModelArrayList.get(position).getAttending_status().equalsIgnoreCase(\"1\")) {\n//                    showDialogAlertDelete((Activity) mContext, \"Alert\", \"Do you want to delete this choice?\", R.drawable.questionmark_icon, R.drawable.round, position, mCCADetailModelArrayList.get(position).getCca_details_id());\n//                                        notifyDataSetChanged();\n//                } else {\n//\n//                }\n//            }\n//        });\n//        holder.deleteChoice2.setOnClickListener(new View.OnClickListener() {\n//            @Override\n//            public void onClick(View v) {\n//                if (mCCADetailModelArrayList.get(position).getAttending_status2().equalsIgnoreCase(\"1\")) {\n//                    showDialogAlertDelete((Activity) mContext, \"Alert\", \"Do you want to delete this choice?\", R.drawable.questionmark_icon, R.drawable.round, position, mCCADetailModelArrayList.get(position).getCca_details_id2());\n//                    notifyDataSetChanged();\n//                } else {\n//\n//                }\n//            }\n//        });\n    }\n\n    override fun getItemCount(): Int {\n        Log.e(\"size edit\", mCCADetailModelArrayList.size.toString())\n        return mCCADetailModelArrayList.size\n    }\n\n    fun showAttendanceList(mPosition: Int) {\n        if (dialog.isShowing) {\n            dialog.dismiss()\n        }\n        val dialogDismiss = dialog.findViewById<View>(R.id.btn_dismiss) as Button\n        val linearChoice3 = dialog.findViewById<View>(R.id.linearChoice1) as LinearLayout\n        val linearChoice4 = dialog.findViewById<View>(R.id.linearChoice2) as LinearLayout\n        val alertHead = dialog.findViewById<View>(R.id.alertHead) as TextView\n        val textViewCCAChoiceFirst = dialog.findViewById<View>(R.id.textViewCCAChoice1) as TextView\n        val textViewCCAChoiceSecond = dialog.findViewById<View>(R.id.textViewCCAChoice2) as TextView\n        val scrollViewMain = dialog.findViewById<View>(R.id.scrollViewMain) as ScrollView\n        val socialMediaList =\n            dialog.findViewById<View>(R.id.recycler_view_social_media) as RecyclerView\n        val recycler_view_social_mediaChoice2 =\n            dialog.findViewById<View>(R.id.recycler_view_social_mediaChoice2) as RecyclerView\n        alertHead.text = \"Attendance report of \" + mCCADetailModelArrayList[mPosition].day\n        var showdialog = 1\n        //        scrollViewMain.pageScroll(View.FOCUS_DOWN);\n        scrollViewMain.smoothScrollTo(0, 0)\n        if (!mCCADetailModelArrayList[mPosition].choice1\n                .equals(\"0\") && !mCCADetailModelArrayList[mPosition].choice1\n                .equals(\"-1\")\n        ) {\n            linearChoice3.visibility = View.VISIBLE\n            socialMediaList.visibility = View.VISIBLE\n            socialMediaList.setHasFixedSize(true)\n            val llm = LinearLayoutManager(mContext)\n            llm.orientation = LinearLayoutManager.VERTICAL\n            socialMediaList.layoutManager = llm\n            if (mCCADetailModelArrayList[mPosition].calendarDaysChoice1!!.size <= 0) {\n                textViewCCAChoiceFirst.visibility = View.GONE\n                showdialog = 0\n            } else {\n                textViewCCAChoiceFirst.setText(mCCADetailModelArrayList[mPosition].choice1)\n                textViewCCAChoiceFirst.visibility = View.VISIBLE\n                showdialog = 1\n            }\n            val socialMediaAdapter = CCAAttendenceListAdapter(\n                mContext,\n                mCCADetailModelArrayList[mPosition].calendarDaysChoice1!!\n            )\n            socialMediaList.adapter = socialMediaAdapter\n        } else {\n            linearChoice3.visibility = View.GONE\n            socialMediaList.visibility = View.GONE\n        }\n        if (!mCCADetailModelArrayList[mPosition].choice2\n                .equals(\"0\") && !mCCADetailModelArrayList[mPosition].choice2\n                .equals(\"-1\")\n        ) {\n            if (mCCADetailModelArrayList[mPosition].calendarDaysChoice2!!.size <= 0) {\n                textViewCCAChoiceSecond.visibility = View.GONE\n                showdialog = 0\n            } else {\n                textViewCCAChoiceSecond.setText(mCCADetailModelArrayList[mPosition].choice2)\n                textViewCCAChoiceSecond.visibility = View.VISIBLE\n                showdialog = 1\n            }\n            linearChoice4.visibility = View.VISIBLE\n            recycler_view_social_mediaChoice2.visibility = View.VISIBLE\n            recycler_view_social_mediaChoice2.setHasFixedSize(true)\n            val llmrecycler_view_social_mediaChoice2 = LinearLayoutManager(mContext)\n            llmrecycler_view_social_mediaChoice2.orientation = LinearLayoutManager.VERTICAL\n            recycler_view_social_mediaChoice2.layoutManager = llmrecycler_view_social_mediaChoice2\n            Log.e(\n                \"mCCACAcaldar\",\n                java.lang.String.valueOf(mCCADetailModelArrayList[mPosition].cca_details_id)\n            )\n            val socialMediaAdapterChoice2 = CCAAttendenceListAdapter(\n                mContext,\n                mCCADetailModelArrayList[mPosition].calendarDaysChoice2!!\n            )\n            recycler_view_social_mediaChoice2.adapter = socialMediaAdapterChoice2\n        } else {\n            linearChoice4.visibility = View.GONE\n            recycler_view_social_mediaChoice2.visibility = View.GONE\n        }\n        dialogDismiss.setOnClickListener { dialog.dismiss() }\n        if (showdialog == 1) {\n            dialog.show()\n        } else {\n            Toast.makeText(mContext, \"No attendance details available\", Toast.LENGTH_SHORT).show()\n        }\n    }\n\n    companion object {\n      //  lateinit var mContext: Context\n\n        fun showDialogAlertDelete(\n            activity: Context,\n            msgHead: String?,\n            msg: String?,\n            ico: Int,\n            bgIcon: Int,\n            position: Int,\n            ccaDetailsId: String\n        ) {\n            val dialog = Dialog(activity!!)\n            dialog.requestWindowFeature(Window.FEATURE_NO_TITLE)\n            dialog.window!!.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))\n            dialog.setCancelable(false)\n            dialog.setContentView(R.layout.dialog_ok_cancel)\n            val icon = dialog.findViewById<View>(R.id.iconImageView) as ImageView\n            icon.setBackgroundResource(bgIcon)\n            icon.setImageResource(ico)\n            val text = dialog.findViewById<View>(R.id.text_dialog) as TextView\n            val textHead = dialog.findViewById<View>(R.id.alertHead) as TextView\n            text.text = msg\n            textHead.text = msgHead\n            val dialogButton = dialog.findViewById<View>(R.id.btn_Ok) as Button\n            dialogButton.setOnClickListener {\n                dialog.dismiss()\n                ccaDeleteAPI(ccaDetailsId,activity)\n            }\n            val dialogButtonCancel = dialog.findViewById<View>(R.id.btn_Cancel) as Button\n            dialogButtonCancel.visibility = View.VISIBLE\n            dialogButtonCancel.setOnClickListener { dialog.dismiss() }\n            dialog.show()\n        }\n\n        private fun ccaDeleteAPI(ccaDetailsId: String, activity: Context) {\n            val ccaDetails: ArrayList<String?> = ArrayList()\n            ccaDetails.add(ccaDetailsId)\n            val token = PreferenceManager.getaccesstoken(activity)\n            val body = CCACancelRequestModel(\n                PreferenceManager.getStudentID(activity)!!,\n                ccaDetails.toString()\n            )\n            //        String token = PreferenceManager.Companion.getUserCode(mContext);\n//        Call call = new Call<CCACancelResponseModel>() {\n//            @Override\n//            public void enqueue(Callback<CCACancelResponseModel> callback) {\n//\n//            }\n//        } = ApiClient.INSTANCE.getGetClient().ccaCancel(body,\"Bearer &token\");\n            val call: Call<CCACancelResponseModel> = ApiClient.getClient.ccaCancel(\n                body,\n                \"Bearer $token\"\n            )\n            call.enqueue(object : Callback<CCACancelResponseModel?> {\n                override fun onResponse(\n                    call: Call<CCACancelResponseModel?>,\n                    response: Response<CCACancelResponseModel?>\n                ) {\n                    if (response.isSuccessful()) {\n                        if (response.body() != null) {\n                            if (response.body()!!.status!!.equals(100)) {\n//                            CommonMethods.Companion.showDialogueWithOk(mContext,\"Successfully deleted the choice\",\"Alert\");\n                                showDialogAlert(\n                                    activity,\n                                    \"Alert\",\n                                    \"Successfully Deleted the choice\",\n                                    R.drawable.exclamationicon,\n                                    R.drawable.round\n                                )\n                            } else {\n                                ConstantFunctions.showDialogueWithOk(\n                                    activity,\n                                    \"Unable to delete the choice. Please try again later\",\n                                    \"Alert\"\n                                )\n                            }\n                        }\n                    } else {\n                        ConstantFunctions.showDialogueWithOk(\n                            activity,\n                            \"Cannot continue. Please try again later\",\n                            \"Alert\"\n                        )\n                    }\n                }\n\n                override fun onFailure(call: Call<CCACancelResponseModel?>, t: Throwable) {\n                    ConstantFunctions.showDialogueWithOk(\n                        activity,\n                        \"Cannot continue. Please try again later\",\n                        \"Alert\"\n                    )\n                }\n            })\n        }\n\n        fun showDialogAlert(\n            activity: Context?,\n            msgHead: String?,\n            msg: String?,\n            ico: Int,\n            bgIcon: Int\n        ) {\n            val dialog = Dialog(activity!!)\n            dialog.requestWindowFeature(Window.FEATURE_NO_TITLE)\n            dialog.window!!.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))\n            dialog.setCancelable(false)\n            dialog.setContentView(R.layout.dialog_common_error_alert)\n            val icon = dialog.findViewById<View>(R.id.iconImageView) as ImageView\n            icon.setBackgroundResource(bgIcon)\n            icon.setImageResource(ico)\n            val text = dialog.findViewById<View>(R.id.messageTxt) as TextView\n            val textHead = dialog.findViewById<View>(R.id.alertHead) as TextView\n            text.text = msg\n            textHead.text = msgHead\n            val dialogButton = dialog.findViewById<View>(R.id.btn_Ok) as Button\n            dialogButton.setOnClickListener { v ->\n                dialog.dismiss()\n                activity.startActivity(\n                    Intent(\n                        v.context,\n                        CCAsReviewAfterSubmissionActivity::class.java\n                    ).addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION)\n                )\n            }\n            dialog.show()\n        }\n\n        fun convertTimeToAMPM(date: String?): String {\n            var strCurrentDate = \"\"\n            var format = SimpleDateFormat(\"HH:mm:ss\", Locale.ENGLISH)\n            var newDate: Date? = null\n            try {\n                newDate = format.parse(date)\n            } catch (e: ParseException) {\n                e.printStackTrace()\n            }\n            format = SimpleDateFormat(\"hh:mm a\", Locale.ENGLISH)\n            strCurrentDate = format.format(newDate)\n            return strCurrentDate\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/nas/alreem/activity/cca/adapter/CCAfinalReviewAfterSubmissionAdapter.kt b/app/src/main/java/com/nas/alreem/activity/cca/adapter/CCAfinalReviewAfterSubmissionAdapter.kt
--- a/app/src/main/java/com/nas/alreem/activity/cca/adapter/CCAfinalReviewAfterSubmissionAdapter.kt	(revision 10a3cbb13b5fc05b1815351c42577261066dfaa1)
+++ b/app/src/main/java/com/nas/alreem/activity/cca/adapter/CCAfinalReviewAfterSubmissionAdapter.kt	(date 1689570687694)
@@ -544,7 +544,7 @@
             ccaDetails.add(ccaDetailsId)
             val token = PreferenceManager.getaccesstoken(activity)
             val body = CCACancelRequestModel(
-                PreferenceManager.getStudentID(activity)!!,
+                PreferenceManager.getStudIdForCCA(activity)!!,
                 ccaDetails.toString()
             )
             //        String token = PreferenceManager.Companion.getUserCode(mContext);
Index: app/src/main/java/com/nas/alreem/activity/cca/CCASelectionActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.nas.alreem.activity.cca\n\nimport android.content.Context\nimport android.content.Intent\nimport android.os.Bundle\nimport android.text.Html\nimport android.util.Log\nimport android.view.View\nimport android.view.animation.AnimationUtils\nimport android.widget.*\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.recyclerview.widget.GridLayoutManager\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport androidx.recyclerview.widget.RecyclerView\nimport com.nas.alreem.R\nimport com.nas.alreem.activity.cca.adapter.CCAsActivityAdapter\nimport com.nas.alreem.activity.cca.adapter.CCAsWeekListAdapter\nimport com.nas.alreem.activity.cca.model.CCADetailModel\nimport com.nas.alreem.activity.cca.model.WeekListModel\nimport com.nas.alreem.activity.home.HomeActivity\nimport com.nas.alreem.appcontroller.AppController\nimport com.nas.alreem.constants.ConstantFunctions\nimport com.nas.alreem.constants.OnItemClickListener\nimport com.nas.alreem.constants.PreferenceManager\nimport com.nas.alreem.constants.addOnItemClickListener\nimport com.nas.alreem.recyclermanager.ItemOffsetDecoration\n\nclass CCASelectionActivity : AppCompatActivity() {\n    lateinit var mContext: Context\n    lateinit var titleTextView: TextView\n    lateinit var back: ImageView\n    lateinit var backRelative: RelativeLayout\n    lateinit var logoclick: ImageView\n    lateinit var progress: ProgressBar\n\n    var CCADetailModelArrayList: ArrayList<CCADetailModel>? = null\n\n    //    ArrayList<String> weekList;\n    var relativeHeader: RelativeLayout? = null\n    lateinit var msgRelative: RelativeLayout\n\n    var tab_type = \"ECAs\"\n    var extras: Bundle? = null\n\n    //    ArrayList<String> mCcaArrayList;\n    var recycler_review: RecyclerView? = null\n    var weekRecyclerList: RecyclerView? = null\n    var recyclerViewLayoutManager: GridLayoutManager? = null\n    var recyclerweekViewLayoutManager: GridLayoutManager? = null\n    var pos = 0\n    var ccaDetailpos = 0\n    var submitBtn: Button? = null\n    var nextBtn: Button? = null\n    var filled = false\n    var weekSelected = false\n    var weekPosition = 0\n    var flag = 0\n    var ccaedit = 0\n    var mCCAsWeekListAdapter: CCAsWeekListAdapter? = null\n    var TVselectedForWeek: TextView? = null\n    var textViewCCAaSelect: TextView? = null\n    var textViewStudName: TextView? = null\n    var messageTxt: TextView? = null\n    var mCCAsActivityAdapter: CCAsActivityAdapter? = null\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n        setContentView(R.layout.activity_ccaselection)\n        mContext = this\n        initialiseUI()\n\n    }\n\n    private fun initialiseUI() {\n        titleTextView = findViewById(R.id.heading)\n        back = findViewById(R.id.btn_left)\n        backRelative = findViewById(R.id.backRelative)\n        logoclick = findViewById(R.id.logoClickImgView)\n        progress = findViewById(R.id.progress)\n        extras = intent.extras\n        logoclick.setOnClickListener {\n            val mIntent = Intent(mContext, HomeActivity::class.java)\n            mIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)\n\n            startActivity(mIntent)\n        }\n        backRelative.setOnClickListener {\n            finish()\n        }\n        if (extras != null) {\n            tab_type = extras!!.getString(\"tab_type\")!!\n            ccaedit = extras!!.getInt(\"ccaedit\", 0)\n            //            pos = extras.getInt(\"pos\");\n            CCADetailModelArrayList =\n                PreferenceManager.getDetailsArrayList(mContext)\n        }\n\n\n        AppController.weekList = ArrayList()\n        AppController.weekListWithData = ArrayList()\n//        weekList.add(\"Sunday\");\n//        weekList.add(\"Monday\");\n//        weekList.add(\"Tuesday\");\n//        weekList.add(\"Wednesday\");\n//        weekList.add(\"Thursday\");\n//        weekList.add(\"Friday\");\n//        weekList.add(\"Saturday\");\n        //        weekList.add(\"Sunday\");\n//        weekList.add(\"Monday\");\n//        weekList.add(\"Tuesday\");\n//        weekList.add(\"Wednesday\");\n//        weekList.add(\"Thursday\");\n//        weekList.add(\"Friday\");\n//        weekList.add(\"Saturday\");\n        for (i in 0..6) {\n            val mWeekListModel = WeekListModel()\n            mWeekListModel.weekDay=(getWeekday(i))\n            mWeekListModel.weekDayMMM=(getWeekdayMMM(i))\n            if (ccaedit == 0) {\n                mWeekListModel.choiceStatus=(\"0\")\n                mWeekListModel.choiceStatus1=(\"0\")\n            } else {\n                mWeekListModel.choiceStatus=(\"1\")\n                mWeekListModel.choiceStatus1=(\"1\")\n            }\n            AppController.weekList!!.add(mWeekListModel)\n        }\n        relativeHeader = findViewById<View>(R.id.relativeHeader) as RelativeLayout\n        msgRelative = findViewById<View>(R.id.msgRelative) as RelativeLayout\n        recycler_review = findViewById<View>(R.id.recycler_view_cca) as RecyclerView\n        weekRecyclerList = findViewById<View>(R.id.weekRecyclerList) as RecyclerView\n        TVselectedForWeek = findViewById<View>(R.id.TVselectedForWeek) as TextView\n        textViewCCAaSelect = findViewById<View>(R.id.textViewCCAaSelect) as TextView\n        textViewStudName = findViewById<View>(R.id.textViewStudName) as TextView\n        messageTxt = findViewById<View>(R.id.messageTxt) as TextView\n        submitBtn = findViewById<View>(R.id.submitBtn) as Button\n        nextBtn = findViewById<View>(R.id.nextBtn) as Button\n        nextBtn!!.getBackground().setAlpha(255)\n        submitBtn!!.getBackground().setAlpha(150)\n\n        val startAnimation = AnimationUtils.loadAnimation(\n            applicationContext, R.anim.blinking_animation\n        )\n        messageTxt!!.startAnimation(startAnimation)\n        if (PreferenceManager.getStudClassForCCA(mContext).equals(\"\")) {\n           // textViewStudName!!.setText(PreferenceManager.getStudNameForCCA(mContext))\n\n            textViewStudName!!.text = Html.fromHtml(PreferenceManager.getStudentName(\n                    mContext)+\"<br/>Year Group : \" + PreferenceManager.getStudentClass( mContext))\n        } else {\n            textViewStudName!!.text = Html.fromHtml(\n                PreferenceManager.getStudNameForCCA(mContext)\n                    .toString() + \"<br/>Year Group : \" + PreferenceManager.getStudClassForCCA(\n                    mContext\n                )\n            )\n        }\n        if (ccaedit == 0) {\n            ConstantFunctions.showDialogueWithOk(\n                mContext,\n                \"Please select a ECA or None for each choice and each day\",\n                \"Info\"\n            )\n\n            submitBtn!!.getBackground().setAlpha(150)\n            submitBtn!!.setVisibility(View.INVISIBLE)\n            AppController.filledFlag = 1\n        } else {\n            submitBtn!!.getBackground().setAlpha(255)\n            submitBtn!!.setVisibility(View.VISIBLE)\n            nextBtn!!.getBackground().setAlpha(255)\n            nextBtn!!.setVisibility(View.GONE)\n            AppController.filledFlag = 1\n        }\n\n        submitBtn!!.setOnClickListener(View.OnClickListener { //              for (int i=0;i<CCADetailModelArrayList.size();i++)\n            //              {\n            //                  System.out.println(\"Choice1 \"+CCADetailModelArrayList.get(i).getDay()+\":\"+CCADetailModelArrayList.get(i).getChoice1());\n            //                  System.out.println(\"Choice2 \"+CCADetailModelArrayList.get(i).getDay()+\":\"+CCADetailModelArrayList.get(i).getChoice2());\n            //              }\n            Log.e(\"filled1\",filled.toString())\n//            if (flag == 1) {\n//                filled = true\n//            }\n            Log.e(\"flag\",AppController.filledFlag.toString())\n\n            if(AppController.filledFlag == 1){\n//            if (filled) {\n                val mInent = Intent(this@CCASelectionActivity, CCAsReviewActivity::class.java)\n                Log.e(\"size selection\", CCADetailModelArrayList!!.size.toString())\n                AppController.CCADetailModelArrayList.clear()\n                for (i in CCADetailModelArrayList!!.indices){\n                    AppController.CCADetailModelArrayList.add(CCADetailModelArrayList!![i])\n                }\n                intent.putExtra(\"detail_array\", CCADetailModelArrayList)\n                startActivity(mInent)\n            } else {\n                ConstantFunctions.showDialogueWithOk(mContext,\"Select choice for all available days\",\"Alert\")\n\n            }\n        })\n\n        recycler_review!!.setHasFixedSize(true)\n        recyclerViewLayoutManager = GridLayoutManager(mContext, 1)\n        val spacing = 5 // 50px\n\n        val itemDecoration = ItemOffsetDecoration(mContext, spacing)\n        recycler_review!!.addItemDecoration(itemDecoration)\n        recycler_review!!.layoutManager = recyclerViewLayoutManager\n//        for (int i = 0; i < CCADetailModelArrayList.size(); i++)\n//            if (CCADetailModelArrayList.get(i).getDay().equalsIgnoreCase(\"Sunday\")) {\n//                {\n//                    ccaDetailpos=i;\n//                    CCAsActivityAdapter mCCAsActivityAdapter = new CCAsActivityAdapter(mContext, CCADetailModelArrayList.get(i).getCcaChoiceModel(), CCADetailModelArrayList.get(i).getCcaChoiceModel2(),0,AppController.weekList);\n//                    recycler_review.setAdapter(mCCAsActivityAdapter);\n//                    break;\n//                }\n//            }\n\n        //        for (int i = 0; i < CCADetailModelArrayList.size(); i++)\n//            if (CCADetailModelArrayList.get(i).getDay().equalsIgnoreCase(\"Sunday\")) {\n//                {\n//                    ccaDetailpos=i;\n//                    CCAsActivityAdapter mCCAsActivityAdapter = new CCAsActivityAdapter(mContext, CCADetailModelArrayList.get(i).getCcaChoiceModel(), CCADetailModelArrayList.get(i).getCcaChoiceModel2(),0,AppController.weekList);\n//                    recycler_review.setAdapter(mCCAsActivityAdapter);\n//                    break;\n//                }\n//            }\n        TVselectedForWeek!!.text = \"Sunday\"\n//        for (int j = 0; j < AppController.weekList.size(); j++) {\n//            for (int i = 0; i < CCADetailModelArrayList.size(); i++) {\n//                if (!AppController.weekList.get(j).getWeekDay().equalsIgnoreCase(CCADetailModelArrayList.get(i).getDay())) {\n//                    AppController.weekList.get(j).setChoiceStatus(\"2\");\n//                    AppController.weekList.get(j).setChoiceStatus1(\"2\");\n//                }\n//                else\n//                {\n//                    AppController.weekList.get(j).setChoiceStatus(\"0\");\n//                    AppController.weekList.get(j).setChoiceStatus1(\"0\");\n//                }\n//            }\n//        }\n\n        //        for (int j = 0; j < AppController.weekList.size(); j++) {\n//            for (int i = 0; i < CCADetailModelArrayList.size(); i++) {\n//                if (!AppController.weekList.get(j).getWeekDay().equalsIgnoreCase(CCADetailModelArrayList.get(i).getDay())) {\n//                    AppController.weekList.get(j).setChoiceStatus(\"2\");\n//                    AppController.weekList.get(j).setChoiceStatus1(\"2\");\n//                }\n//                else\n//                {\n//                    AppController.weekList.get(j).setChoiceStatus(\"0\");\n//                    AppController.weekList.get(j).setChoiceStatus1(\"0\");\n//                }\n//            }\n//        }\n        for (i in 0 until AppController.weekList!!.size) {\n            AppController.weekList!!.get(i).choiceStatus=(\"2\")\n            AppController.weekList!!.get(i).choiceStatus1=(\"2\")\n            AppController.weekList!!.get(i).dataInWeek=(\"0\")\n        }\n\n\n        for (i in 0 until AppController.weekList!!.size) {\n            for (j in CCADetailModelArrayList!!.indices) {\n                if (AppController.weekList!!.get(i).weekDay.equals(\n                        CCADetailModelArrayList!!.get(j).day)\n                ) {\n                    if (ccaedit == 0) {\n                        AppController.weekList!!.get(i).choiceStatus=(\"0\")\n                        AppController.weekList!!.get(i).choiceStatus1=(\"0\")\n                    } else {\n                        AppController.weekList!!.get(i).choiceStatus=(\"1\")\n                        AppController.weekList!!.get(i).choiceStatus1=(\"1\")\n                    }\n                    AppController.weekList!!.get(i).dataInWeek=(\"1\")\n                    AppController.weekListWithData!!.add(i)\n                }\n            }\n        }\n        for (i in this.CCADetailModelArrayList!!.indices) {\n            if (CCADetailModelArrayList!!.get(i).day.equals(\"Sunday\")) {\n                ccaDetailpos = i\n                textViewCCAaSelect!!.visibility = View.VISIBLE\n                TVselectedForWeek!!.visibility = View.VISIBLE\n                mCCAsActivityAdapter = CCAsActivityAdapter(\n                    mContext,\n                    CCADetailModelArrayList!!.get(i).ccaChoiceModel,\n                    CCADetailModelArrayList!!.get(i).ccaChoiceModel2,\n                    0,\n                    AppController.weekList,\n                    weekRecyclerList,ccaedit,CCADetailModelArrayList,nextBtn, submitBtn, filled,ccaDetailpos,msgRelative\n                )\n                recycler_review!!.adapter = mCCAsActivityAdapter\n                break\n            } else if (i == CCADetailModelArrayList!!!!.size - 1) {\n                if (!CCADetailModelArrayList!!.get(i).day\n                        .equals(\"Sunday\",ignoreCase = true)\n                ) {\n                    mCCAsActivityAdapter = CCAsActivityAdapter(mContext, 0)\n                    recycler_review!!.adapter = mCCAsActivityAdapter\n                    textViewCCAaSelect!!.visibility = View.GONE\n                    TVselectedForWeek!!.visibility = View.GONE\n                    AppController.weekList!!.get(0).choiceStatus=(\"2\")\n                    AppController.weekList!!.get(0).choiceStatus1=(\"2\")\n                    //                    Toast.makeText(mContext, \"ECA choice not available.\", Toast.LENGTH_SHORT).show();\n                }\n            }\n        }\n\n\n//        CCAsActivityAdapter mCCAsActivityAdapter = new CCAsActivityAdapter(mContext, CCADetailModelArrayList.get(0).getCcaChoiceModel(), CCADetailModelArrayList.get(0).getCcaChoiceModel2());\n//        recycler_review.setAdapter(mCCAsActivityAdapter);\n\n\n//        CCAsActivityAdapter mCCAsActivityAdapter = new CCAsActivityAdapter(mContext, CCADetailModelArrayList.get(0).getCcaChoiceModel(), CCADetailModelArrayList.get(0).getCcaChoiceModel2());\n//        recycler_review.setAdapter(mCCAsActivityAdapter);\n        weekRecyclerList!!.setHasFixedSize(true)\n//        recyclerweekViewLayoutManager = new GridLayoutManager(mContext, 7);\n        //        recyclerweekViewLayoutManager = new GridLayoutManager(mContext, 7);\n        val llm = LinearLayoutManager(mContext)\n        llm.orientation = LinearLayoutManager.HORIZONTAL\n//        weekRecyclerList.addItemDecoration(\n//                new DividerItemDecoration(mContext.getResources().getDrawable(R.drawable.list_divider)));\n//        weekRecyclerList.addItemDecoration(itemDecoration);\n        //        weekRecyclerList.addItemDecoration(\n//                new DividerItemDecoration(mContext.getResources().getDrawable(R.drawable.list_divider)));\n//        weekRecyclerList.addItemDecoration(itemDecoration);\n        weekRecyclerList!!.layoutManager = llm\n//        weekRecyclerList.setLayoutManager(recyclerweekViewLayoutManager);\n        //        weekRecyclerList.setLayoutManager(recyclerweekViewLayoutManager);\n        mCCAsWeekListAdapter = CCAsWeekListAdapter(mContext, AppController.weekList, weekPosition, msgRelative)\n        weekRecyclerList!!.adapter = mCCAsWeekListAdapter\n        weekRecyclerList!!.addOnItemClickListener(object : OnItemClickListener {\n            override fun onItemClicked(position: Int, view: View) {\n                for (i in CCADetailModelArrayList!!.indices) {\n                    if (AppController.weekList!!.get(position).weekDay.equals(\n                            CCADetailModelArrayList!!.get(i).day)) {\n                        pos = i\n                      ccaDetailpos = i\n                        weekSelected = true\n                        break\n                    } else {\n                        weekSelected = false\n                    }\n                    if (weekSelected) {\n                        break\n                    }\n                }\n                if (!weekSelected) {\n                    textViewCCAaSelect!!.visibility = View.GONE\n                    TVselectedForWeek!!.visibility = View.GONE\n                  msgRelative!!.setVisibility(View.GONE)\n                    val mCCAsActivityAdapter = CCAsActivityAdapter(mContext, 0)\n                    recycler_review!!.adapter = mCCAsActivityAdapter\n                    mCCAsActivityAdapter.notifyDataSetChanged()\n                    AppController.weekList!!.get(position).choiceStatus=(\"2\")\n                    AppController.weekList!!.get(position).choiceStatus1=(\"2\")\n                    Toast.makeText(mContext, \"ECA choice not available\", Toast.LENGTH_SHORT)\n                        .show()\n                } else {\n                    textViewCCAaSelect!!.visibility = View.VISIBLE\n                    TVselectedForWeek!!.visibility = View.VISIBLE\n                    msgRelative!!.setVisibility(View.VISIBLE)\n                    val mCCAsActivityAdapter = CCAsActivityAdapter(\n                        mContext,\n                        CCADetailModelArrayList!!.get(pos).ccaChoiceModel,\n                        CCADetailModelArrayList!!.get(pos).ccaChoiceModel2,\n                        position,\n                        AppController.weekList,\n                        weekRecyclerList,ccaedit,CCADetailModelArrayList,nextBtn, submitBtn, filled,ccaDetailpos,msgRelative\n                    )\n                    recycler_review!!.adapter = mCCAsActivityAdapter\n                    mCCAsActivityAdapter.notifyDataSetChanged()\n                }\n                for (j in 0 until AppController.weekList!!.size) {\n                    if (AppController.weekList!!.get(j).choiceStatus\n                            .equals(\"0\") || AppController.weekList!!.get(j)\n                            .choiceStatus1.equals(\"0\")\n                    ) {\n                        filled = false\n                        break\n                    } else {\n                        filled = true\n                    }\n                    if (!filled) {\n                        break\n                    }\n                }\n                if (filled) {\n                    submitBtn!!.background.alpha = 255\n                    submitBtn!!.setVisibility(View.VISIBLE)\n                    nextBtn!!.getBackground().setAlpha(255)\n                    nextBtn!!.setVisibility(View.GONE)\n                    AppController.filledFlag = 1\n                } else {\n                    submitBtn!!.getBackground().setAlpha(150)\n                    submitBtn!!.setVisibility(View.INVISIBLE)\n                    nextBtn!!.getBackground().setAlpha(255)\n                    nextBtn!!.setVisibility(View.VISIBLE)\n                }\n                weekPosition = position\n                mCCAsWeekListAdapter =\n                    CCAsWeekListAdapter(mContext, AppController.weekList, weekPosition,msgRelative)\n                weekRecyclerList!!.adapter = mCCAsWeekListAdapter\n                TVselectedForWeek!!.setText(AppController.weekList!!.get(position).weekDay)\n                //                        horizontalScrollView\n                if (weekPosition == 6) weekRecyclerList!!.scrollToPosition(6) else weekRecyclerList!!.scrollToPosition(\n                    0\n                )\n            }\n\n        })\n\n\n        for (j in 0 until AppController.weekList!!.size) {\n            if (AppController.weekList!!.get(j).dataInWeek.equals(\"1\")) {\n                for (i in CCADetailModelArrayList!!.indices) {\n                    if (AppController.weekList!!.get(j).weekDay.equals(\n                            CCADetailModelArrayList!!.get(i).day\n                        )\n                    ) {\n                        pos = i\n                        ccaDetailpos = i\n                        weekSelected = true\n                        break\n                    } else {\n                        weekSelected = false\n                    }\n                    if (weekSelected) {\n                        break\n                    }\n                }\n                if (!weekSelected) {\n                    textViewCCAaSelect!!.visibility = View.GONE\n                    TVselectedForWeek!!.visibility = View.GONE\n                    msgRelative!!.setVisibility(View.VISIBLE)\n                    val mCCAsActivityAdapter = CCAsActivityAdapter(mContext, 0)\n                    recycler_review!!.adapter = mCCAsActivityAdapter\n                    mCCAsActivityAdapter.notifyDataSetChanged()\n                    AppController.weekList!!.get(j).choiceStatus=(\"2\")\n                    AppController.weekList!!.get(j).choiceStatus1=(\"2\")\n                    Toast.makeText(mContext, \"ECA choice not available\", Toast.LENGTH_SHORT).show()\n                } else {\n                    textViewCCAaSelect!!.visibility = View.VISIBLE\n                    TVselectedForWeek!!.visibility = View.VISIBLE\n                    msgRelative!!.setVisibility(View.VISIBLE)\n                    val mCCAsActivityAdapter = CCAsActivityAdapter(\n                        mContext,\n                        CCADetailModelArrayList!!.get(pos).ccaChoiceModel,\n                        CCADetailModelArrayList!!.get(pos).ccaChoiceModel2,\n                        j,\n                        AppController.weekList,\n                        weekRecyclerList,ccaedit,CCADetailModelArrayList,nextBtn, submitBtn, filled,ccaDetailpos,msgRelative\n                    )\n                    recycler_review!!.adapter = mCCAsActivityAdapter\n                    mCCAsActivityAdapter.notifyDataSetChanged()\n                }\n                for (k in 0 until AppController.weekList!!.size) {\n                    if (AppController.weekList!!.get(k).choiceStatus\n                            .equals(\"0\") || AppController.weekList!!.get(k)\n                            .choiceStatus1.equals(\"0\")\n                    ) {\n                        filled = false\n                        msgRelative!!.setVisibility(View.VISIBLE)\n                        break\n                    } else {\n                        filled = true\n                    }\n                    if (!filled) {\n                        break\n                    }\n                }\n                if (filled) {\n                    submitBtn!!.getBackground().setAlpha(255)\n                    submitBtn!!.setVisibility(View.VISIBLE)\n                    nextBtn!!.getBackground().setAlpha(255)\n                    nextBtn!!.setVisibility(View.GONE)\n                    msgRelative!!.setVisibility(View.GONE)\n                    AppController.filledFlag = 1\n//                    msgRelative.setVisibility(View.GONE);\n                } else {\n                    msgRelative!!.setVisibility(View.VISIBLE)\n                    submitBtn!!.getBackground().setAlpha(150)\n                    submitBtn!!.setVisibility(View.INVISIBLE)\n                    nextBtn!!.getBackground().setAlpha(255)\n                    nextBtn!!.setVisibility(View.VISIBLE)\n                }\n                weekPosition = j\n                mCCAsWeekListAdapter =\n                    CCAsWeekListAdapter(mContext, AppController.weekList, weekPosition, msgRelative)\n                weekRecyclerList!!.adapter = mCCAsWeekListAdapter\n                TVselectedForWeek!!.setText(AppController.weekList!!.get(j).weekDay)\n                break\n            }\n        }\n\n        if (AppController.weekListWithData!!.size > 0) {\n            nextBtn!!.getBackground().setAlpha(255)\n            nextBtn!!.setVisibility(View.VISIBLE)\n        } else {\n            nextBtn!!.getBackground().setAlpha(255)\n            nextBtn!!.setVisibility(View.GONE)\n        }\n\n        nextBtn!!.setOnClickListener(View.OnClickListener {\n            Log.e(\"filled next\",filled.toString())\n            weekPosition = weekPosition + 1\n            if (AppController.weekListWithData!!.contains(weekPosition)) {\n                for (a in 0 until AppController.weekListWithData!!.size) {\n                    if (AppController.weekListWithData!!.get(a) === weekPosition) {\n                        //weekPosition = a;\n                        weekPosition = AppController.weekListWithData!!.get(a)\n                        break\n                    }\n                }\n\n                /*           for (int a=0;a<AppController.weekListWithData.size();a++)\n                        {\n                            if (weekPosition==AppController.weekListWithData.get(a)) {\n                                weekPosition = AppController.weekListWithData.get(a);\n                            }\n                        }\n                        weekPosition = AppController.weekListWithData.get(weekPosition);*/\n            } else {\n                if (weekPosition >= AppController.weekList!!.size - 1) {\n                    weekPosition = 0\n                }\n                if (AppController.weekListWithData!!.contains(weekPosition)) {\n                    //                        weekPosition = AppController.weekListWithData.get(weekPosition);\n                    for (a in 0 until AppController.weekListWithData!!.size) {\n                        //                            if (AppController.weekListWithData.contains(weekPosition)) {\n                        if (AppController.weekListWithData!!.get(a) === weekPosition) {\n                            //                                weekPosition = a;\n                            weekPosition = AppController.weekListWithData!!.get(a)\n                            break\n                        }\n                    }\n                } else {\n                    for (m in weekPosition until AppController.weekList!!.size) {\n                        if (AppController.weekListWithData!!.contains(m)) {\n                            weekPosition = m\n                            println(\"weekposition:m:$weekPosition\")\n                            break\n                        }\n                    }\n                    if (!AppController.weekListWithData!!.contains(weekPosition)) {\n                        weekPosition = 0\n                    }\n                }\n            }\n            for (j in weekPosition until AppController.weekList!!.size) {\n                if (AppController.weekList!!.get(j).dataInWeek.equals(\"1\")) {\n                    for (i in CCADetailModelArrayList!!.indices) {\n                        if (AppController.weekList!!.get(j).weekDay.equals(\n                                CCADetailModelArrayList!!.get(i).day,ignoreCase = true\n                            )\n                        ) {\n                            pos = i\n                            ccaDetailpos = i\n                            weekSelected = true\n                            break\n                        } else {\n                            weekSelected = false\n                        }\n                        if (weekSelected) {\n                            break\n                        }\n                    }\n                    if (!weekSelected) {\n                        textViewCCAaSelect!!.visibility = View.GONE\n                        TVselectedForWeek!!.visibility = View.GONE\n                        val mCCAsActivityAdapter = CCAsActivityAdapter(mContext, 0)\n                        recycler_review!!.adapter = mCCAsActivityAdapter\n                        mCCAsActivityAdapter.notifyDataSetChanged()\n                        AppController.weekList!!.get(j).choiceStatus = \"2\"\n                        AppController.weekList!!.get(j).choiceStatus1 = \"2\"\n                        //                            Toast.makeText(mContext, \"ECA choice not available.\", Toast.LENGTH_SHORT).show();\n                    } else {\n                        textViewCCAaSelect!!.visibility = View.VISIBLE\n                        TVselectedForWeek!!.visibility = View.VISIBLE\n                        val mCCAsActivityAdapter = CCAsActivityAdapter(\n                            mContext,\n                            CCADetailModelArrayList!!.get(pos).ccaChoiceModel,\n                            CCADetailModelArrayList!!.get(pos).ccaChoiceModel2,\n                            j,\n                            AppController.weekList,\n                            weekRecyclerList,ccaedit,CCADetailModelArrayList,nextBtn, submitBtn, filled,ccaDetailpos,msgRelative\n                        )\n                        recycler_review!!.adapter = mCCAsActivityAdapter\n                        mCCAsActivityAdapter.notifyDataSetChanged()\n                    }\n                    for (k in 0 until AppController.weekList!!.size) {\n                        if (AppController.weekList!!.get(k).choiceStatus\n                                .equals(\"0\") || AppController.weekList!!.get(k)\n                                .choiceStatus1.equals(\"0\",ignoreCase = true)\n                        ) {\n                            filled = false\n                            msgRelative!!.setVisibility(View.VISIBLE)\n                            break\n                        } else {\n                            filled = true\n                        }\n                        if (!filled) {\n                            break\n                        }\n                    }\n                    if (filled) {\n                        submitBtn!!.getBackground().setAlpha(255)\n                        submitBtn!!.setVisibility(View.VISIBLE)\n                        nextBtn!!.getBackground().setAlpha(255)\n                        nextBtn!!.setVisibility(View.GONE)\n                        msgRelative!!.setVisibility(View.GONE)\n                        nextBtn!!.setVisibility(View.GONE)\n                        AppController.filledFlag = 1\n                    } else {\n                        msgRelative!!.setVisibility(View.VISIBLE)\n                        submitBtn!!.getBackground().setAlpha(150)\n                        submitBtn!!.setVisibility(View.INVISIBLE)\n                        nextBtn!!.getBackground().setAlpha(255)\n                        nextBtn!!.setVisibility(View.VISIBLE)\n                    }\n                    weekPosition = j\n                    mCCAsWeekListAdapter =\n                        CCAsWeekListAdapter(mContext, AppController.weekList, weekPosition,msgRelative)\n                    weekRecyclerList!!.adapter = mCCAsWeekListAdapter\n                    TVselectedForWeek!!.text = AppController.weekList!![j].weekDay\n                    break\n                }\n            }\n            if (weekPosition == 6) {\n                weekRecyclerList!!.layoutManager!!.scrollToPosition(weekPosition)\n            } else {\n                weekRecyclerList!!.layoutManager!!.scrollToPosition(0)\n            }\n        })\n    }\n    fun getWeekday(weekDay: Int): String? {\n        var day = \"\"\n        when (weekDay) {\n            0 -> day = \"Sunday\"\n            1 -> day = \"Monday\"\n            2 -> day = \"Tuesday\"\n            3 -> day = \"Wednesday\"\n            4 -> day = \"Thursday\"\n            5 -> day = \"Friday\"\n            6 -> day = \"Saturday\"\n        }\n        return day\n    }\n\n    fun getWeekdayMMM(weekDay: Int): String? {\n        var day = \"\"\n        when (weekDay) {\n            0 -> day = \"SUN\"\n            1 -> day = \"MON\"\n            2 -> day = \"TUE\"\n            3 -> day = \"WED\"\n            4 -> day = \"THU\"\n            5 -> day = \"FRI\"\n            6 -> day = \"SAT\"\n        }\n        return day\n    }\n\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/nas/alreem/activity/cca/CCASelectionActivity.kt b/app/src/main/java/com/nas/alreem/activity/cca/CCASelectionActivity.kt
--- a/app/src/main/java/com/nas/alreem/activity/cca/CCASelectionActivity.kt	(revision 10a3cbb13b5fc05b1815351c42577261066dfaa1)
+++ b/app/src/main/java/com/nas/alreem/activity/cca/CCASelectionActivity.kt	(date 1689523768946)
@@ -93,6 +93,7 @@
             //            pos = extras.getInt("pos");
             CCADetailModelArrayList =
                 PreferenceManager.getDetailsArrayList(mContext)
+            Log.e("Array", CCADetailModelArrayList.toString())
         }
 
 
@@ -186,13 +187,14 @@
 
             if(AppController.filledFlag == 1){
 //            if (filled) {
-                val mInent = Intent(this@CCASelectionActivity, CCAsReviewActivity::class.java)
+                val mInent = Intent(mContext, CCAsReviewActivity::class.java)
                 Log.e("size selection", CCADetailModelArrayList!!.size.toString())
                 AppController.CCADetailModelArrayList.clear()
                 for (i in CCADetailModelArrayList!!.indices){
                     AppController.CCADetailModelArrayList.add(CCADetailModelArrayList!![i])
                 }
                 intent.putExtra("detail_array", CCADetailModelArrayList)
+                System.out.print("detailArray"+CCADetailModelArrayList)
                 startActivity(mInent)
             } else {
                 ConstantFunctions.showDialogueWithOk(mContext,"Select choice for all available days","Alert")
Index: app/src/main/java/com/nas/alreem/activity/cca/CCAsReviewAfterSubmissionActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.nas.alreem.activity.cca\n\nimport android.content.Context\nimport android.content.Intent\nimport android.os.Bundle\nimport android.text.Html\nimport android.view.View\nimport android.widget.*\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.recyclerview.widget.GridLayoutManager\nimport androidx.recyclerview.widget.RecyclerView\nimport com.nas.alreem.R\nimport com.nas.alreem.activity.cca.adapter.CCAfinalReviewAfterSubmissionAdapter\nimport com.nas.alreem.activity.cca.model.CCAAttendanceModel\nimport com.nas.alreem.activity.cca.model.CCAReviewAfterSubmissionModel\nimport com.nas.alreem.activity.cca.model.CCAReviewRequestModel\nimport com.nas.alreem.activity.cca.model.CCAReviewResponseModel\nimport com.nas.alreem.activity.home.HomeActivity\nimport com.nas.alreem.constants.ConstantFunctions\nimport com.nas.alreem.constants.PreferenceManager\nimport com.nas.alreem.rest.ApiClient\n\nimport retrofit2.Call\nimport retrofit2.Callback\nimport retrofit2.Response\n\nclass CCAsReviewAfterSubmissionActivity : AppCompatActivity() {\n    lateinit var mContext: Context\n    lateinit var titleTextView: TextView\n    lateinit var back: ImageView\n    lateinit var backRelative: RelativeLayout\n    lateinit var logoclick: ImageView\n    lateinit var progressBar: ProgressBar\n    var recyclerViewLayoutManager: GridLayoutManager? = null\n    var recycler_review: RecyclerView? = null\n    var relativeHeader: RelativeLayout? = null\n    var attendanceListIcon: ImageView? = null\n    var tab_type = \"ECAs\"\n    var extras: Bundle? = null\n    var mCCADetailModelArrayList: ArrayList<CCAReviewAfterSubmissionModel>? = null\n    var textViewCCAaItem: TextView? = null\n    var messageTxt: RelativeLayout? = null\n    var editCcca: RelativeLayout? = null\n    var weekList: ArrayList<String>? = null\n    var absentDaysChoice2Array: ArrayList<String>? = null\n    var presentDaysChoice2Array: ArrayList<String>? = null\n    var upcomingDaysChoice2Array: ArrayList<String>? = null\n    var absentDaysChoice1Array: ArrayList<String>? = null\n    var presentDaysChoice1Array: ArrayList<String>? = null\n    var upcomingDaysChoice1Array: ArrayList<String>? = null\n    var datestringChoice1: ArrayList<CCAAttendanceModel>? = null\n    var datestringChoice2: ArrayList<CCAAttendanceModel>? = null\n    var submissiondateover = \"-1\"\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_ccas_review_after_submission)\n        mContext = this\n        titleTextView = findViewById(R.id.heading)\n        back = findViewById(R.id.btn_left)\n        backRelative = findViewById(R.id.backRelative)\n        logoclick = findViewById(R.id.logoClickImgView)\n        progressBar = findViewById(R.id.progress)\n        logoclick.setOnClickListener {\n            val mIntent = Intent(mContext, HomeActivity::class.java)\n            mIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)\n\n            startActivity(mIntent)\n        }\n        backRelative.setOnClickListener {\n            finish()\n        }\n        extras = intent.extras\n        if (extras != null) {\n            tab_type = extras!!.getString(\"tab_type\")!!\n            submissiondateover = extras!!.getString(\"submissiondateover\", \"-1\")\n        }\n        weekList = java.util.ArrayList<String>()\n        weekList!!.add(\"Sunday\")\n        weekList!!.add(\"Monday\")\n        weekList!!.add(\"Tuesday\")\n        weekList!!.add(\"Wednesday\")\n        weekList!!.add(\"Thursday\")\n        weekList!!.add(\"Friday\")\n        weekList!!.add(\"Saturday\")\n        absentDaysChoice2Array = java.util.ArrayList<String>()\n        presentDaysChoice2Array = java.util.ArrayList<String>()\n        upcomingDaysChoice2Array = java.util.ArrayList<String>()\n        absentDaysChoice1Array = java.util.ArrayList<String>()\n        presentDaysChoice1Array = java.util.ArrayList<String>()\n        upcomingDaysChoice1Array = java.util.ArrayList<String>()\n        datestringChoice1 =\n            java.util.ArrayList<CCAAttendanceModel>()\n        datestringChoice2 =\n            java.util.ArrayList<CCAAttendanceModel>()\n        relativeHeader = findViewById<View>(R.id.relativeHeader) as RelativeLayout\n        recycler_review =\n            findViewById<View>(R.id.recycler_view_cca) as RecyclerView\n        textViewCCAaItem = findViewById<View>(R.id.textViewCCAaItem) as TextView\n        messageTxt = findViewById<View>(R.id.messageTxt) as RelativeLayout\n        editCcca = findViewById<View>(R.id.editCcca) as RelativeLayout\n        editCcca!!.visibility = View.GONE\n        messageTxt!!.visibility = View.GONE\n\n        recycler_review!!.setHasFixedSize(true)\n        recyclerViewLayoutManager = GridLayoutManager(mContext, 1)\n        recycler_review!!.setLayoutManager(recyclerViewLayoutManager)\n        mCCADetailModelArrayList =\n            java.util.ArrayList<CCAReviewAfterSubmissionModel>()\n        if (PreferenceManager.getStudClassForCCA(mContext)\n                .equals(\"\")\n        ) {\n            textViewCCAaItem!!.text = Html.fromHtml(\n                PreferenceManager.getCCATitle(mContext)\n                    .toString() + \"<br/>\" + PreferenceManager.getStudentName(\n                    mContext)+\"<br/>Year Group : \" + PreferenceManager.getStudentClass( mContext))\n        } else {\n            textViewCCAaItem!!.text = Html.fromHtml(\n                PreferenceManager.getCCATitle(mContext)\n                    .toString() + \"<br/>\" + PreferenceManager.getStudNameForCCA(\n                    mContext\n                ) + \"<br/>Year Group : \" + PreferenceManager.getStudClassForCCA(\n                    mContext\n                )\n            )\n        }\n        var internetCheck = ConstantFunctions.internetCheck(mContext)\n\n        if (internetCheck) {\n            ccaReviewListAPI()\n\n        } else {\n            //  InternetCheckClass.showSuccessInternetAlert(mContext)\n        }\n\n    }\n\n    private fun ccaReviewListAPI() {\n        val body = CCAReviewRequestModel(\n            PreferenceManager.getStudentID(mContext)!!,\n            PreferenceManager.getCCAItemId(mContext)!!\n        )\n        val token = PreferenceManager.getaccesstoken(mContext)\n        val call: Call<CCAReviewResponseModel> =\n            ApiClient.getClient.ccaReview(body, \"Bearer $token\")\n        progressBar.visibility = View.VISIBLE\n        call.enqueue(object : Callback<CCAReviewResponseModel> {\n            override fun onResponse(\n                call: Call<CCAReviewResponseModel>,\n                response: Response<CCAReviewResponseModel>\n            ) {\n                progressBar.visibility = View.GONE\n                if (response.isSuccessful) {\n                    if (response.body() != null) {\n                        if (response.body()!!.status.toString() == \"100\") {\n\n                            if (response.body()!!.data!!.size > 0) {\n                                for (j in weekList!!.indices) {\n                                    for (i in 0 until response.body()!!.data!!.size) {\n                                        if (response.body()!!.data!![i]!!.day.equals(\n                                                weekList!!.get(j)\n                                                    .toString(), ignoreCase = true\n                                            )\n                                        ) {\n                                            addCCAReviewlist(\n                                                response.body()!!.data!![i]\n                                            )\n                                        }\n                                    }\n                                }\n                                val mCCAsActivityAdapter = CCAfinalReviewAfterSubmissionAdapter(\n                                    mContext,\n                                    mCCADetailModelArrayList!!\n                                )\n                                recycler_review!!.setAdapter(\n                                    mCCAsActivityAdapter\n                                )\n                            } else {\n                                val mCCAsActivityAdapter = CCAfinalReviewAfterSubmissionAdapter(\n                                    mContext,\n                                    mCCADetailModelArrayList!!\n                                )\n                                recycler_review!!.setAdapter(\n                                    mCCAsActivityAdapter\n                                )\n                                Toast.makeText(\n                                    mContext,\n                                    \"No ECA available\",\n                                    Toast.LENGTH_SHORT\n                                ).show()\n                            }\n                        } else {\n                            ConstantFunctions.showDialogueWithOk(\n                                mContext,\n                                getString(R.string.common_error),\n                                \"Alert\"\n                            )\n                        }\n                    } else {\n                        ConstantFunctions.showDialogueWithOk(\n                            mContext,\n                            getString(R.string.common_error),\n                            \"Alert\"\n                        )\n                    }\n                }\n            }\n\n            override fun onFailure(call: Call<CCAReviewResponseModel>, t: Throwable) {\n                progressBar.visibility = View.GONE\n                ConstantFunctions.showDialogueWithOk(\n                    mContext,\n                    getString(R.string.common_error),\n                    \"Alert\"\n                )\n            }\n\n\n        })\n    }\n\n    private fun addCCAReviewlist(dataObject: CCAReviewResponseModel.Data) {\n        val mCCAModel = CCAReviewAfterSubmissionModel()\n        mCCAModel.day = dataObject!!.day\n        datestringChoice1 =\n            java.util.ArrayList<CCAAttendanceModel>()\n        datestringChoice2 =\n            java.util.ArrayList<CCAAttendanceModel>()\n        var ch = 0\n        if (dataObject!!.choice1 != null) {\n            val choice1 = dataObject.choice1\n            if (choice1 != null) {\n                if (choice1.cca_item_name != null) {\n                    mCCAModel.choice1 = choice1.cca_item_name\n                    mCCAModel.cca_details_id = choice1.cca_details_id.toString()\n                    mCCAModel.cca_item_start_time = choice1.cca_item_start_time\n                    mCCAModel.cca_item_end_time = choice1.cca_item_end_time\n                    mCCAModel.attending_status = choice1.attending_status\n                    val absentDaysChoice1 = choice1.absentDays\n                    if (choice1.cca_item_description != null){\n                        mCCAModel.cca_item_description = choice1.cca_item_description\n//                        mCCAModel.cca_item_description_2 = \"\"\n                    }else{\n                        mCCAModel.cca_item_description = \"\"\n//                        mCCAModel.cca_item_description_2 = \"\"\n                    }\n                    if (choice1.cca_venue != null){\n                        mCCAModel.venue = choice1.cca_venue\n//                        mCCAModel.venue2 = \"\"\n                    }else{\n                        mCCAModel.venue = \"\"\n//                        mCCAModel.venue2 = \"\"\n                    }\n                    absentDaysChoice1Array =\n                        java.util.ArrayList<String>()\n                    presentDaysChoice1Array =\n                        java.util.ArrayList<String>()\n                    upcomingDaysChoice1Array =\n                        java.util.ArrayList<String>()\n                    if (choice1.attending_status.equals(\"1\", ignoreCase = true)) {\n                        if (choice1.absentDays !=null) {\n                            ch = 1\n                            for (i in 0 until absentDaysChoice1!!.size) {\n                                absentDaysChoice1Array!!.add(\n                                    absentDaysChoice1[i]!!\n                                )\n                            }\n                        }\n                        if (choice1.presentDays != null) {\n                            ch = 1\n                            val presentDaysChoice1 = choice1.presentDays\n                            for (i in 0 until presentDaysChoice1.size) {\n                                presentDaysChoice1Array!!.add(\n                                    presentDaysChoice1[i]!!\n                                )\n                            }\n                        }\n                        if (choice1.upcomingDays != null) {\n                            ch = 1\n                            val upcomingDaysChoice1 = choice1.upcomingDays\n                            for (i in 0 until upcomingDaysChoice1.size) {\n                                upcomingDaysChoice1Array!!.add(\n                                    upcomingDaysChoice1[i]!!\n                                )\n                            }\n                        }\n                    } else if (choice1.attending_status\n                            .equals(\"3\", ignoreCase = true)\n                    ) {\n                        if (choice1.absentDays != null) {\n                            for (i in 0 until absentDaysChoice1!!.size) {\n                                absentDaysChoice1Array!!.add(\n                                    absentDaysChoice1[i]!!\n                                )\n                            }\n                            ch = 1\n                        }\n                        if (choice1.presentDays != null) {\n                            val presentDaysChoice1 = choice1.presentDays\n                            for (i in 0 until presentDaysChoice1.size) {\n                                presentDaysChoice1Array!!.add(\n                                    presentDaysChoice1[i]!!\n                                )\n                            }\n                            ch = 1\n                        }\n                    } else {\n                        mCCAModel.choice1 = \"0\"\n                    }\n                } else {\n                    mCCAModel.choice1 = \"0\"\n                }\n            } else {\n                mCCAModel.choice1 = \"0\"\n            }\n        } else {\n            mCCAModel.choice1 = \"-1\"\n        }\n        if (dataObject.choice2 != null) {\n            val choice2 = dataObject.choice2\n            if (choice2 != null) {\n                if (choice2.cca_item_name != null) {\n                    mCCAModel.choice2 = choice2.cca_item_name\n                    mCCAModel.cca_item_start_time = choice2.cca_item_start_time\n                    mCCAModel.cca_item_end_time = choice2.cca_item_end_time\n                    mCCAModel.cca_details_id2 = choice2.cca_details_id.toString()\n                    mCCAModel.attending_status2 = choice2.attending_status\n                    if (choice2.cca_item_description != null){\n                        mCCAModel.cca_item_description_2 = choice2.cca_item_description\n//                        mCCAModel.cca_item_description = \"\"\n                    }else{\n                        mCCAModel.cca_item_description_2 = \"\"\n//                        mCCAModel.cca_item_description = \"\"\n                    }\n                    if (choice2.cca_venue != null){\n                        mCCAModel.venue2 = choice2.cca_venue\n//                        mCCAModel.venue = \"\"\n                    }else{\n                        mCCAModel.venue2 = \"\"\n//                        mCCAModel.venue = \"\"\n                    }\n\n                    val absentDaysChoice2 = choice2.absentDays\n                    absentDaysChoice2Array =\n                        java.util.ArrayList<String>()\n                    presentDaysChoice2Array =\n                        java.util.ArrayList<String>()\n                    upcomingDaysChoice2Array =\n                        java.util.ArrayList<String>()\n                    if (choice2.attending_status.equals(\"1\", ignoreCase = true)) {\n                        if (choice2.absentDays != null) {\n                            ch = 1\n                            for (i in 0 until absentDaysChoice2!!.size) {\n                                absentDaysChoice2Array!!.add(\n                                    absentDaysChoice2!![i]!!\n                                )\n                            }\n                        }\n                        val presentDaysChoice2 = choice2.presentDays\n                        if (choice2.presentDays != null) {\n                            ch = 1\n                            for (i in 0 until presentDaysChoice2!!.size) {\n                                presentDaysChoice2Array!!.add(\n                                    presentDaysChoice2[i]!!\n                                )\n                            }\n                        }\n                        val upcomingDaysChoice2 = choice2.upcomingDays\n                        if (choice2.upcomingDays != null) {\n                            ch = 1\n                            for (i in 0 until upcomingDaysChoice2!!.size) {\n                                upcomingDaysChoice2Array!!.add(\n                                    upcomingDaysChoice2!![i]!!\n                                )\n                            }\n                        }\n                    } else if (choice2.attending_status\n                            .equals(\"3\", ignoreCase = true)\n                    ) {\n                        if (choice2.absentDays != null) {\n                            for (i in 0 until absentDaysChoice2!!.size) {\n                                absentDaysChoice2Array!!.add(\n                                    absentDaysChoice2[i]!!\n                                )\n                            }\n                            ch = 1\n                        }\n                        if (choice2.presentDays != null) {\n                            val presentDaysChoice2 = choice2.presentDays\n                            for (i in 0 until presentDaysChoice2!!.size) {\n                                presentDaysChoice2Array!!.add(\n                                    presentDaysChoice2[i]!!\n                                )\n                            }\n                            ch = 1\n                        }\n                    } else {\n                        mCCAModel.choice2 = \"0\"\n                    }\n                } else {\n                    mCCAModel.choice2 = \"0\"\n                }\n            } else {\n                mCCAModel.choice2 = \"0\"\n            }\n        } else {\n            mCCAModel.choice2 = \"-1\"\n        }\n\n        if (absentDaysChoice1Array!!.size > 0) {\n            for (i in absentDaysChoice1Array!!.indices) {\n                val mCCAAttendanceModel = CCAAttendanceModel()\n                mCCAAttendanceModel.dateAttend =\n                    absentDaysChoice1Array!!.get(i).toString()\n                mCCAAttendanceModel.statusCCA = \"a\"\n                datestringChoice1!!.add(mCCAAttendanceModel)\n            }\n        }\n\n        if (upcomingDaysChoice1Array!!.size > 0) {\n            for (i in upcomingDaysChoice1Array!!.indices)  //                datestringChoice1.add(upcomingDaysChoice1Array.get(i).toString());\n            {\n                val mCCAAttendanceModel = CCAAttendanceModel()\n                mCCAAttendanceModel.dateAttend =\n                    upcomingDaysChoice1Array!!.get(i).toString()\n                mCCAAttendanceModel.statusCCA = \"u\"\n                datestringChoice1!!.add(mCCAAttendanceModel)\n            }\n        }\n\n        if (presentDaysChoice1Array!!.size > 0) {\n            for (i in presentDaysChoice1Array!!.indices)  //                datestringChoice1.add(presentDaysChoice1Array.get(i).toString());\n            {\n                val mCCAAttendanceModel = CCAAttendanceModel()\n                mCCAAttendanceModel.dateAttend =\n                    presentDaysChoice1Array!!.get(i).toString()\n                mCCAAttendanceModel.statusCCA = \"p\"\n                datestringChoice1!!.add(mCCAAttendanceModel)\n            }\n        }\n        if (absentDaysChoice2Array!!.size > 0) {\n            for (i in absentDaysChoice2Array!!.indices) {\n                val mCCAAttendanceModel = CCAAttendanceModel()\n                mCCAAttendanceModel.dateAttend =\n                    absentDaysChoice2Array!!.get(i).toString()\n                mCCAAttendanceModel.statusCCA = \"a\"\n                datestringChoice2!!.add(mCCAAttendanceModel)\n            }\n        }\n        if (upcomingDaysChoice2Array!!.size > 0) {\n            for (i in upcomingDaysChoice2Array!!.indices) {\n                val mCCAAttendanceModel = CCAAttendanceModel()\n                mCCAAttendanceModel.dateAttend =\n                    upcomingDaysChoice2Array!!.get(i).toString()\n                mCCAAttendanceModel.statusCCA = \"u\"\n                datestringChoice2!!.add(mCCAAttendanceModel)\n            }\n        }\n        if (presentDaysChoice2Array!!.size > 0) {\n            for (i in presentDaysChoice2Array!!.indices) {\n                val mCCAAttendanceModel = CCAAttendanceModel()\n                mCCAAttendanceModel.dateAttend =\n                    presentDaysChoice2Array!!!!.get(i).toString()\n                mCCAAttendanceModel.statusCCA = \"p\"\n                datestringChoice2!!.add(mCCAAttendanceModel)\n            }\n        }\n        if (datestringChoice1!!.size > 0) {\n            datestringChoice1!!.sortWith(Comparator { s1, s2 -> s1!!.dateAttend!!.compareTo(s2!!.dateAttend!!, ignoreCase = true) })\n        }\n        if (datestringChoice2!!.size > 0) {\n            datestringChoice1!!.sortWith(Comparator { s1, s2 -> s1!!.dateAttend!!.compareTo(s2!!.dateAttend!!, ignoreCase = true) })\n        }\n        mCCAModel.calendarDaysChoice1 = datestringChoice1\n        mCCAModel.calendarDaysChoice2 = datestringChoice2\n        println(\"ch:::$ch\")\n\n        if (ch == 1) {\n            mCCADetailModelArrayList!!.add(mCCAModel)\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/nas/alreem/activity/cca/CCAsReviewAfterSubmissionActivity.kt b/app/src/main/java/com/nas/alreem/activity/cca/CCAsReviewAfterSubmissionActivity.kt
--- a/app/src/main/java/com/nas/alreem/activity/cca/CCAsReviewAfterSubmissionActivity.kt	(revision 10a3cbb13b5fc05b1815351c42577261066dfaa1)
+++ b/app/src/main/java/com/nas/alreem/activity/cca/CCAsReviewAfterSubmissionActivity.kt	(date 1689570687666)
@@ -136,7 +136,7 @@
 
     private fun ccaReviewListAPI() {
         val body = CCAReviewRequestModel(
-            PreferenceManager.getStudentID(mContext)!!,
+            PreferenceManager.getStudIdForCCA(mContext)!!,
             PreferenceManager.getCCAItemId(mContext)!!
         )
         val token = PreferenceManager.getaccesstoken(mContext)
Index: app/src/main/java/com/nas/alreem/fragment/cca/CCAFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.nas.alreem.fragment.cca\n\nimport android.app.Dialog\nimport android.content.Context\nimport android.content.Intent\nimport android.graphics.Color\nimport android.graphics.drawable.ColorDrawable\nimport android.os.Bundle\nimport android.util.Log\nimport android.view.*\nimport android.widget.*\nimport androidx.fragment.app.Fragment\nimport com.bumptech.glide.Glide\nimport com.nas.alreem.R\nimport com.nas.alreem.activity.cca.CCA_Activity\nimport com.nas.alreem.activity.cca.ExternalProviderActivity\nimport com.nas.alreem.activity.cca.InformationCCAActivity\nimport com.nas.alreem.activity.login.model.SignUpResponseModel\nimport com.nas.alreem.constants.ConstantFunctions\nimport com.nas.alreem.constants.DialogFunctions\nimport com.nas.alreem.constants.PreferenceManager\nimport com.nas.alreem.fragment.cca.model.BannerResponseModelCCa\nimport com.nas.alreem.fragment.payments.model.SendEmailApiModel\nimport com.nas.alreem.rest.ApiClient\nimport retrofit2.Call\nimport retrofit2.Callback\nimport retrofit2.Response\n\n\nclass CCAFragment : Fragment() {\n    var mTitleTextView: TextView? = null\n    var descriptionTV: TextView? = null\n   lateinit var ccaDot: TextView\n    private var mRootView: View? = null\n    private var mContext: Context? = null\n    private val mTitle: String? = null\n    private val mTabId: String? = null\n    var mtitleRel: LinearLayout? = null\n    var externalCCA: RelativeLayout? = null\n    var informationCCA: RelativeLayout? = null\n    var bannerImagePager: ImageView? = null\n    var mailImageView: ImageView? = null\n    var ccaOption: RelativeLayout? = null\n    var contactEmail = \"\"\n    private var description = \"\"\n    var text_content: TextView? = null\n    var text_dialog: TextView? = null\n\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        // Inflate the layout for this fragment\n        mRootView = inflater.inflate(\n            R.layout.fragment_cca_main, container,\n            false\n        )\n\n        mContext = activity\n        initialiseUI()\n\n        return mRootView\n    }\n\n    private fun initialiseUI() {\n        mTitleTextView = mRootView!!.findViewById<View>(R.id.titleTextView) as TextView\n        descriptionTV = mRootView!!.findViewById<View>(R.id.descriptionTitle) as TextView\n        ccaDot = mRootView!!.findViewById<View>(R.id.ccaDot) as TextView\n        mTitleTextView!!.setText(R.string.Enrichment)\n        mtitleRel = mRootView!!.findViewById<View>(R.id.title) as LinearLayout\n\n        externalCCA = mRootView!!.findViewById<View>(R.id.epRelative) as RelativeLayout\n        ccaOption = mRootView!!.findViewById<View>(R.id.CcaOptionRelative) as RelativeLayout\n        informationCCA = mRootView!!.findViewById<View>(R.id.informationRelative) as RelativeLayout\n        bannerImagePager = mRootView!!.findViewById<View>(R.id.bannerImagePager) as ImageView\n        mailImageView = mRootView!!.findViewById<View>(R.id.mailImageView) as ImageView\n\n        if (ConstantFunctions.internetCheck(mContext!!))\n        {\n            getList()\n        }\n        else\n        {\n            DialogFunctions.showInternetAlertDialog(mContext!!)\n        }\n\n        externalCCA!!.setOnClickListener {\n            val intent = Intent(mContext, ExternalProviderActivity::class.java)\n            intent.putExtra(\"tab_type\", \"External Providers\")\n            startActivity(intent)\n        }\n        informationCCA!!.setOnClickListener {\n            val intent = Intent(mContext, InformationCCAActivity::class.java)\n            intent.putExtra(\"tab_type\", \"Information\")\n            startActivity(intent)\n        }\n        ccaOption!!.setOnClickListener {\n            if (!PreferenceManager.getUserCode(mContext!!).equals(\"\")) {\n                PreferenceManager.setStudIdForCCA(mContext!!, \"\")\n                val intent = Intent(mContext, CCA_Activity::class.java)\n                intent.putExtra(\"tab_type\", \"ECA Options\")\n                startActivity(intent)\n            } else {\n               ConstantFunctions.showDialogueWithOk(mContext!!,\"This feature is available for Registered users only\",\"Alert\")\n            }\n        }\n        mailImageView!!.setOnClickListener {\n            showSendEmailDialog(mContext!!)\n        }\n\n\n    }\n\n\n    private fun showSendEmailDialog(mContext: Context)\n    {\n        val dialog = Dialog(mContext)\n        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE)\n        dialog.setCancelable(true)\n        dialog.setContentView(R.layout.dialog_send_email)\n        dialog.window!!.setBackgroundDrawableResource(android.R.color.transparent)\n        val btn_submit = dialog.findViewById<Button>(R.id.submitButton)\n        val btn_cancel = dialog.findViewById<Button>(R.id.cancelButton)\n        val text_dialog = dialog.findViewById<EditText?>(R.id.text_dialog)\n        val text_content = dialog.findViewById<EditText>(R.id.text_content)\n\n        btn_cancel.setOnClickListener(View.OnClickListener {\n            dialog.dismiss()\n        })\n\n        btn_submit.setOnClickListener {\n            if (text_dialog.text.toString().trim().equals(\"\")) {\n                DialogFunctions.commonErrorAlertDialog(\n                    mContext.resources.getString(R.string.alert), resources.getString(R.string.enter_subject),\n                    mContext\n                )\n\n\n            } else {\n                if (text_content.text.toString().trim().equals(\"\")) {\n                    DialogFunctions.commonErrorAlertDialog(\n                        mContext.resources.getString(R.string.alert), resources.getString(R.string.enter_content),\n                        mContext\n                    )\n\n                } else {\n                    // progressDialog.visibility = View.VISIBLE\n\n                    callSendEmailToStaffApi(text_dialog.text.toString().trim(), text_content.text.toString().trim(), contactEmail, dialog)\n                }\n            }\n        }\n        dialog.show()\n    }\n    fun callSendEmailToStaffApi(\n        title: String, message: String, staffEmail: String, dialog: Dialog)\n    {\n        val sendMailBody = SendEmailApiModel( staffEmail, title, message)\n        val call: Call<SignUpResponseModel> = ApiClient.getClient.sendEmailStaff(sendMailBody, \"Bearer \" + PreferenceManager.getaccesstoken(mContext!!))\n        call.enqueue(object : Callback<SignUpResponseModel> {\n            override fun onFailure(call: Call<SignUpResponseModel>, t: Throwable) {\n                Log.e(\"Failed\", t.localizedMessage)\n                //progressDialog.visibility = View.GONE\n            }\n\n            override fun onResponse(call: Call<SignUpResponseModel>, response: Response<SignUpResponseModel>) {\n                val responsedata = response.body()\n                //progressDialog.visibility = View.GONE\n                Log.e(\"Response Signup\", responsedata.toString())\n                if (responsedata != null) {\n                    try {\n\n\n                        if (response.body()!!.status==100) {\n                            dialog.dismiss()\n                            showSuccessAlert(\n                                mContext!!,\n                                \"Email sent Successfully \",\n                                \"Success\",\n                                dialog\n                            )\n                        }else {\n                            DialogFunctions.commonErrorAlertDialog(\n                                mContext!!.resources.getString(R.string.alert),\n                                ConstantFunctions.commonErrorString(response.body()!!.status), mContext!!\n                            )\n\n                        }\n                    } catch (e: Exception) {\n                        e.printStackTrace()\n                    }\n                }\n            }\n\n        })\n    }\n\n    private fun getList() {\n        val token = PreferenceManager.getaccesstoken(mContext!!)\n        val call: Call<BannerResponseModelCCa> =\n            ApiClient.getClient.getBanner( \"Bearer $token\")\n        call.enqueue(object : Callback<BannerResponseModelCCa> {\n            override fun onResponse(\n                call: Call<BannerResponseModelCCa>,\n                response: Response<BannerResponseModelCCa>\n            ) {\n                if (response.isSuccessful){\n                    if (response.body() != null){\n                        if (response.body()!!.status.toString() == \"100\"){\n                            val bannerImage: String = response.body()!!.data!!.banner_image!!\n                            description = response.body()!!.data!!.description!!\n                            contactEmail = response.body()!!.data!!.contact_email!!\n//\n                            PreferenceManager.setCcaOptionBadge(\n                                mContext!!,\n                                response.body()!!.data!!.cca_badge\n                            )\n                            PreferenceManager.setCcaOptionEditedBadge(\n                                mContext!!,\n                                response.body()!!.data!!.cca_edited_badge\n                            )\n                            if (PreferenceManager.getCcaOptionBadge(mContext!!)!!.equals(0) &&\n                                PreferenceManager.getCcaOptionEditedBadge(mContext!!)!!.equals(0)\n                            ) {\n                                ccaDot.setVisibility(View.GONE)\n                            } else if (PreferenceManager.getCcaOptionBadge(mContext!!)!!.equals(0) &&\n                                !PreferenceManager.getCcaOptionEditedBadge(mContext!!)!!.equals(0)\n                            ) {\n                                ccaDot.setVisibility(View.VISIBLE)\n                               ccaDot.setText(response.body()!!.data!!.cca_edited_badge)\n                               ccaDot.setBackgroundResource(R.drawable.shape_circle_navy)\n                            } else if (!PreferenceManager.getCcaOptionBadge(mContext!!)!!.equals(0)\n                                && PreferenceManager.getCcaOptionEditedBadge(\n                                    mContext!!).equals(0)\n                            ) {\n                                ccaDot.setVisibility(View.VISIBLE)\n                               ccaDot.setText(response.body()!!.data!!.cca_badge.toString())\n                                ccaDot.setBackgroundResource(R.drawable.shape_circle_red)\n                            } else if (!PreferenceManager.getCcaOptionBadge(mContext!!).equals(0)\n                                && !PreferenceManager.getCcaOptionEditedBadge(mContext!!)!!.equals(0)\n                            ) {\n                               ccaDot.setVisibility(View.VISIBLE)\n                                ccaDot.setText(response.body()!!.data!!.cca_badge)\n                                ccaDot.setBackgroundResource(\n                                    R.drawable.shape_circle_red\n                                )\n                            }\n                            if (!bannerImage.equals(\"\", ignoreCase = true)) {\n                                Glide.with(mContext!!).load(ConstantFunctions.replace(bannerImage)).fitCenter()\n\n                                    .centerCrop().into(bannerImagePager!!)\n\n//\t\t\t\t\t\t\t\t\t\t\tbannerUrlImageArray = new ArrayList<>();\n//\t\t\t\t\t\t\t\t\t\t\tbannerUrlImageArray.add(bannerImage);\n//\t\t\t\t\t\t\t\t\t\t\tbannerImagePager.setAdapter(new ImagePagerDrawableAdapter(bannerUrlImageArray, getActivity()));\n                            } else {\n                                bannerImagePager!!.setBackgroundResource(R.drawable.default_banner)\n//\t\t\t\t\t\t\t\t\t\t\tbannerImagePager.setBackgroundResource(R.drawable.ccas_banner);\n                            }\n                            println(\"contact mail$contactEmail\")\n                            if (description.equals(\"\", ignoreCase = true) && contactEmail.equals(\n                                    \"\",\n                                    ignoreCase = true\n                                )\n                            ) {\n                                mtitleRel!!.visibility = View.GONE\n                            } else {\n                                mtitleRel!!.visibility = View.VISIBLE\n                            }\n                            if (description.equals(\"\", ignoreCase = true)) {\n                                descriptionTV!!.visibility = View.GONE\n                                //  descriptionTitle.setVisibility(View.GONE);\n                            } else {\n                                descriptionTV!!.text = description\n                                descriptionTV!!.visibility = View.VISIBLE\n                                mtitleRel!!.visibility = View.VISIBLE\n                                // mtitleRel.setVisibility(View.VISIBLE);\n                            }\n                            if (contactEmail.equals(\"\", ignoreCase = true)) {\n                                println(\"contact mail1\")\n                                mailImageView!!.visibility = View.GONE\n                            } else {\n                                println(\"contact mail2\")\n                                mtitleRel!!.visibility = View.VISIBLE\n                                mailImageView!!.visibility = View.VISIBLE\n                            }\n                            // CCAFRegisterRel.setVisibility(View.VISIBLE);\n                            // CCAFRegisterRel.setVisibility(View.VISIBLE);\n\n                        }else{\n                          //  CommonMethods.showDialogueWithOk(mContext!!,getString(R.string.common_error),\"Alert\")\n                        }\n                    }else{\n                       // CommonMethods.showDialogueWithOk(mContext!!,getString(R.string.common_error),\"Alert\")\n                    }\n                }else{\n                   // CommonMethods.showDialogueWithOk(mContext!!,getString(R.string.common_error),\"Alert\")\n                }\n            }\n\n            override fun onFailure(call: Call<BannerResponseModelCCa>, t: Throwable) {\n               // CommonMethods.showDialogueWithOk(mContext!!,getString(R.string.common_error),\"Alert\")\n            }\n\n        })\n    }\n    fun showSuccessAlert(context: Context, message: String, msgHead: String, mdialog: Dialog) {\n        val dialog = Dialog(context)\n        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE)\n        dialog.window!!.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))\n        dialog.setCancelable(false)\n        dialog.setContentView(R.layout.dialog_common_error_alert)\n        var iconImageView = dialog.findViewById(R.id.iconImageView) as ImageView\n        var alertHead = dialog.findViewById(R.id.alertHead) as TextView\n        var text_dialog = dialog.findViewById(R.id.messageTxt) as TextView\n        var btn_Ok = dialog.findViewById(R.id.btn_Ok) as Button\n        text_dialog.text = message\n        alertHead.text = msgHead\n        iconImageView.setImageResource(R.drawable.tick)\n        btn_Ok.setOnClickListener()\n        {\n            dialog.dismiss()\n            mdialog.dismiss()\n        }\n        dialog.show()\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/nas/alreem/fragment/cca/CCAFragment.kt b/app/src/main/java/com/nas/alreem/fragment/cca/CCAFragment.kt
--- a/app/src/main/java/com/nas/alreem/fragment/cca/CCAFragment.kt	(revision 10a3cbb13b5fc05b1815351c42577261066dfaa1)
+++ b/app/src/main/java/com/nas/alreem/fragment/cca/CCAFragment.kt	(date 1689569641920)
@@ -98,6 +98,8 @@
         ccaOption!!.setOnClickListener {
             if (!PreferenceManager.getUserCode(mContext!!).equals("")) {
                 PreferenceManager.setStudIdForCCA(mContext!!, "")
+               // PreferenceManager.setStudentID(mContext!!, "")
+
                 val intent = Intent(mContext, CCA_Activity::class.java)
                 intent.putExtra("tab_type", "ECA Options")
                 startActivity(intent)
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_18\" project-jdk-name=\"openjdk-18\" project-jdk-type=\"JavaSDK\">\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\n  </component>\n  <component name=\"ProjectType\">\n    <option name=\"id\" value=\"Android\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 10a3cbb13b5fc05b1815351c42577261066dfaa1)
+++ b/.idea/misc.xml	(date 1689340258593)
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ExternalStorageConfigurationManager" enabled="true" />
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_18" project-jdk-name="openjdk-18" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_17" project-jdk-name="openjdk-18" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/build/classes" />
   </component>
   <component name="ProjectType">
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\n  <component name=\"GradleSettings\">\n    <option name=\"linkedExternalProjectsSettings\">\n      <GradleProjectSettings>\n        <option name=\"testRunner\" value=\"GRADLE\" />\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\n        <option name=\"modules\">\n          <set>\n            <option value=\"$PROJECT_DIR$\" />\n            <option value=\"$PROJECT_DIR$/app\" />\n            <option value=\"$PROJECT_DIR$/giraffeplayer\" />\n            <option value=\"$PROJECT_DIR$/ijkplayer-java\" />\n          </set>\n        </option>\n      </GradleProjectSettings>\n    </option>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/gradle.xml b/.idea/gradle.xml
--- a/.idea/gradle.xml	(revision 10a3cbb13b5fc05b1815351c42577261066dfaa1)
+++ b/.idea/gradle.xml	(date 1689518465567)
@@ -7,6 +7,7 @@
         <option name="testRunner" value="GRADLE" />
         <option name="distributionType" value="DEFAULT_WRAPPED" />
         <option name="externalProjectPath" value="$PROJECT_DIR$" />
+        <option name="gradleJvm" value="Embedded JDK" />
         <option name="modules">
           <set>
             <option value="$PROJECT_DIR$" />
